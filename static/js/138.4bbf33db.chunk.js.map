{"version":3,"sources":["../node_modules/@mui/icons-material/AssignmentIndOutlined.js","views/dashboard/widgets/WidgetTrainingAssignedForMe.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_createSvgIcon","_jsxRuntime","_default","jsx","d","axiosHR","useJwt","ssoAxiosInterceptor","hrAxiosInterceptor","params","pagination","clickable","autoplay","delay","disableOnInteraction","slideToClickedSlide","WidgetTrainingAssignedForMe","t","useTranslation","store","useSelector","state","dynamicStore","dynamicTempState","dynamic_temp_state","dispatch","useDispatch","navigate","useNavigate","storeName","endpointName","colors","useContext","ThemeColors","useState","loadingPostPut","setLoadingPostPut","loadingText","setLoadingText","loadingGetManager","setLoadingGetManager","managerData","setManagerData","managerDataSelected","setManagerDataSelected","isOpen","setIsOpen","toggle","errorToast","res","errorFieldsMsg","payload","error","errors","errorFields","errorx","toast","message","style","padding","color","danger","main","border","iconTheme","primary","getManager","a","storeInputName","data","get","then","setDataCache","useEffect","pageData","length","isLoading","getDataList","baseUrl","type","Id_AttendingState","renderAvatarImgIcon","Option","components","SingleValue","props","src","img","height","width","borderRadius","marginRight","label","position","calendarStrings","lastDay","sameDay","nextDay","lastWeek","nextWeek","sameElse","colorsBadge","toUpperCaseFilter","toUpperCase","lg","xs","minHeight","className","tag","blocking","loader","isManager","pill","map","row","TrainingData","Image","illustration","filter","format","StartDate","Name","Description","icon","size","calendar","IsOnline","LinkRef","Address","FunctionalPosition","rowx","i","name","sm","Ripple","onClick","e","Id_Training","md","placeholder","theme","selectThemeColors","classNamePrefix","onChange","options","item","Employee_Name","Id_Employee","Employee_PhotoPath","PositionName","isClearable","disabled","preventDefault","id","manager_id","window","location","href","postDataWidget","meta","requestStatus","xxx","success","xx","setTimeout","getDataListMyActivity","catch","outline"],"mappings":"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","file":"static/js/138.4bbf33db.chunk.js","sourcesContent":["\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M19 3h-4.18C14.4 1.84 13.3 1 12 1s-2.4.84-2.82 2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-7-.25c.22 0 .41.1.55.25.12.13.2.31.2.5 0 .41-.34.75-.75.75s-.75-.34-.75-.75c0-.19.08-.37.2-.5.14-.15.33-.25.55-.25zM19 19H5V5h14v14zM12 6c-1.65 0-3 1.35-3 3s1.35 3 3 3 3-1.35 3-3-1.35-3-3-3zm0 4c-.55 0-1-.45-1-1s.45-1 1-1 1 .45 1 1-.45 1-1 1zm-6 6.47V18h12v-1.53c0-2.5-3.97-3.58-6-3.58s-6 1.07-6 3.58zM8.31 16c.69-.56 2.38-1.12 3.69-1.12s3.01.56 3.69 1.12H8.31z\"\n}), 'AssignmentIndOutlined');\nexports.default = _default;","import Avatar from \"@components/avatar\"\r\nimport UILoader from \"@components/ui-loader\"\r\nimport illustration from \"@src/assets/images/illustration/email.svg\"\r\nimport { Loader } from \"@src/shared/CommonComponents\"\r\nimport { getDataList, postDataWidget } from \"@src/shared/dynamic_pages/store\"\r\nimport \"moment-timezone\"\r\nimport \"moment/locale/id\"\r\nimport { useContext, useEffect, useState } from \"react\"\r\nimport { Calendar, Crosshair, MapPin, Video } from \"react-feather\"\r\nimport { useTranslation } from \"react-i18next\"\r\nimport Moment from \"react-moment\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { useNavigate } from \"react-router-dom\"\r\nimport {\r\n  Alert,\r\n  Badge,\r\n  Button,\r\n  Card,\r\n  CardBody,\r\n  CardHeader,\r\n  CardText,\r\n  CardTitle,\r\n  Col,\r\n  Modal,\r\n  ModalBody,\r\n  ModalFooter,\r\n  ModalHeader,\r\n  Spinner\r\n} from \"reactstrap\"\r\n\r\nimport AssignmentIndOutlinedIcon from \"@mui/icons-material/AssignmentIndOutlined\"\r\nimport CastForEducationOutlinedIcon from \"@mui/icons-material/CastForEducationOutlined\"\r\nimport { ThemeColors } from \"@src/utility/context/ThemeColors\"\r\nimport { getDataList as getDataListMyActivity } from \"@src/views/my-info/store/my_activities\"\r\nimport { setDataCache } from \"@store/dynamicTempState\"\r\nimport { selectThemeColors } from \"@utils\"\r\nimport toast from \"react-hot-toast\"\r\nimport Select, { components } from \"react-select\"\r\nimport { Swiper, SwiperSlide } from \"swiper/react/swiper-react\"\r\n\r\nimport useJwt from \"@src/auth/jwt/useJwt\"\r\n\r\nconst axiosSso = useJwt.ssoAxiosInterceptor\r\nconst axiosHR = useJwt.hrAxiosInterceptor\r\n\r\nconst params = {\r\n  // navigation: true\r\n  pagination: {\r\n    clickable: true\r\n  },\r\n  autoplay: {\r\n    delay: 5500,\r\n    disableOnInteraction: false\r\n  },\r\n  slideToClickedSlide: true\r\n}\r\n\r\nconst WidgetTrainingAssignedForMe = () => {\r\n  const { t } = useTranslation()\r\n  // const store = useSelector((state) => state[storeName])\r\n  const store = useSelector((state) => state.dynamicStore)\r\n  const dynamicTempState = useSelector((state) => state.dynamic_temp_state)\r\n  const dispatch = useDispatch()\r\n  const navigate = useNavigate()\r\n\r\n  const storeName = \"TrainingEmployee_assignForMe\"\r\n  const endpointName = \"TrainingEmployee/assignment\"\r\n  const { colors } = useContext(ThemeColors)\r\n  const [loading, setLoading] = useState(true)\r\n  const [loadingPostPut, setLoadingPostPut] = useState(false)\r\n  const [loadingText, setLoadingText] = useState(\"Please Wait\")\r\n\r\n  const [loadingGetManager, setLoadingGetManager] = useState(false)\r\n  const [managerData, setManagerData] = useState([])\r\n  const [managerDataSelected, setManagerDataSelected] = useState(null)\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const toggle = () => {\r\n    setIsOpen(!isOpen)\r\n  }\r\n\r\n  const errorToast = (res) => {\r\n    let errorFieldsMsg = \"\"\r\n    if (res?.payload?.error?.errors) {\r\n      const errorFields = res?.payload?.error?.errors\r\n      for (let errorx in res?.payload?.error?.errors) {\r\n        errorFieldsMsg = `${errorFieldsMsg} - ${errorFields[errorx]}\\n`\r\n        // console.log(errorx, errorFields[errorx])\r\n      }\r\n    }\r\n    return toast.error(\r\n      `${res.payload?.error?.message} \\n \\n ${errorFieldsMsg}`,\r\n      {\r\n        style: {\r\n          padding: \"16px\",\r\n          color: colors.danger.main,\r\n          border: `1px solid ${colors.danger.main}`\r\n        },\r\n        iconTheme: {\r\n          primary: colors.danger.main\r\n        }\r\n      }\r\n    )\r\n  }\r\n\r\n  const postDataToApi = (data) => {\r\n    setLoadingPostPut(true)\r\n    setLoadingText(\"Sending Training Request to Manager\")\r\n    data[\"storeName\"] = storeName\r\n    data[\"endpointName\"] = endpointName\r\n    data[\"baseUrl\"] = \"hr\"\r\n    data[\"callback_page\"] = window.location.href\r\n    dispatch(postDataWidget(data))\r\n      .then((res) => {\r\n        if (res.meta.requestStatus === \"fulfilled\") {\r\n          dispatch(\r\n            getDataList({\r\n              storeName: storeName,\r\n              endpointName: endpointName,\r\n              baseUrl: \"hr\",\r\n              type: \"for_me\",\r\n              Id_AttendingState: 0\r\n            })\r\n          )\r\n            .then((xxx) => {\r\n              setLoadingPostPut(false)\r\n              toggle()\r\n              toast.success(\r\n                `${t(\"Successfully Sending Training Request to Manager\")}}`,\r\n                {\r\n                  style: {\r\n                    padding: \"16px\",\r\n                    color: colors.success.main,\r\n                    border: `1px solid ${colors.success.main}`\r\n                  },\r\n                  iconTheme: {\r\n                    primary: colors.success.main\r\n                  }\r\n                }\r\n              )\r\n            })\r\n            .then((xx) => {\r\n              dispatch(\r\n                getDataList({\r\n                  storeName: \"TrainingEmployee_assignToMe\",\r\n                  endpointName: \"TrainingEmployee/assignment\",\r\n                  baseUrl: \"hr\",\r\n                  type: \"to_me\",\r\n                  Id_AttendingState: 1\r\n                })\r\n              )\r\n              setTimeout(() => {\r\n                dispatch(getDataListMyActivity({}))\r\n              }, 8000)\r\n            })\r\n        } else if (res.meta.requestStatus === \"rejected\") {\r\n          setLoadingPostPut(false)\r\n          errorToast(res)\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        // console.error(error)\r\n        setLoadingPostPut(false)\r\n        errorToast(error)\r\n      })\r\n  }\r\n\r\n  const getManager = async () => {\r\n    toggle()\r\n\r\n    const storeInputName = \"Id_Manager\"\r\n    if (!dynamicTempState.data[storeInputName] && !loadingGetManager) {\r\n      setLoadingGetManager(true)\r\n      const finUrl = \"DepartmentManager\"\r\n      await axiosHR.get(finUrl).then((res) => {\r\n        // console.log(res)\r\n        const data = res?.data?.data\r\n        setManagerData(data)\r\n        setLoadingGetManager(false)\r\n        dispatch(setDataCache({ [storeInputName]: data }))\r\n      })\r\n    } else {\r\n      setLoadingGetManager(true)\r\n      setManagerData(dynamicTempState.data[storeInputName])\r\n      setLoadingGetManager(false)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (\r\n      !store.pageData[storeName] ||\r\n      (store.pageData[storeName]?.data?.length === 0 &&\r\n        !store.pageData[storeName]?.isLoading)\r\n    ) {\r\n      dispatch(\r\n        getDataList({\r\n          storeName: storeName,\r\n          endpointName: endpointName,\r\n          baseUrl: \"hr\",\r\n          type: \"for_me\",\r\n          Id_AttendingState: 0\r\n        })\r\n      )\r\n    }\r\n  }, [])\r\n\r\n  const renderAvatarImgIcon = (data) => {\r\n    let componentsInput = {}\r\n    const { Option, SingleValue } = components\r\n    const IconOption = (props) => (\r\n      <Option {...props}>\r\n        <img\r\n          src={props.data.img}\r\n          style={{\r\n            height: \"30px\",\r\n            width: \"30px\",\r\n            borderRadius: \"10%\",\r\n            marginRight: \"10px\"\r\n          }}\r\n        />\r\n        {props.data.label} <small>({props.data.position})</small>\r\n      </Option>\r\n    )\r\n\r\n    const IconSingleValue = (props) => (\r\n      <SingleValue {...props}>\r\n        <img\r\n          src={props.data.img}\r\n          style={{\r\n            height: \"30px\",\r\n            width: \"30px\",\r\n            borderRadius: \"10%\",\r\n            marginRight: \"10px\"\r\n          }}\r\n        />\r\n        {props.data.label} <small>({props.data.position})</small>\r\n      </SingleValue>\r\n    )\r\n\r\n    componentsInput = {\r\n      components: {\r\n        SingleValue: IconSingleValue,\r\n        Option: IconOption\r\n      }\r\n    }\r\n\r\n    return componentsInput\r\n  }\r\n\r\n  const calendarStrings = {\r\n    lastDay: \"[Yesterday]\",\r\n    sameDay: \"[Today]\",\r\n    nextDay: \"[Tomorrow]\",\r\n    lastWeek: \"[last] dddd\",\r\n    nextWeek: \"dddd\",\r\n    sameElse: \"L\"\r\n  }\r\n\r\n  const colorsBadge = [\r\n    \"primary\",\r\n    \"success\",\r\n    \"danger\",\r\n    \"warning\",\r\n    \"info\",\r\n    \"secondary\"\r\n  ]\r\n\r\n  const toUpperCaseFilter = (d) => {\r\n    return d.toUpperCase()\r\n  }\r\n\r\n  {\r\n    return store.pageData[storeName]?.isLoading ? (\r\n      <Col lg=\"12\" xs=\"12\">\r\n        <Card style={{ minHeight: \"200px\" }}>\r\n          <CardHeader>\r\n            <div className=\"d-flex align-items-center\">\r\n              <CastForEducationOutlinedIcon className=\"user-timeline-title-icon me-1\" />\r\n              <CardTitle tag=\"h4\">{t(\"Recommended Training\")}</CardTitle>\r\n            </div>\r\n          </CardHeader>\r\n          <UILoader blocking={true} loader={<Loader />}>\r\n            <CardBody></CardBody>\r\n          </UILoader>\r\n        </Card>\r\n      </Col>\r\n    ) : store.pageData[storeName]?.data?.length > 0 ? (\r\n      <Col lg=\"12\" xs=\"12\">\r\n        <Card>\r\n          <CardHeader>\r\n            <div className=\"d-flex align-items-center\">\r\n              <CastForEducationOutlinedIcon className=\"user-timeline-title-icon me-1\" />\r\n              <CardTitle tag=\"h4\">\r\n                {!store.pageData[storeName]?.data[0]?.isManager\r\n                  ? t(\"Recommended Training For You\")\r\n                  : t(\"Recommended Training For Your Staff\")}\r\n              </CardTitle>\r\n              {store.pageData[storeName]?.data?.length > 1 && (\r\n                <Badge className=\"ms-1\" tag=\"div\" color=\"info\" pill>\r\n                  {store.pageData[storeName]?.data?.length}\r\n                </Badge>\r\n              )}\r\n            </div>\r\n          </CardHeader>\r\n          <CardBody className=\"px-0 pb-0\">\r\n            <Swiper {...params}>\r\n              {store.pageData[storeName]?.data.map((row) => {\r\n                return (\r\n                  <SwiperSlide key={`swiper_${row.id}`}>\r\n                    <Card className=\"card-developer-meetup cursor-pointer\">\r\n                      <div className=\"meetup-img-wrapper rounded-top text-center\">\r\n                        <img\r\n                          src={\r\n                            row?.TrainingData?.Image\r\n                              ? row.TrainingData.Image\r\n                              : illustration\r\n                          }\r\n                          height=\"170\"\r\n                        />\r\n                      </div>\r\n                      <CardBody>\r\n                        <div className=\"meetup-header d-flex align-items-center\">\r\n                          <div className=\"meetup-day\">\r\n                            <h6 className=\"mb-0\">\r\n                              <Moment filter={toUpperCaseFilter} format=\"ddd\">\r\n                                {row?.TrainingData?.StartDate}\r\n                              </Moment>\r\n                            </h6>\r\n                            <h3 className=\"mb-0\">\r\n                              <Moment format=\"DD\">\r\n                                {row?.TrainingData?.StartDate}\r\n                              </Moment>\r\n                            </h3>\r\n                          </div>\r\n                          <div className=\"my-auto text-truncate\">\r\n                            <CardTitle tag=\"h4\" className=\"mb-25\">\r\n                              {row?.TrainingData?.Name}\r\n                            </CardTitle>\r\n                            <CardText className=\"mb-0\">\r\n                              {row?.TrainingData?.Description}\r\n                            </CardText>\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"d-flex\">\r\n                          <Avatar\r\n                            color=\"light-primary\"\r\n                            className=\"rounded me-1\"\r\n                            icon={<Calendar size={18} />}\r\n                          />\r\n                          <div>\r\n                            {/* <h6 className=\"mb-0\">Sat, May 25, 2020</h6>\r\n                    <small>10:AM to 6:PM</small> */}\r\n                            <h6 className=\"mb-0\">\r\n                              {\r\n                                <Moment calendar={calendarStrings}>\r\n                                  {row?.TrainingData?.StartDate}\r\n                                </Moment>\r\n                              }\r\n                            </h6>\r\n                            <small>\r\n                              {\r\n                                <Moment format=\"[Start at] LT\">\r\n                                  {row?.TrainingData?.StartDate}\r\n                                </Moment>\r\n                              }\r\n                            </small>\r\n                          </div>\r\n                        </div>\r\n                        {!row?.TrainingData?.IsOnline ? (\r\n                          <div className=\"d-flex mt-2\">\r\n                            <Avatar\r\n                              color=\"light-primary\"\r\n                              className=\"rounded me-1\"\r\n                              icon={<MapPin size={18} />}\r\n                            />\r\n                            <div className=\"align-items-center align-middle my-auto\">\r\n                              {/* <h6 className=\"mb-0\">Central Park</h6> */}\r\n                              <small>{row?.TrainingData?.Address}</small>\r\n                            </div>\r\n                          </div>\r\n                        ) : (\r\n                          <div className=\"d-flex mt-2\">\r\n                            <Avatar\r\n                              color=\"light-primary\"\r\n                              className=\"rounded me-1\"\r\n                              icon={<Video size={18} />}\r\n                            />\r\n                            <div className=\"align-items-center align-middle my-auto\">\r\n                              <h6 className=\"mb-0\">{t(\"Online Training\")}</h6>\r\n                              {row?.TrainingData?.LinkRef && (\r\n                                <small>\r\n                                  {row?.TrainingData?.LinkRef\r\n                                    ? row?.TrainingData?.LinkRef\r\n                                    : \"The link will be sent before the event starts\"}\r\n                                </small>\r\n                              )}\r\n                            </div>\r\n                          </div>\r\n                        )}\r\n                        {row?.FunctionalPosition && (\r\n                          <div className=\"d-flex mt-2\">\r\n                            <Avatar\r\n                              color=\"light-primary\"\r\n                              className=\"rounded me-1\"\r\n                              icon={<Crosshair size={18} />}\r\n                            />\r\n                            <div className=\"align-items-center align-middle my-auto\">\r\n                              {row.FunctionalPosition.map((rowx, i) => {\r\n                                return (\r\n                                  <Badge\r\n                                    key={`badge_${i}`}\r\n                                    color={`light-${\r\n                                      colorsBadge[i] ?? \"primary\"\r\n                                    }`}\r\n                                  >\r\n                                    {rowx?.name}\r\n                                  </Badge>\r\n                                )\r\n                              })}\r\n                            </div>\r\n                          </div>\r\n                        )}\r\n                        {/* <AvatarGroup data={data} /> */}\r\n                        {!row?.isManager ? (\r\n                          <Col className=\"d-grid mt-2\" sm=\"12\">\r\n                            <Button.Ripple\r\n                              onClick={getManager}\r\n                              color=\"gradient-primary\"\r\n                            >\r\n                              {t(\"Follow\")}\r\n                            </Button.Ripple>\r\n                            {/* <Collapse isOpen={isOpen}>\r\n                              <Alert color=\"primary\">\r\n                                <div className=\"alert-body\">\r\n                                  <Info size={15} />\r\n                                  <span className=\"ms-1\">\r\n                                    Chupa chups topping bonbon. Jelly-o toffee I\r\n                                    love. Sweet I love wafer I love wafer.\r\n                                  </span>\r\n                                </div>\r\n                              </Alert>\r\n\r\n                              <Col className=\"mt-1\" md=\"12\" sm=\"12\">\r\n                                <Label className=\"form-label\">\r\n                                  {t(\"Please Select Your Manager\")}\r\n                                </Label>\r\n                                <Select\r\n                                  theme={selectThemeColors}\r\n                                  className=\"react-select\"\r\n                                  classNamePrefix=\"select\"\r\n                                  defaultValue={colourOptions[0]}\r\n                                  options={colourOptions}\r\n                                  isClearable={false}\r\n                                />\r\n                              </Col>\r\n                            </Collapse> */}\r\n                            <Modal\r\n                              isOpen={isOpen}\r\n                              toggle={toggle}\r\n                              className={\"modal-dialog-centered\"}\r\n                            >\r\n                              <ModalHeader toggle={toggle}>\r\n                                {t(\"Manager Approval Required\")}\r\n                              </ModalHeader>\r\n                              <ModalBody>\r\n                                <Alert color=\"primary\">\r\n                                  <div className=\"alert-body\">\r\n                                    {t(\r\n                                      \"Please select your manager to approve your participation in this training\"\r\n                                    )}\r\n                                  </div>\r\n                                </Alert>\r\n\r\n                                <Col className=\"mt-1\" md=\"12\" sm=\"12\">\r\n                                  <Select\r\n                                    {...renderAvatarImgIcon(managerData)}\r\n                                    // isDisabled={loadingGetManager}\r\n                                    placeholder={t(\"Choose Manager\")}\r\n                                    isLoading={loadingGetManager}\r\n                                    theme={selectThemeColors}\r\n                                    className=\"react-select\"\r\n                                    classNamePrefix=\"select\"\r\n                                    onChange={setManagerDataSelected}\r\n                                    options={managerData.map((item) => {\r\n                                      return {\r\n                                        label: item.Employee_Name,\r\n                                        value: item.Id_Employee,\r\n                                        img: item?.Employee_PhotoPath,\r\n                                        position: item?.PositionName\r\n                                      }\r\n                                    })}\r\n                                    isClearable={false}\r\n                                  />\r\n                                </Col>\r\n                              </ModalBody>\r\n                              <ModalFooter>\r\n                                {!loadingPostPut ? (\r\n                                  <Button\r\n                                    disabled={!managerDataSelected}\r\n                                    color=\"primary\"\r\n                                    onClick={(e) => {\r\n                                      e.preventDefault()\r\n                                      postDataToApi({\r\n                                        id: row?.Id_Training,\r\n                                        manager_id: managerDataSelected.value\r\n                                      })\r\n                                    }}\r\n                                    outline\r\n                                  >\r\n                                    {t(\"Apply to Manager\")}\r\n                                  </Button>\r\n                                ) : (\r\n                                  <Button.Ripple color=\"primary\">\r\n                                    <Spinner\r\n                                      color=\"white\"\r\n                                      size=\"sm\"\r\n                                      type=\"grow\"\r\n                                    />\r\n                                    <span className=\"ms-50\">{loadingText}</span>\r\n                                  </Button.Ripple>\r\n                                )}\r\n                              </ModalFooter>\r\n                            </Modal>\r\n                          </Col>\r\n                        ) : (\r\n                          <Col className=\"d-grid mt-2\" sm=\"12\">\r\n                            <Button.Ripple\r\n                              onClick={(e) => {\r\n                                navigate(\r\n                                  `/dyn_pages/hr/training/edit/${row.Id_Training}/training_employee`\r\n                                )\r\n                              }}\r\n                              color=\"gradient-primary\"\r\n                            >\r\n                              <AssignmentIndOutlinedIcon size={14} />\r\n                              <span className=\"align-middle ms-25\">\r\n                                {t(\"Assign to Staff\")}\r\n                              </span>\r\n                            </Button.Ripple>\r\n                          </Col>\r\n                        )}\r\n                      </CardBody>\r\n                    </Card>\r\n                  </SwiperSlide>\r\n                )\r\n              })}\r\n            </Swiper>\r\n          </CardBody>\r\n        </Card>\r\n      </Col>\r\n    ) : null\r\n  }\r\n}\r\n\r\nexport default WidgetTrainingAssignedForMe\r\n"],"sourceRoot":""}