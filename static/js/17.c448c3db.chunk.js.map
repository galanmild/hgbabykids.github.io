{"version":3,"sources":["views/apps/unit/modal/index.js","views/apps/unit/index.js","views/apps/unit/Table.js","views/apps/unit/Tree.js"],"names":["ModalAddEdit","show","setShow","detailPage","formState","setFormState","currentData","t","useTranslation","id","useParams","dispatch","useDispatch","store","useSelector","state","storeName","colors","useContext","ThemeColors","useState","loadingText","setLoadingText","useForm","control","setError","handleSubmit","errors","Loader","className","sortedObject","unordered","Object","keys","sort","reduce","obj","key","handleReset","resetSelectedData","isOpen","toggle","blocking","isLoadingAddEdit","isLoadingDetail","loader","pageTitle","onSubmit","data","storeData","selectedData","JSON","stringify","countChanges","values","every","field","putData","then","res","meta","requestStatus","toast","success","style","padding","color","main","border","iconTheme","primary","getDataById","error","payload","message","danger","length","type","icon","depth","postData","console","log","md","xs","for","defaultValue","name","render","invalid","code","outline","onClick","List","searchTerm","setSearchTerm","useEffect","getApiSummaryData","dataSummary","isLoadingSummary","getAlwaysGrid","getSummaryData","title","htmlFor","value","onChange","e","event","target","map","item","index","statTitle","baseClassName","fontSize","renderStats","sx","bgcolor","animation","height","width","count_format","count","searchString","MySwal","withReactContent","Swal","BootstrapCheckbox","forwardRef","props","ref","CustomHeader","toggleSidebar","handlePerPage","rowsPerPage","handleFilter","selectedRow","handleDeleteSelected","ability","AbilityContext","userData","invoices","getUserData","xl","can","sessionStorage","getItem","caret","getInvoice","rpt_name","output_type","dataYear","print","as_attachment","par_UNITKEY","par_SAMPLE","sort_dir","setSortDir","currentPage","setCurrentPage","setSort","setRowsPerPage","selectedRows","setSelectedRows","toggleCleared","setToggleCleared","sidebarOpen","setSidebarOpen","loading","setLoading","showModal","setShowModal","handleEdit","rowData","detailFromGrid","setDataById","handleCloseModal","revivalBack","neutralizeBack","handleDelete","fire","text","showCancelButton","confirmButtonText","cancelButtonText","customClass","confirmButton","cancelButton","buttonsStyling","deleteData","a","countSelectedCopy","deleteSelectedRowData","debounceFn","useCallback","debounce","inputValue","getDataList","search","page","handleRowSelected","columns","dynamicColumns","column","columnName","sortField","fieldName","center","sortable","selector","row","cell","dataFormat","includes","columnTypeFormat","split","columnType","columnFormat","columnFormated","Moment","format","renderCell","tableColumns","useMemo","isLoading","dark","light","noHeader","subHeader","sortServer","responsive","pagination","paginationServer","paginationTotalRows","total","paginationComponent","Number","Math","ceil","previousLabel","nextLabel","pageCount","activeClassName","forcePage","onPageChange","selected","handlePagination","pageClassName","nextLinkClassName","nextClassName","previousClassName","previousLinkClassName","pageLinkClassName","containerClassName","selectableRows","onSelectedRowsChange","selectableRowsHighlight","clearSelectedRows","selectableRowsComponent","noDataComponent","highlightOnHover","pointerOnHover","onSort","sortDirection","sortIcon","filters","isFiltered","some","k","Array","fill","dataToRender","subHeaderComponent","parseInt","currentTarget","currentDataAdd","setCurrentDataAdd","searchFocusIndex","setSearchFocusIndex","setSearchFoundCount","dataNested","isLoadingNested","marginLeft","marginRight","marginTop","treeData","tree","setDataListNested","canDrag","searchMethod","node","searchQuery","toLowerCase","indexOf","searchFocusOffset","searchFinishCallback","matches","maxDepth","generateNodeProps","path","is_app_header","fontWeight","attributes","logo","src","buttons","Ripple","size","placement","disableEdit","preventDefault","disableDelete","children"],"mappings":"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","file":"static/js/17.c448c3db.chunk.js","sourcesContent":["/* eslint-disable multiline-ternary */\r\nimport { Fragment, useContext, useEffect, useState } from \"react\"\r\nimport { useParams } from \"react-router-dom\"\r\nimport toast from \"react-hot-toast\"\r\nimport Cleave from \"cleave.js/react\"\r\nimport {\r\n  Row,\r\n  Col,\r\n  Form,\r\n  Button,\r\n  Input,\r\n  Label,\r\n  Modal,\r\n  ModalBody,\r\n  ModalHeader,\r\n  CardText\r\n} from \"reactstrap\"\r\nimport { useTranslation } from \"react-i18next\"\r\nimport UILoader from \"@components/ui-loader\"\r\nimport Spinner from \"@components/spinner/Loading-spinner\"\r\nimport \"moment/locale/id\"\r\nimport { ThemeColors } from \"@src/utility/context/ThemeColors\"\r\nimport { selectThemeColors } from \"@utils\"\r\nimport Select from \"react-select\"\r\nimport Flatpickr from \"react-flatpickr\"\r\nimport \"@styles/react/libs/flatpickr/flatpickr.scss\"\r\nimport { Indonesian } from \"flatpickr/dist/l10n/id.js\"\r\nimport { useForm, Controller } from \"react-hook-form\"\r\nimport {\r\n  storeName,\r\n  pageTitle,\r\n  postData,\r\n  putData,\r\n  resetSelectedData,\r\n  getDataById\r\n} from \"../store\"\r\n\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\n\r\nconst ModalAddEdit = ({\r\n  show,\r\n  setShow,\r\n  detailPage,\r\n  formState,\r\n  setFormState,\r\n  currentData = null\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { id } = useParams()\r\n  const dispatch = useDispatch()\r\n  const store = useSelector((state) => state[storeName])\r\n  const { colors } = useContext(ThemeColors)\r\n  const [tgl1, setTgl1] = useState(null)\r\n  const [loadingText, setLoadingText] = useState(\"Please Wait\")\r\n  const {\r\n    control,\r\n    setError,\r\n    handleSubmit,\r\n    formState: { errors }\r\n  } = useForm({})\r\n\r\n  const Loader = () => {\r\n    return (\r\n      <Fragment>\r\n        <Spinner />\r\n        <CardText className=\"mb-0 mt-1\">{t(loadingText)}...</CardText>\r\n      </Fragment>\r\n    )\r\n  }\r\n\r\n  function sortedObject(unordered) {\r\n    return Object.keys(unordered)\r\n      .sort()\r\n      .reduce((obj, key) => {\r\n        obj[key] = unordered[key]\r\n        return obj\r\n      }, {})\r\n  }\r\n\r\n  const countChanges = (data) => {\r\n    if (formState === \"edit\") {\r\n      const storeData = { ...sortedObject(store.selectedData) }\r\n      delete storeData[\"id\"]\r\n      for (let key in storeData) {\r\n        if (!(key in data)) delete storeData[key]\r\n      }\r\n      // console.log(JSON.stringify(sortedObject(storeData)))\r\n      // console.log(JSON.stringify(sortedObject(data)))\r\n      return (\r\n        JSON.stringify(sortedObject(storeData)) !==\r\n        JSON.stringify(sortedObject(data))\r\n      )\r\n    } else {\r\n      return true\r\n    }\r\n  }\r\n\r\n  const updateDataToApi = (data) => {\r\n    if (countChanges(data)) {\r\n      if (\r\n        Object.values(data).every((field) => {\r\n          return field !== null && field !== \"\"\r\n        })\r\n      ) {\r\n        setLoadingText(`${t(\"Updating\")} ${t(pageTitle)} ${t(\"Detail\")} Data`)\r\n        dispatch(putData(data)).then((res) => {\r\n          // console.log(res)\r\n          if (res.meta.requestStatus === \"fulfilled\") {\r\n            setShow(!show)\r\n            toast.success(`${t(\"Successfully Updated\")} ${t(pageTitle)}`, {\r\n              style: {\r\n                padding: \"16px\",\r\n                color: colors.success.main,\r\n                border: `1px solid ${colors.success.main}`\r\n              },\r\n              iconTheme: {\r\n                primary: colors.success.main\r\n              }\r\n            })\r\n            if (detailPage) {\r\n              dispatch(getDataById(id))\r\n            }\r\n          } else if (res.meta.requestStatus === \"rejected\") {\r\n            toast.error(res.payload?.message, {\r\n              style: {\r\n                padding: \"16px\",\r\n                color: colors.danger.main,\r\n                border: `1px solid ${colors.danger.main}`\r\n              },\r\n              iconTheme: {\r\n                primary: colors.danger.main\r\n              }\r\n            })\r\n          }\r\n        })\r\n      } else {\r\n        for (const key in data) {\r\n          if (data[key]?.length === 0) {\r\n            setError(key, {\r\n              type: \"manual\"\r\n            })\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      toast(`${t(\"You haven't changed anything\")}`, { icon: \"👏\" })\r\n    }\r\n  }\r\n\r\n  const postDataToApi = (data) => {\r\n    if (\r\n      Object.values(data).every((field) => {\r\n        return field !== null && field !== \"\"\r\n      })\r\n    ) {\r\n      setLoadingText(`${t(`Creating a New ${pageTitle}`)}`)\r\n      data[\"depth\"] = currentData.depth + 1\r\n      data[\"parent_id\"] = currentData.id\r\n      dispatch(postData(data)).then((res) => {\r\n        // console.log(res)\r\n        console.log(res)\r\n        if (res.meta.requestStatus === \"fulfilled\") {\r\n          setShow(!show)\r\n          toast.success(`${t(\"Successfully Created\")} ${t(pageTitle)}`, {\r\n            style: {\r\n              padding: \"16px\",\r\n              color: colors.success.main,\r\n              border: `1px solid ${colors.success.main}`\r\n            },\r\n            iconTheme: {\r\n              primary: colors.success.main\r\n            }\r\n          })\r\n          if (detailPage) {\r\n            dispatch(getDataById(id))\r\n          }\r\n        } else if (res.meta.requestStatus === \"rejected\") {\r\n          toast.error(res.payload.message, {\r\n            style: {\r\n              padding: \"16px\",\r\n              color: colors.danger.main,\r\n              border: `1px solid ${colors.danger.main}`\r\n            },\r\n            iconTheme: {\r\n              primary: colors.danger.main\r\n            }\r\n          })\r\n        }\r\n      })\r\n    } else {\r\n      for (const key in data) {\r\n        if (data[key] !== null && data[key]?.length === 0) {\r\n          setError(key, {\r\n            type: \"manual\"\r\n          })\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  const handleReset = () => {\r\n    dispatch(resetSelectedData())\r\n  }\r\n\r\n  return (\r\n    <Modal\r\n      isOpen={show}\r\n      toggle={() => {\r\n        handleReset()\r\n        setShow(!show)\r\n      }}\r\n      className=\"modal-dialog-centered modal-lg\"\r\n    >\r\n      <UILoader\r\n        blocking={store.isLoadingAddEdit || store.isLoadingDetail}\r\n        loader={<Loader />}\r\n      >\r\n        <ModalHeader\r\n          className=\"bg-transparent\"\r\n          toggle={() => {\r\n            handleReset()\r\n            setShow(!show)\r\n          }}\r\n        ></ModalHeader>\r\n        <ModalBody className=\"px-sm-5 pt-50 pb-5\">\r\n          <div className=\"text-center mb-2\">\r\n            <h2 className=\"mb-1\">\r\n              {formState === \"edit\" ? t(\"Edit\") : t(\"Add\")} {t(pageTitle)}\r\n            </h2>\r\n            {formState !== \"edit\" ? (\r\n              <p>\r\n                Setelah menambahkan data {t(\"Unit\")} baru, maka pastikan logout\r\n                dulu akun anda.\r\n              </p>\r\n            ) : null}\r\n          </div>\r\n          <Form\r\n            onSubmit={\r\n              formState === \"edit\"\r\n                ? handleSubmit(updateDataToApi)\r\n                : handleSubmit(postDataToApi)\r\n            }\r\n          >\r\n            <Row className=\"gy-1 pt-75\">\r\n              <Col md={12} xs={12}>\r\n                <Label className=\"form-label\" for=\"name\">\r\n                  {t(\"Name\")}\r\n                  <span className=\"text-danger\">*</span>\r\n                </Label>\r\n                <Controller\r\n                  defaultValue={store.selectedData?.name ?? \"\"}\r\n                  control={control}\r\n                  id=\"name\"\r\n                  name=\"name\"\r\n                  render={({ field }) => (\r\n                    <Input\r\n                      {...field}\r\n                      className={\r\n                        errors.name ? \"form-control is-invalid\" : \"form-control\"\r\n                      }\r\n                      id=\"name\"\r\n                      invalid={errors.name && true}\r\n                    />\r\n                  )}\r\n                />\r\n              </Col>\r\n\r\n              <Col md={12} xs={12}>\r\n                <Label className=\"form-label\" for=\"description\">\r\n                  {t(\"Code\")}\r\n                  <span className=\"text-danger\">*</span>\r\n                </Label>\r\n                <Controller\r\n                  defaultValue={store.selectedData?.code ?? \"\"}\r\n                  control={control}\r\n                  id=\"code\"\r\n                  name=\"code\"\r\n                  render={({ field }) => (\r\n                    <Input\r\n                      {...field}\r\n                      className={\r\n                        errors.code ? \"form-control is-invalid\" : \"form-control\"\r\n                      }\r\n                      id=\"code\"\r\n                      invalid={errors.code && true}\r\n                    />\r\n                  )}\r\n                />\r\n              </Col>\r\n\r\n              <Col xs={12} className=\"text-center mt-2 pt-50\">\r\n                <Button type=\"submit\" className=\"me-1\" color=\"primary\">\r\n                  {t(\"Submit\")}\r\n                </Button>\r\n                <Button\r\n                  type=\"reset\"\r\n                  color=\"secondary\"\r\n                  outline\r\n                  onClick={() => {\r\n                    handleReset()\r\n                    setFormState(\"add\")\r\n                    setShow(false)\r\n                  }}\r\n                >\r\n                  {t(\"Cancel\")}\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n          </Form>\r\n        </ModalBody>\r\n      </UILoader>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default ModalAddEdit\r\n","import { Fragment, useEffect, useState } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { useTranslation } from \"react-i18next\"\r\nimport Table from \"./Table\"\r\nimport { Row, Col, Input } from \"reactstrap\"\r\nimport StatsHorizontal from \"@components/widgets/stats/StatsHorizontal\"\r\nimport { User, UserPlus, UserCheck, UserX } from \"react-feather\"\r\nimport Icon from \"@mui/material/Icon\"\r\nimport AddCardOutlinedIcon from \"@mui/icons-material/AddCardOutlined\"\r\nimport \"./style.scss\"\r\nimport Breadcrumbs from \"@components/breadcrumbs\"\r\nimport Tree from \"./Tree\"\r\nimport {\r\n  storeName,\r\n  getAlwaysGrid,\r\n  getApiSummaryData,\r\n  getSummaryData\r\n} from \"./store\"\r\nimport { Skeleton } from \"@mui/material\"\r\n\r\nconst List = () => {\r\n  const { t } = useTranslation()\r\n  const dispatch = useDispatch()\r\n  const store = useSelector((state) => state[storeName])\r\n  const [searchTerm, setSearchTerm] = useState(\"\")\r\n\r\n  const handleFilter = (event) => {\r\n    // console.log(\"handleFilter\")\r\n    setSearchTerm(event)\r\n    // debounceFn(event)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (\r\n      getApiSummaryData &&\r\n      (store.dataSummary?.length === 0 ||\r\n        (!store.isLoadingSummary && getAlwaysGrid))\r\n    ) {\r\n      dispatch(getSummaryData({}))\r\n    }\r\n  }, [dispatch, store.dataSummary?.length])\r\n\r\n  const colors = [\r\n    \"primary\",\r\n    \"success\",\r\n    \"warning\",\r\n    \"danger\",\r\n    \"info\",\r\n    \"secondary\"\r\n  ]\r\n\r\n  return (\r\n    <>\r\n      <div className=\"content-header row\">\r\n        <Breadcrumbs\r\n          title={t(\"Instance & Corporate\")}\r\n          data={[{ title: t(\"App Setting\") }, { title: t(\"Instance\") }]}\r\n        />\r\n        <div className=\"content-header-right text-md-end col-md-3 col-12 d-md-block d-none\">\r\n          <div className=\"breadcrumb-right dropdown\">\r\n            <div className=\"d-flex align-items-center mb-sm-0 mb-1 me-1\">\r\n              <label className=\"mb-0\" htmlFor=\"search-invoice\">\r\n                {t(\"Search\")}:\r\n              </label>\r\n              <Input\r\n                id=\"search-invoice\"\r\n                className=\"ms-50 w-100\"\r\n                type=\"text\"\r\n                value={searchTerm}\r\n                onChange={(e) => handleFilter(e.target.value)}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"content-header-right text-md-end col-md-3 col-12 d-md-block d-none\">\r\n        <div className=\"breadcrumb-right dropdown\"></div>\r\n      </div>\r\n      <div className=\"app-user-list\">\r\n        {getApiSummaryData && (\r\n          <Row>\r\n            {store.dataSummary?.map((item, index) => {\r\n              return (\r\n                <Col>\r\n                  <StatsHorizontal\r\n                    color={colors[index]}\r\n                    statTitle={`${t(item.title)}`}\r\n                    icon={\r\n                      item.icon ? (\r\n                        <Icon\r\n                          baseClassName=\"material-icons-outlined\"\r\n                          fontSize=\"20\"\r\n                        >\r\n                          {item.icon}\r\n                        </Icon>\r\n                      ) : (\r\n                        <Icon\r\n                          baseClassName=\"material-icons-outlined\"\r\n                          fontSize=\"20\"\r\n                        >\r\n                          lightbulb\r\n                        </Icon>\r\n                      )\r\n                    }\r\n                    renderStats={\r\n                      store.isLoadingSummary ? (\r\n                        <Skeleton\r\n                          sx={{ bgcolor: \"#eef2f8\" }}\r\n                          animation=\"wave\"\r\n                          height={25}\r\n                          width={40}\r\n                          className=\"fw-bolder mb-75\"\r\n                        />\r\n                      ) : (\r\n                        <h3 className=\"fw-bolder mb-75\">\r\n                          {item.count_format ?? item.count}\r\n                        </h3>\r\n                      )\r\n                    }\r\n                  />\r\n                </Col>\r\n              )\r\n            })}\r\n          </Row>\r\n        )}\r\n        <Tree searchString={searchTerm} />\r\n        {/* <Table /> */}\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default List\r\n","/* eslint-disable implicit-arrow-linebreak */\r\n/* eslint-disable no-confusing-arrow */\r\n/* eslint-disable multiline-ternary */\r\nimport {\r\n  Fragment,\r\n  useState,\r\n  useEffect,\r\n  useContext,\r\n  useMemo,\r\n  useCallback,\r\n  forwardRef\r\n} from \"react\"\r\nimport { useTranslation } from \"react-i18next\"\r\nimport { AbilityContext } from \"@src/utility/context/Can\"\r\nimport ModalAddEdit from \"./modal\"\r\nimport { neutralizeBack, revivalBack } from \"@src/utility/Utils\"\r\nimport {\r\n  storeName,\r\n  pageTitle,\r\n  serverSideGrid,\r\n  detailFromGrid,\r\n  dynamicColumns,\r\n  getApiAfterPut,\r\n  getApiAfterPost,\r\n  getApiAfterDelete,\r\n  getSummarysData,\r\n  getAlwaysGrid,\r\n  getDataList,\r\n  getDataById,\r\n  setDataById,\r\n  deleteData,\r\n  deleteSelectedRowData\r\n} from \"./store\"\r\nimport { getInvoice } from \"../../invoices/store\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport ReactPaginate from \"react-paginate\"\r\nimport DataTable from \"react-data-table-component\"\r\nimport debounce from \"lodash.debounce\"\r\nimport {\r\n  ChevronDown,\r\n  Share,\r\n  Printer,\r\n  FileText,\r\n  File,\r\n  Grid\r\n} from \"react-feather\"\r\n\r\nimport { getUserData } from \"@utils\"\r\n\r\nimport UILoader from \"@components/ui-loader\"\r\nimport Spinner from \"@components/spinner/Loading-spinner\"\r\nimport { ThemeColors } from \"@src/utility/context/ThemeColors\"\r\nimport toast from \"react-hot-toast\"\r\nimport {\r\n  Row,\r\n  Col,\r\n  Card,\r\n  Input,\r\n  Button,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  DropdownToggle,\r\n  UncontrolledDropdown,\r\n  CardText\r\n} from \"reactstrap\"\r\n\r\nimport \"@styles/react/libs/react-select/_react-select.scss\"\r\nimport \"@styles/react/libs/tables/react-dataTable-component.scss\"\r\nimport Swal from \"sweetalert2\"\r\nimport withReactContent from \"sweetalert2-react-content\"\r\nimport { Skeleton } from \"@mui/material\"\r\nimport Moment from \"moment\"\r\nimport GlobalActionsTable from \"../../../shared/GlobaActionsTable\"\r\nimport { NoDataDisplay, Loader } from \"@src/shared/CommonComponents\"\r\n\r\nconst MySwal = withReactContent(Swal)\r\n\r\n// ** Bootstrap Checkbox Component\r\nconst BootstrapCheckbox = forwardRef((props, ref) => (\r\n  <div className=\"form-check\">\r\n    <Input type=\"checkbox\" ref={ref} {...props} />\r\n  </div>\r\n))\r\n\r\n// ** Table Header\r\nconst CustomHeader = ({\r\n  store,\r\n  toggleSidebar,\r\n  handlePerPage,\r\n  rowsPerPage,\r\n  handleFilter,\r\n  searchTerm,\r\n  selectedRow,\r\n  handleDeleteSelected\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const ability = useContext(AbilityContext)\r\n  const dispatch = useDispatch()\r\n  const storeInvoice = useSelector((state) => state.invoices)\r\n  const userData = getUserData()\r\n\r\n  return (\r\n    <div className=\"invoice-list-table-header w-100 me-1 ms-50 mt-2 mb-75\">\r\n      <Row>\r\n        <Col xl=\"4\" className=\"d-flex align-items-center p-0\">\r\n          <div className=\"d-flex align-items-center w-100\">\r\n            <label htmlFor=\"rows-per-page\">{t(\"Show\")}</label>\r\n            <Input\r\n              className=\"mx-50\"\r\n              type=\"select\"\r\n              id=\"rows-per-page\"\r\n              value={rowsPerPage}\r\n              onChange={handlePerPage}\r\n              style={{ width: \"5rem\" }}\r\n            >\r\n              <option value=\"10\">10</option>\r\n              <option value=\"25\">25</option>\r\n              <option value=\"50\">50</option>\r\n            </Input>\r\n            <label htmlFor=\"rows-per-page\">{t(\"Entries\")}</label>\r\n          </div>\r\n        </Col>\r\n        <Col\r\n          xl=\"8\"\r\n          className=\"d-flex align-items-sm-center justify-content-xl-end justify-content-start flex-xl-nowrap flex-wrap flex-sm-row flex-column pe-xl-1 p-0 mt-xl-0 mt-1\"\r\n        >\r\n          {selectedRow?.length > 0 &&\r\n          ability.can(\"delete\", sessionStorage.getItem(\"current_page_perm\")) ? (\r\n            <div className=\"d-flex align-items-center mb-sm-0 mb-1 me-1\">\r\n              <Button\r\n                className=\"delete-users\"\r\n                color=\"danger\"\r\n                onClick={handleDeleteSelected}\r\n              >\r\n                {t(\"Delete\")} {selectedRow.length} {t(`Selected ${pageTitle}`)}\r\n              </Button>\r\n            </div>\r\n          ) : null}\r\n          <div className=\"d-flex align-items-center mb-sm-0 mb-1 me-1\">\r\n            <label className=\"mb-0\" htmlFor=\"search-invoice\">\r\n              {t(\"Search\")}:\r\n            </label>\r\n            <Input\r\n              id=\"search-invoice\"\r\n              className=\"ms-50 w-100\"\r\n              type=\"text\"\r\n              value={searchTerm}\r\n              onChange={(e) => handleFilter(e.target.value)}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"d-flex align-items-center table-header-actions\">\r\n            <UncontrolledDropdown className=\"me-1\">\r\n              <DropdownToggle color=\"secondary\" caret outline>\r\n                <Share className=\"font-small-4 me-50\" />\r\n                <span className=\"align-middle\">{t(\"Export\")}</span>\r\n              </DropdownToggle>\r\n              <DropdownMenu>\r\n                <DropdownItem\r\n                  className=\"w-100\"\r\n                  onClick={() =>\r\n                    dispatch(\r\n                      getInvoice({\r\n                        rpt_name: \"sample\",\r\n                        output_type: \"pdf\",\r\n                        dataYear: userData.dataYear,\r\n                        print: true,\r\n                        as_attachment: true,\r\n                        par_UNITKEY: 139,\r\n                        par_SAMPLE: \"ahh...ini adalah sample parameter\"\r\n                      })\r\n                    )\r\n                  }\r\n                >\r\n                  <Printer className=\"font-small-4 me-50\" />\r\n                  <span className=\"align-middle\">{t(\"Print\")}</span>\r\n                </DropdownItem>\r\n                <DropdownItem\r\n                  className=\"w-100\"\r\n                  onClick={() =>\r\n                    dispatch(\r\n                      getInvoice({\r\n                        rpt_name: \"sample\",\r\n                        output_type: \"pdf\",\r\n                        dataYear: userData.dataYear,\r\n                        par_UNITKEY: 139,\r\n                        par_SAMPLE: \"ahh...ini adalah sample parameter\"\r\n                      })\r\n                    )\r\n                  }\r\n                >\r\n                  <File className=\"font-small-4 me-50\" />\r\n                  <span className=\"align-middle\">PDF</span>\r\n                </DropdownItem>\r\n\r\n                <DropdownItem\r\n                  className=\"w-100\"\r\n                  onClick={() =>\r\n                    dispatch(\r\n                      getInvoice({\r\n                        rpt_name: \"sample\",\r\n                        output_type: \"xls\",\r\n                        dataYear: userData.dataYear,\r\n                        as_attachment: true,\r\n                        par_UNITKEY: 139,\r\n                        par_SAMPLE: \"ahh...ini adalah sample parameter\"\r\n                      })\r\n                    )\r\n                  }\r\n                >\r\n                  <Grid className=\"font-small-4 me-50\" />\r\n                  <span className=\"align-middle\">Excel</span>\r\n                </DropdownItem>\r\n\r\n                <DropdownItem\r\n                  className=\"w-100\"\r\n                  // onClick={() => downloadCSV(store.data)}\r\n                  onClick={() =>\r\n                    dispatch(\r\n                      getInvoice({\r\n                        rpt_name: \"sample\",\r\n                        output_type: \"csv\",\r\n                        dataYear: userData.dataYear,\r\n                        as_attachment: true,\r\n                        par_UNITKEY: 139,\r\n                        par_SAMPLE: \"ahh...ini adalah sample parameter\"\r\n                      })\r\n                    )\r\n                  }\r\n                >\r\n                  <FileText className=\"font-small-4 me-50\" />\r\n                  <span className=\"align-middle\">CSV</span>\r\n                </DropdownItem>\r\n\r\n                {/* <DropdownItem className=\"w-100\">\r\n                  <Copy className=\"font-small-4 me-50\" />\r\n                  <span className=\"align-middle\">Copy</span>\r\n                </DropdownItem> */}\r\n              </DropdownMenu>\r\n            </UncontrolledDropdown>\r\n\r\n            {ability.can(\r\n              \"post\",\r\n              sessionStorage.getItem(\"current_page_perm\")\r\n            ) ? (\r\n              <Button\r\n                className=\"add-new-user\"\r\n                color=\"primary\"\r\n                onClick={toggleSidebar}\r\n                // onClick={handleAdd}\r\n              >\r\n                {t(\"Add New\")} {t(pageTitle)}\r\n              </Button>\r\n            ) : null}\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst List = () => {\r\n  const dispatch = useDispatch()\r\n  const store = useSelector((state) => state[storeName])\r\n\r\n  const { t } = useTranslation()\r\n  const ability = useContext(AbilityContext)\r\n\r\n  const { colors } = useContext(ThemeColors)\r\n  const [sort_dir, setSortDir] = useState(\"desc\")\r\n  const [searchTerm, setSearchTerm] = useState(\"\")\r\n  const [currentPage, setCurrentPage] = useState(1)\r\n  const [sort, setSort] = useState(\"id\")\r\n  const [rowsPerPage, setRowsPerPage] = useState(10)\r\n  const [selectedRows, setSelectedRows] = useState([])\r\n  const [toggleCleared, setToggleCleared] = useState(false)\r\n\r\n  const [sidebarOpen, setSidebarOpen] = useState(false)\r\n  const [loading, setLoading] = useState(false)\r\n  const [loadingText, setLoadingText] = useState(\"Please Wait\")\r\n  const [showModal, setShowModal] = useState(false)\r\n  const [formState, setFormState] = useState(null)\r\n\r\n  const handleEdit = (rowData) => {\r\n    setFormState(\"edit\")\r\n    if (!detailFromGrid) {\r\n      setLoadingText(\r\n        `${t(\"Loading\")} ${t(\"Detail\")} ${t(\"Data\")} ${t(pageTitle)}`\r\n      )\r\n      setLoading(true)\r\n      dispatch(getDataById(rowData.id)).then((res) => {\r\n        if (res.meta.requestStatus === \"rejected\") {\r\n          setLoading(false)\r\n          toast.error(res.payload.message, {\r\n            style: {\r\n              padding: \"16px\",\r\n              color: colors.danger.main,\r\n              border: `1px solid ${colors.danger.main}`\r\n            },\r\n            iconTheme: {\r\n              primary: colors.danger.main\r\n            }\r\n          })\r\n        } else {\r\n          setLoading(false)\r\n          setShowModal(true)\r\n        }\r\n      })\r\n    } else {\r\n      setLoadingText(\r\n        `${t(\"Loading\")} ${t(\"Detail\")} ${t(\"Data\")} ${t(pageTitle)}`\r\n      )\r\n      setLoading(true)\r\n      dispatch(setDataById(rowData)).then(() => {\r\n        setLoading(false)\r\n        setShowModal(true)\r\n      })\r\n    }\r\n  }\r\n\r\n  const handleCloseModal = () => {\r\n    setSidebarOpen(!sidebarOpen)\r\n    setShowModal(!showModal)\r\n    revivalBack()\r\n  }\r\n\r\n  const toggleSidebar = () => {\r\n    // console.log(\"here\")\r\n    setFormState(\"add\")\r\n    setSidebarOpen(!sidebarOpen)\r\n    setShowModal(!showModal)\r\n    neutralizeBack(handleCloseModal)\r\n  }\r\n\r\n  const handleDelete = async (id) => {\r\n    const result = await MySwal.fire({\r\n      title: `${t(\"Are you sure?\")}`,\r\n      text: `${t(\"You won't be able to revert\")} ${t(pageTitle)}!`,\r\n      icon: \"warning\",\r\n      showCancelButton: true,\r\n      confirmButtonText: `${t(\"Yes, Delete\")} ${t(pageTitle)}!`,\r\n      cancelButtonText: `${t(\"Cancel\")}`,\r\n      customClass: {\r\n        confirmButton: \"btn btn-primary\",\r\n        cancelButton: \"btn btn-outline-danger ms-1\"\r\n      },\r\n      buttonsStyling: false\r\n    })\r\n    if (result.value) {\r\n      setLoadingText(`${t(\"Deleting\")} Data ${t(pageTitle)}`)\r\n      setLoading(true)\r\n      dispatch(deleteData(id)).then((res) => {\r\n        // console.log(res)\r\n        if (res.meta.requestStatus === \"fulfilled\") {\r\n          setLoading(false)\r\n          toast.success(`${t(\"Successfully deleted\")} ${t(pageTitle)}`, {\r\n            style: {\r\n              padding: \"16px\",\r\n              color: colors.success.main,\r\n              border: `1px solid ${colors.success.main}`\r\n            },\r\n            iconTheme: {\r\n              primary: colors.success.main\r\n            }\r\n          })\r\n        } else if (res.meta.requestStatus === \"rejected\") {\r\n          setLoading(false)\r\n          toast.error(res.payload.message, {\r\n            style: {\r\n              padding: \"16px\",\r\n              color: colors.danger.main,\r\n              border: `1px solid ${colors.danger.main}`\r\n            },\r\n            iconTheme: {\r\n              primary: colors.danger.main\r\n            }\r\n          })\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  const handleDeleteSelected = async () => {\r\n    const countSelectedCopy = selectedRows.length\r\n    const result = await MySwal.fire({\r\n      title: `${t(\"Are you sure?\")}`,\r\n      text: `${t(\"You will delete\")} ${countSelectedCopy} ${t(\r\n        \"selected data. Deleted data cannot be recovered\"\r\n      )}!`,\r\n      icon: \"warning\",\r\n      showCancelButton: true,\r\n      confirmButtonText: `${t(\"Yes, Delete\")} ${countSelectedCopy} ${t(\r\n        pageTitle\r\n      )}!`,\r\n      cancelButtonText: `${t(\"Cancel\")}`,\r\n      customClass: {\r\n        confirmButton: \"btn btn-primary\",\r\n        cancelButton: \"btn btn-outline-danger ms-1\"\r\n      },\r\n      buttonsStyling: false\r\n    })\r\n    if (result.value) {\r\n      setLoadingText(\r\n        `${t(\"Deleting\")} ${countSelectedCopy} Data ${t(pageTitle)}`\r\n      )\r\n      setLoading(true)\r\n      const values = selectedRows.map((a) => a.id)\r\n      // console.log(values)\r\n      dispatch(deleteSelectedRowData({ id: values })).then((res) => {\r\n        // console.log(res)\r\n        if (res.meta.requestStatus === \"fulfilled\") {\r\n          setSelectedRows([])\r\n          setToggleCleared(!toggleCleared)\r\n          setLoading(false)\r\n          toast.success(\r\n            `${t(\"Successfully deleted\")} ${countSelectedCopy} ${t(pageTitle)}`,\r\n            {\r\n              style: {\r\n                padding: \"16px\",\r\n                color: colors.success.main,\r\n                border: `1px solid ${colors.success.main}`\r\n              },\r\n              iconTheme: {\r\n                primary: colors.success.main\r\n              }\r\n            }\r\n          )\r\n        } else if (res.meta.requestStatus === \"rejected\") {\r\n          setLoading(false)\r\n          toast.error(res.payload.message, {\r\n            style: {\r\n              padding: \"16px\",\r\n              color: colors.danger.main,\r\n              border: `1px solid ${colors.danger.main}`\r\n            },\r\n            iconTheme: {\r\n              primary: colors.danger.main\r\n            }\r\n          })\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  /////PAGINATION SERVERSIDE\r\n  const handlePagination = (page) => {\r\n    dispatch(\r\n      getDataList({\r\n        sort_dir,\r\n        sort,\r\n        search: searchTerm,\r\n        length: rowsPerPage,\r\n        page: page.selected + 1\r\n      })\r\n    )\r\n    setCurrentPage(page.selected + 1)\r\n  }\r\n\r\n  const handlePerPage = (e) => {\r\n    const value = parseInt(e.currentTarget.value)\r\n    dispatch(\r\n      getDataList({\r\n        sort_dir,\r\n        sort,\r\n        search: searchTerm,\r\n        length: value,\r\n        page: currentPage\r\n      })\r\n    )\r\n    setRowsPerPage(value)\r\n  }\r\n\r\n  const handleDebounceFn = (inputValue) => {\r\n    dispatch(\r\n      getDataList({\r\n        sort_dir,\r\n        search: inputValue,\r\n        sort,\r\n        page: currentPage,\r\n        length: rowsPerPage\r\n      })\r\n    )\r\n  }\r\n\r\n  const debounceFn = useCallback(debounce(handleDebounceFn, 500), [])\r\n\r\n  const handleFilter = (event) => {\r\n    setSearchTerm(event)\r\n    debounceFn(event)\r\n  }\r\n\r\n  const handleSort = (column, sortDirection) => {\r\n    setSortDir(sortDirection)\r\n    setSort(column.sortField)\r\n    dispatch(\r\n      getDataList({\r\n        sort_dir,\r\n        sort,\r\n        search: searchTerm,\r\n        page: currentPage,\r\n        length: rowsPerPage\r\n      })\r\n    )\r\n  }\r\n\r\n  const handleRowSelected = useCallback((state) => {\r\n    setSelectedRows(state.selectedRows)\r\n  }, [])\r\n\r\n  const CustomPagination = () => {\r\n    const count = Number(Math.ceil(store.total / rowsPerPage))\r\n\r\n    return (\r\n      <ReactPaginate\r\n        previousLabel={\"\"}\r\n        nextLabel={\"\"}\r\n        pageCount={count || 1}\r\n        activeClassName=\"active\"\r\n        forcePage={currentPage !== 0 ? currentPage - 1 : 0}\r\n        onPageChange={(page) => handlePagination(page)}\r\n        pageClassName={\"page-item\"}\r\n        nextLinkClassName={\"page-link\"}\r\n        nextClassName={\"page-item next\"}\r\n        previousClassName={\"page-item prev\"}\r\n        previousLinkClassName={\"page-link\"}\r\n        pageLinkClassName={\"page-link\"}\r\n        containerClassName={\r\n          \"pagination react-paginate justify-content-end my-2 pe-1\"\r\n        }\r\n      />\r\n    )\r\n  }\r\n\r\n  const renderCell = (row, column) => {\r\n    const field = row[column.fieldName]\r\n    const dataFormat = column.dataFormat\r\n    if (dataFormat) {\r\n      if (dataFormat.includes(\":\")) {\r\n        const columnTypeFormat = dataFormat.split(\":\")\r\n        const columnType = columnTypeFormat[0]\r\n        const columnFormat = columnTypeFormat[1]\r\n        let columnFormated = row[column.fieldName]\r\n        if (columnType === \"date\") {\r\n          columnFormated = Moment(field).format(\"DD MMM YYYY\")\r\n          if (columnFormat) {\r\n            columnFormated = Moment(field).format(columnFormat)\r\n          }\r\n        }\r\n        if (columnType === \"datetime\") {\r\n          columnFormated = Moment(field).format(\"DD MMM YYYY HH:mm\")\r\n          if (columnFormat) {\r\n            columnFormated = Moment(field).format(columnFormat)\r\n          }\r\n        }\r\n        return columnFormated\r\n      }\r\n    }\r\n    return row[column.fieldName]\r\n  }\r\n\r\n  const columns = [\r\n    ...dynamicColumns.map((column) => ({\r\n      name: column.columnName,\r\n      sortField: column.fieldName,\r\n      center: false,\r\n      sortable: true,\r\n      selector: (row) => row[column.fieldName],\r\n      cell: (row) => renderCell(row, column)\r\n    })),\r\n    {\r\n      name: t(\"Actions\"),\r\n      center: true,\r\n      width: \"140px\",\r\n      cell: (row) => (\r\n        <GlobalActionsTable\r\n          row={row}\r\n          handleDelete={handleDelete}\r\n          handleEdit={handleEdit}\r\n        />\r\n      )\r\n    }\r\n  ]\r\n\r\n  const tableColumns = useMemo(\r\n    () =>\r\n      store.isLoading\r\n        ? columns.map((column) => ({\r\n            name: t(column.name),\r\n            ...column,\r\n            sortable: false,\r\n            cell: (row) => (\r\n              <Skeleton\r\n                sx={{ bgcolor: colors.dark.light }}\r\n                animation=\"wave\"\r\n                className={column.name === \"Actions\" ? \"ms-2\" : \"\"}\r\n                width={column.name === \"Actions\" ? 10 : \"100%\"}\r\n                height={40}\r\n              />\r\n            )\r\n          }))\r\n        : columns.map((column) => ({\r\n            name: t(column.name),\r\n            ...column\r\n          })),\r\n    [store.isLoading, columns]\r\n  )\r\n\r\n  const dataToRender = () => {\r\n    const filters = {\r\n      search: searchTerm\r\n    }\r\n    const isFiltered = Object.keys(filters).some(function (k) {\r\n      return filters[k].length > 0\r\n    })\r\n    if (!store.isLoading) {\r\n      if (store.data.length > 0) {\r\n        return store.data\r\n      } else if (store.data.length === 0 && isFiltered) {\r\n        return []\r\n      } else {\r\n        // console.log(store.allData)\r\n        // return store.allData.slice(0, rowsPerPage)\r\n      }\r\n    } else {\r\n      return Array(10).fill({})\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (store.data.length === 0 || (!store.isLoading && getAlwaysGrid)) {\r\n      setLoadingText(`${t(\"Loading Data\")} ${t(pageTitle)}`)\r\n      dispatch(\r\n        getDataList({\r\n          sort_dir,\r\n          sort,\r\n          search: searchTerm,\r\n          page: currentPage,\r\n          length: rowsPerPage\r\n        })\r\n      )\r\n    }\r\n  }, [dispatch, store.data.length, sort_dir, sort, currentPage])\r\n\r\n  return (\r\n    <Fragment>\r\n      <UILoader blocking={loading} loader={<Loader />}>\r\n        <Card className=\"overflow-hidden\">\r\n          <div className=\"react-dataTable react-dataTable-selectable-rows\">\r\n            <DataTable\r\n              noHeader\r\n              subHeader\r\n              sortServer\r\n              responsive\r\n              pagination\r\n              paginationServer\r\n              paginationTotalRows={store.total}\r\n              paginationComponent={CustomPagination}\r\n              selectableRows\r\n              onSelectedRowsChange={handleRowSelected}\r\n              selectableRowsHighlight\r\n              // onRowClicked={handleRowSelected}\r\n              clearSelectedRows={toggleCleared}\r\n              selectableRowsComponent={BootstrapCheckbox}\r\n              noDataComponent={<NoDataDisplay />}\r\n              // fixedHeader\r\n              // fixedHeaderScrollHeight=\"600px\"\r\n              style={{ \"min-height\": \"400px\" }}\r\n              highlightOnHover\r\n              pointerOnHover\r\n              columns={tableColumns}\r\n              onSort={handleSort}\r\n              sortIcon={<ChevronDown />}\r\n              className=\"react-dataTable\"\r\n              data={dataToRender()}\r\n              subHeaderComponent={\r\n                <CustomHeader\r\n                  store={store}\r\n                  searchTerm={searchTerm}\r\n                  rowsPerPage={rowsPerPage}\r\n                  handleFilter={handleFilter}\r\n                  handlePerPage={handlePerPage}\r\n                  toggleSidebar={toggleSidebar}\r\n                  selectedRow={selectedRows}\r\n                  handleDeleteSelected={handleDeleteSelected}\r\n                />\r\n              }\r\n            />\r\n          </div>\r\n        </Card>\r\n\r\n        {/* <Sidebar open={sidebarOpen} toggleSidebar={toggleSidebar} /> */}\r\n      </UILoader>\r\n\r\n      {showModal && (\r\n        <ModalAddEdit\r\n          formState={formState}\r\n          show={showModal}\r\n          setShow={toggleSidebar}\r\n          detailPage={false}\r\n          setFormState={setFormState}\r\n        />\r\n      )}\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default List\r\n","/* eslint-disable implicit-arrow-linebreak */\r\n/* eslint-disable no-confusing-arrow */\r\n/* eslint-disable multiline-ternary */\r\nimport { Fragment, useState, useEffect, useContext } from \"react\"\r\nimport { useTranslation } from \"react-i18next\"\r\nimport { AbilityContext } from \"@src/utility/context/Can\"\r\nimport ModalAddEdit from \"./modal\"\r\nimport { neutralizeBack, revivalBack } from \"@src/utility/Utils\"\r\nimport {\r\n  storeName,\r\n  pageTitle,\r\n  serverSideGrid,\r\n  detailFromGrid,\r\n  getApiAfterPut,\r\n  getApiAfterPost,\r\n  getApiAfterDelete,\r\n  getSummarysData,\r\n  getAlwaysGrid,\r\n  getDataList,\r\n  getDataById,\r\n  setDataById,\r\n  deleteData,\r\n  deleteSelectedRowData,\r\n  setDataList,\r\n  setDataListNested,\r\n  putData\r\n} from \"./store\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { Edit2, Trash2, Plus } from \"react-feather\"\r\n\r\nimport { getUserData } from \"@utils\"\r\n\r\nimport UILoader from \"@components/ui-loader\"\r\nimport Spinner from \"@components/spinner/Loading-spinner\"\r\nimport { ThemeColors } from \"@src/utility/context/ThemeColors\"\r\nimport toast from \"react-hot-toast\"\r\nimport { Card, Button, UncontrolledTooltip, CardText } from \"reactstrap\"\r\nimport Swal from \"sweetalert2\"\r\nimport withReactContent from \"sweetalert2-react-content\"\r\nconst MySwal = withReactContent(Swal)\r\nimport \"@styles/react/libs/react-select/_react-select.scss\"\r\nimport \"@styles/react/libs/tables/react-dataTable-component.scss\"\r\nimport SortableTree from \"@nosferatu500/react-sortable-tree\"\r\nimport { NoDataDisplay, Loader } from \"@src/shared/CommonComponents\"\r\nimport Avatar from \"@components/avatar\"\r\n\r\nconst List = (searchString) => {\r\n  const dispatch = useDispatch()\r\n  const store = useSelector((state) => state[storeName])\r\n  const { t } = useTranslation()\r\n  const [sidebarOpen, setSidebarOpen] = useState(false)\r\n  const ability = useContext(AbilityContext)\r\n  const [loading, setLoading] = useState(false)\r\n  const [loadingText, setLoadingText] = useState(\"Please Wait\")\r\n  const [showModal, setShowModal] = useState(false)\r\n  const [formState, setFormState] = useState(null)\r\n  const [currentDataAdd, setCurrentDataAdd] = useState(null)\r\n\r\n  const [searchFocusIndex, setSearchFocusIndex] = useState(0)\r\n  const [searchFoundCount, setSearchFoundCount] = useState(null)\r\n\r\n  const { colors } = useContext(ThemeColors)\r\n\r\n  const handleEdit = (rowData) => {\r\n    setFormState(\"edit\")\r\n    if (!detailFromGrid) {\r\n      setLoadingText(\r\n        `${t(\"Loading\")} ${t(\"Detail\")} ${t(\"Data\")} ${t(pageTitle)}`\r\n      )\r\n      setLoading(true)\r\n      dispatch(getDataById(rowData.id)).then((res) => {\r\n        if (res.meta.requestStatus === \"rejected\") {\r\n          setLoading(false)\r\n          toast.error(res.payload.message, {\r\n            style: {\r\n              padding: \"16px\",\r\n              color: colors.danger.main,\r\n              border: `1px solid ${colors.danger.main}`\r\n            },\r\n            iconTheme: {\r\n              primary: colors.danger.main\r\n            }\r\n          })\r\n        } else {\r\n          setLoading(false)\r\n          setShowModal(true)\r\n        }\r\n      })\r\n    } else {\r\n      setLoadingText(\r\n        `${t(\"Loading\")} ${t(\"Detail\")} ${t(\"Data\")} ${t(pageTitle)}`\r\n      )\r\n      setLoading(true)\r\n      dispatch(setDataById(rowData)).then(() => {\r\n        setLoading(false)\r\n        setShowModal(true)\r\n      })\r\n    }\r\n  }\r\n\r\n  const handleDelete = async (id) => {\r\n    const result = await MySwal.fire({\r\n      title: `${t(\"Are you sure?\")}`,\r\n      text: `${t(\"You won't be able to revert\")} ${t(pageTitle)}!`,\r\n      icon: \"warning\",\r\n      showCancelButton: true,\r\n      confirmButtonText: `${t(\"Yes, Delete\")} ${t(pageTitle)}!`,\r\n      cancelButtonText: `${t(\"Cancel\")}`,\r\n      customClass: {\r\n        confirmButton: \"btn btn-primary\",\r\n        cancelButton: \"btn btn-outline-danger ms-1\"\r\n      },\r\n      buttonsStyling: false\r\n    })\r\n    if (result.value) {\r\n      setLoadingText(`${t(\"Deleting\")} Data ${t(pageTitle)}`)\r\n      setLoading(true)\r\n      dispatch(deleteData(id)).then((res) => {\r\n        // console.log(res)\r\n        if (res.meta.requestStatus === \"fulfilled\") {\r\n          setLoading(false)\r\n          toast.success(`${t(\"Successfully deleted\")} ${t(pageTitle)}`, {\r\n            style: {\r\n              padding: \"16px\",\r\n              color: colors.success.main,\r\n              border: `1px solid ${colors.success.main}`\r\n            },\r\n            iconTheme: {\r\n              primary: colors.success.main\r\n            }\r\n          })\r\n        } else if (res.meta.requestStatus === \"rejected\") {\r\n          setLoading(false)\r\n          toast.error(res.payload.message, {\r\n            style: {\r\n              padding: \"16px\",\r\n              color: colors.danger.main,\r\n              border: `1px solid ${colors.danger.main}`\r\n            },\r\n            iconTheme: {\r\n              primary: colors.danger.main\r\n            }\r\n          })\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  const toggleSidebar = (row = null) => {\r\n    // console.log(row.id)\r\n    setCurrentDataAdd(row)\r\n    setFormState(\"add\")\r\n    setSidebarOpen(!sidebarOpen)\r\n    setShowModal(!showModal)\r\n    neutralizeBack(handleCloseModal)\r\n  }\r\n\r\n  const handleCloseModal = () => {\r\n    setSidebarOpen(!sidebarOpen)\r\n    setShowModal(!showModal)\r\n    revivalBack()\r\n  }\r\n\r\n  const handleChange = (tree) => {\r\n    // console.log(tree)\r\n    dispatch(setDataListNested(tree))\r\n  }\r\n\r\n  const eventCanDragNode = (args) => {\r\n    // console.log(args)\r\n    if (args.node.is_app_header) {\r\n      return false\r\n    }\r\n    return true\r\n  }\r\n\r\n  const onMoveNode = ({\r\n    treeData,\r\n    node,\r\n    nextParentNode,\r\n    prevPath,\r\n    prevTreeIndex,\r\n    nextPath,\r\n    nextTreeIndex\r\n  }) => {\r\n    // console.log(nextParentNode)\r\n    const data = {\r\n      name: node.name,\r\n      id: node.id,\r\n      parent_id: nextParentNode.id\r\n    }\r\n    updateDataToApi(data, true)\r\n  }\r\n\r\n  const updateDataToApi = (data, notReload = false) => {\r\n    // console.log(data)\r\n    setLoadingText(`${t(\"Updating\")} ${t(pageTitle)} Data`)\r\n    if (notReload) data[\"notReload\"] = true\r\n    const nameMsg = data.name\r\n    delete data[\"name\"]\r\n    dispatch(putData(data, notReload)).then((res) => {\r\n      // console.log(res)\r\n      if (res.meta.requestStatus === \"fulfilled\") {\r\n        toast.success(\r\n          `${t(\"Successfully Updated\")} ${t(pageTitle)} ${nameMsg}`,\r\n          {\r\n            style: {\r\n              padding: \"16px\",\r\n              color: colors.success.main,\r\n              border: `1px solid ${colors.success.main}`\r\n            },\r\n            iconTheme: {\r\n              primary: colors.success.main\r\n            }\r\n          }\r\n        )\r\n      } else if (res.meta.requestStatus === \"rejected\") {\r\n        toast.error(res.payload.message, {\r\n          style: {\r\n            padding: \"16px\",\r\n            color: colors.danger.main,\r\n            border: `1px solid ${colors.danger.main}`\r\n          },\r\n          iconTheme: {\r\n            primary: colors.danger.main\r\n          }\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n  const customSearchMethod = ({ node, searchQuery }) => {\r\n    return (\r\n      searchQuery &&\r\n      node.name.toLowerCase().indexOf(searchQuery.toLowerCase()) > -1\r\n    )\r\n  }\r\n\r\n  const selectPrevMatch = () =>\r\n    setSearchFocusIndex(\r\n      searchFocusIndex !== null\r\n        ? (searchFoundCount + searchFocusIndex - 1) % searchFoundCount\r\n        : searchFoundCount - 1\r\n    )\r\n\r\n  const selectNextMatch = () =>\r\n    setSearchFocusIndex(\r\n      searchFocusIndex !== null ? (searchFocusIndex + 1) % searchFoundCount : 0\r\n    )\r\n\r\n  useEffect(() => {\r\n    // console.log(store)\r\n    if (\r\n      (store.dataNested.length === 0 && !store.isLoadingNested) ||\r\n      getAlwaysGrid\r\n    ) {\r\n      setLoadingText(`${t(\"Loading Data\")} ${t(pageTitle)}`)\r\n      dispatch(getDataList({}))\r\n    }\r\n  }, [dispatch, store.dataNested.length > 0])\r\n\r\n  return (\r\n    <Fragment>\r\n      <UILoader blocking={store.isLoadingNested} loader={<Loader />}>\r\n        <Card className=\"overflow-hidden\">\r\n          <div className=\"react-dataTable react-dataTable-selectable-rows\">\r\n            <div\r\n              style={{\r\n                height: 1000,\r\n                marginLeft: 20,\r\n                marginRight: 20,\r\n                marginTop: 40\r\n              }}\r\n            >\r\n              <SortableTree\r\n                treeData={store.dataNested}\r\n                onChange={handleChange}\r\n                // onMoveNode={onMoveNode}\r\n                // canDrag={eventCanDragNode}\r\n                canDrag={false}\r\n                searchMethod={customSearchMethod}\r\n                searchQuery={searchString.searchString}\r\n                searchFocusOffset={searchFocusIndex}\r\n                searchFinishCallback={(matches) => {\r\n                  setSearchFoundCount(matches.length)\r\n                  setSearchFocusIndex(\r\n                    matches.length > 0 ? searchFocusIndex % matches.length : 0\r\n                  )\r\n                }}\r\n                // onlyExpandSearchedNodes\r\n                maxDepth={10}\r\n                generateNodeProps={({ node, path }) => ({\r\n                  style: {\r\n                    fontSize: node.is_app_header ? `16px` : \"14px\",\r\n                    fontWeight: node.is_app_header ? `bold` : \"normal\"\r\n                  },\r\n                  title: (\r\n                    <div className=\"d-flex justify-content-left align-items-center\">\r\n                      {\r\n                        node?.attributes?.logo && (\r\n                          <img\r\n                            className=\"me-1\"\r\n                            src={node.attributes.logo}\r\n                            // width=\"60\"\r\n                            height=\"25\"\r\n                          />\r\n                        )\r\n                        // : (\r\n                        //   <Avatar\r\n                        //     initials\r\n                        //     className=\"me-1\"\r\n                        //     color={\"light-primary\"}\r\n                        //     content={node.name || \"\"}\r\n                        //   />\r\n                        // )\r\n                      }\r\n                      <div className=\"d-flex flex-column\">\r\n                        <span className=\"fw-bolder\">\r\n                          {/* {node.code}  */}\r\n                          {node.name}\r\n                        </span>\r\n                      </div>\r\n                    </div>\r\n                  ),\r\n                  buttons: [\r\n                    ability.can(\r\n                      \"post\",\r\n                      sessionStorage.getItem(\"current_page_perm\")\r\n                    ) ? (\r\n                      <>\r\n                        <Button.Ripple\r\n                          className=\"btn-icon rounded-circle\"\r\n                          color=\"flat-primary\"\r\n                          id=\"btn-add-child\"\r\n                          onClick={(e) => {\r\n                            toggleSidebar(node)\r\n                          }}\r\n                        >\r\n                          <Plus size={16} />\r\n                        </Button.Ripple>\r\n                        <UncontrolledTooltip\r\n                          placement=\"left\"\r\n                          target=\"btn-add-child\"\r\n                        >\r\n                          {t(\"Add Child\")}\r\n                        </UncontrolledTooltip>\r\n                      </>\r\n                    ) : null,\r\n                    ability.can(\r\n                      \"update\",\r\n                      sessionStorage.getItem(\"current_page_perm\")\r\n                    ) &&\r\n                    !node.is_app_header &&\r\n                    !node.disableEdit ? (\r\n                      <>\r\n                        <Button.Ripple\r\n                          className=\"btn-icon rounded-circle\"\r\n                          color=\"flat-info\"\r\n                          id=\"btn-edit\"\r\n                          onClick={(e) => {\r\n                            e.preventDefault()\r\n                            handleEdit(node)\r\n                          }}\r\n                        >\r\n                          <Edit2 size={16} />\r\n                        </Button.Ripple>\r\n                        <UncontrolledTooltip placement=\"left\" target=\"btn-edit\">\r\n                          {t(\"Edit\")}\r\n                        </UncontrolledTooltip>\r\n                      </>\r\n                    ) : null,\r\n                    ability.can(\r\n                      \"delete\",\r\n                      sessionStorage.getItem(\"current_page_perm\")\r\n                    ) &&\r\n                    !node.disableDelete &&\r\n                    node?.children?.length === 0 ? (\r\n                      <>\r\n                        <Button.Ripple\r\n                          id=\"btn-delete\"\r\n                          className=\"btn-icon rounded-circle\"\r\n                          color=\"flat-danger\"\r\n                          onClick={(e) => {\r\n                            e.preventDefault()\r\n                            handleDelete(node.id)\r\n                          }}\r\n                        >\r\n                          <Trash2 size={16} />\r\n                        </Button.Ripple>\r\n                        <UncontrolledTooltip\r\n                          placement=\"left\"\r\n                          target=\"btn-delete\"\r\n                        >\r\n                          {t(\"Delete\")}\r\n                        </UncontrolledTooltip>\r\n                      </>\r\n                    ) : null\r\n                  ]\r\n                })}\r\n              />\r\n            </div>\r\n          </div>\r\n        </Card>\r\n      </UILoader>\r\n\r\n      {showModal && (\r\n        <ModalAddEdit\r\n          formState={formState}\r\n          show={showModal}\r\n          setShow={toggleSidebar}\r\n          detailPage={false}\r\n          setFormState={setFormState}\r\n          currentData={currentDataAdd}\r\n        />\r\n      )}\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default List\r\n"],"sourceRoot":""}