{"version":3,"sources":["views/apps/app/index.js","views/apps/app/Table.js","views/apps/app/DropDown.js"],"names":["List","lookupMode","lookupMode_fieldName","lookupMode_dropdown","lookupMode_isMulti","lookupMode_onChange","lookupMode_defaultValue","t","lookupMode_isM2MDefValFromGrid","useTranslation","dispatch","useDispatch","store","useSelector","state","storeName","useState","searchTerm","useEffect","getApiSummaryData","dataSummary","length","isLoadingSummary","getAlwaysGrid","getSummaryData","colors","className","title","pageTitle","data","map","item","index","color","statTitle","icon","baseClassName","fontSize","renderStats","sx","bgcolor","animation","height","width","count_format","count","searchString","MySwal","withReactContent","Swal","BootstrapCheckbox","forwardRef","props","ref","type","CustomHeader","toggleSidebar","handlePerPage","rowsPerPage","handleFilter","selectedRow","handleDeleteSelected","ability","useContext","AbilityContext","invoices","getUserData","xl","htmlFor","id","value","onChange","style","can","sessionStorage","getItem","onClick","e","target","ThemeColors","sort_dir","setSortDir","setSearchTerm","currentPage","setCurrentPage","sort","setSort","setRowsPerPage","selectedRows","setSelectedRows","toggleCleared","setToggleCleared","sidebarOpen","setSidebarOpen","loading","setLoading","setLoadingText","showModal","setShowModal","formState","setFormState","handleEdit","rowData","detailFromGrid","setDataById","then","getDataById","res","meta","requestStatus","toast","error","payload","message","padding","danger","main","border","iconTheme","primary","handleCloseModal","revivalBack","neutralizeBack","handleDelete","a","fire","text","showCancelButton","confirmButtonText","cancelButtonText","customClass","confirmButton","cancelButton","buttonsStyling","deleteData","success","countSelectedCopy","values","deleteSelectedRowData","debounceFn","useCallback","debounce","inputValue","getDataList","search","page","handleRowSelected","progLangImg","python","javascript","react","angular","flask","columns","name","sortField","center","sortable","selector","row","cell","logo","appLogo","img","imgHeight","imgWidth","is_uploading","size","initials","content","code","info","appType","sixe","programming_language","main_language","src","framework","dynamicColumns","column","columnName","fieldName","field","dataFormat","includes","columnTypeFormat","split","columnType","columnFormat","columnFormated","Moment","format","renderCell","tableColumns","useMemo","isLoading","dark","light","blocking","loader","noHeader","subHeader","sortServer","responsive","pagination","paginationServer","paginationTotalRows","total","paginationComponent","Number","Math","ceil","previousLabel","nextLabel","pageCount","activeClassName","forcePage","onPageChange","selected","handlePagination","pageClassName","nextLinkClassName","nextClassName","previousClassName","previousLinkClassName","pageLinkClassName","containerClassName","selectableRows","onSelectedRowsChange","selectableRowsHighlight","clearSelectedRows","selectableRowsComponent","noDataComponent","highlightOnHover","pointerOnHover","onSort","sortDirection","sortIcon","filters","isFiltered","Object","keys","some","k","Array","fill","dataToRender","subHeaderComponent","event","parseInt","currentTarget","show","setShow","detailPage","theme","selectThemeColors","defaultValue","dataDropdown","filter","el","placeholder","isMulti","options","classnames","selectedData","classNamePrefix"],"mappings":"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","file":"static/js/44.316f699c.chunk.js","sourcesContent":["import { Fragment, useEffect, useState } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { useTranslation } from \"react-i18next\"\r\nimport Table from \"./Table\"\r\nimport DropDown from \"./DropDown\"\r\nimport { Row, Col, Input } from \"reactstrap\"\r\nimport StatsHorizontal from \"@components/widgets/stats/StatsHorizontal\"\r\nimport { User, UserPlus, UserCheck, UserX } from \"react-feather\"\r\nimport Icon from \"@mui/material/Icon\"\r\nimport AddCardOutlinedIcon from \"@mui/icons-material/AddCardOutlined\"\r\nimport \"./style.scss\"\r\nimport Breadcrumbs from \"@components/breadcrumbs\"\r\n\r\nimport {\r\n  storeName,\r\n  getAlwaysGrid,\r\n  getApiSummaryData,\r\n  getSummaryData,\r\n  pageTitle\r\n} from \"./store\"\r\nimport { Skeleton } from \"@mui/material\"\r\n\r\nconst List = ({\r\n  lookupMode = false,\r\n  lookupMode_fieldName = \"\",\r\n  lookupMode_dropdown = false,\r\n  lookupMode_isMulti = false,\r\n  lookupMode_onChange,\r\n  lookupMode_defaultValue,\r\n  lookupMode_isM2MDefValFromGrid\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const dispatch = useDispatch()\r\n  const store = useSelector((state) => state[storeName])\r\n  const [searchTerm, setSearchTerm] = useState(\"\")\r\n\r\n  const handleFilter = (event) => {\r\n    // console.log(\"handleFilter\")\r\n    setSearchTerm(event)\r\n    // debounceFn(event)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (\r\n      getApiSummaryData &&\r\n      (store.dataSummary?.length === 0 ||\r\n        (!store.isLoadingSummary && getAlwaysGrid))\r\n    ) {\r\n      dispatch(getSummaryData({}))\r\n    }\r\n  }, [dispatch, store.dataSummary?.length])\r\n\r\n  const colors = [\r\n    \"primary\",\r\n    \"success\",\r\n    \"warning\",\r\n    \"danger\",\r\n    \"info\",\r\n    \"secondary\"\r\n  ]\r\n\r\n  return !lookupMode_dropdown ? (\r\n    <Fragment>\r\n      <div className=\"content-header row\">\r\n        {!lookupMode && (\r\n          <Breadcrumbs\r\n            title={t(pageTitle)}\r\n            data={[{ title: t(\"App Setting\") }, { title: t(pageTitle) }]}\r\n          />\r\n        )}\r\n        {/* <div className=\"content-header-right text-md-end col-md col-12 mb-2 \">\r\n          <div className=\"d-flex align-items-center mb-sm-0 mb-1 me-1\">\r\n            <label className=\"mb-0\" htmlFor=\"search-invoice\">\r\n              {t(\"Search\")}:\r\n            </label>\r\n            <Input\r\n              id=\"search-invoice\"\r\n              className=\"ms-50 w-100\"\r\n              type=\"text\"\r\n              value={searchTerm}\r\n              onChange={(e) => handleFilter(e.target.value)}\r\n            />\r\n          </div>\r\n        </div> */}\r\n      </div>\r\n      <div className=\"app-user-list\">\r\n        {!lookupMode && getApiSummaryData && (\r\n          <Row>\r\n            {store.dataSummary?.map((item, index) => {\r\n              return (\r\n                <Col key={index}>\r\n                  <StatsHorizontal\r\n                    color={colors[index]}\r\n                    statTitle={`${t(item.title)}`}\r\n                    icon={\r\n                      item.icon ? (\r\n                        <Icon\r\n                          baseClassName=\"material-icons-outlined\"\r\n                          fontSize=\"20\"\r\n                        >\r\n                          {item.icon}\r\n                        </Icon>\r\n                      ) : (\r\n                        <Icon\r\n                          baseClassName=\"material-icons-outlined\"\r\n                          fontSize=\"20\"\r\n                        >\r\n                          lightbulb\r\n                        </Icon>\r\n                      )\r\n                    }\r\n                    renderStats={\r\n                      store.isLoadingSummary ? (\r\n                        <Skeleton\r\n                          sx={{ bgcolor: \"#eef2f8\" }}\r\n                          animation=\"wave\"\r\n                          height={25}\r\n                          width={40}\r\n                          className=\"fw-bolder mb-75\"\r\n                        />\r\n                      ) : (\r\n                        <h3 className=\"fw-bolder mb-75\">\r\n                          {item.count_format ?? item.count}\r\n                        </h3>\r\n                      )\r\n                    }\r\n                  />\r\n                </Col>\r\n              )\r\n            })}\r\n          </Row>\r\n        )}\r\n        <Table\r\n          searchString={searchTerm}\r\n          lookupMode={lookupMode}\r\n          lookupMode_fieldName={lookupMode_fieldName}\r\n          lookupMode_defaultValue={lookupMode_defaultValue}\r\n          lookupMode_onChange={lookupMode_onChange}\r\n          lookupMode_isMulti={lookupMode_isMulti}\r\n          lookupMode_isM2MDefValFromGrid\r\n        />\r\n        {/* <Table /> */}\r\n      </div>\r\n    </Fragment>\r\n  ) : (\r\n    <DropDown\r\n      lookupMode_fieldName={lookupMode_fieldName}\r\n      lookupMode_onChange={lookupMode_onChange}\r\n      lookupMode_defaultValue={lookupMode_defaultValue}\r\n      lookupMode_isMulti={lookupMode_isMulti}\r\n      lookupMode_isM2MDefValFromGrid\r\n    />\r\n  )\r\n}\r\n\r\nexport default List\r\n","/* eslint-disable implicit-arrow-linebreak */\r\n/* eslint-disable no-confusing-arrow */\r\n/* eslint-disable multiline-ternary */\r\nimport {\r\n  Fragment,\r\n  useState,\r\n  useEffect,\r\n  useContext,\r\n  useMemo,\r\n  useCallback,\r\n  forwardRef\r\n} from \"react\"\r\nimport { useTranslation } from \"react-i18next\"\r\nimport { AbilityContext } from \"@src/utility/context/Can\"\r\nimport ModalAddEdit from \"./modal\"\r\nimport { neutralizeBack, revivalBack } from \"@src/utility/Utils\"\r\nimport {\r\n  storeName,\r\n  pageTitle,\r\n  serverSideGrid,\r\n  detailFromGrid,\r\n  getApiAfterPut,\r\n  getApiAfterPost,\r\n  getApiAfterDelete,\r\n  getSummarysData,\r\n  getAlwaysGrid,\r\n  getDataList,\r\n  getDataById,\r\n  setDataById,\r\n  deleteData,\r\n  deleteSelectedRowData\r\n} from \"./store\"\r\nimport { getInvoice } from \"../../invoices/store\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport ReactPaginate from \"react-paginate\"\r\nimport DataTable from \"react-data-table-component\"\r\nimport debounce from \"lodash.debounce\"\r\nimport {\r\n  ChevronDown,\r\n  Share,\r\n  Printer,\r\n  FileText,\r\n  File,\r\n  Grid\r\n} from \"react-feather\"\r\n\r\nimport { getUserData } from \"@utils\"\r\n\r\nimport UILoader from \"@components/ui-loader\"\r\nimport Spinner from \"@components/spinner/Loading-spinner\"\r\nimport { ThemeColors } from \"@src/utility/context/ThemeColors\"\r\nimport toast from \"react-hot-toast\"\r\nimport {\r\n  Row,\r\n  Col,\r\n  Card,\r\n  Input,\r\n  Button,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  DropdownToggle,\r\n  UncontrolledDropdown,\r\n  CardText\r\n} from \"reactstrap\"\r\nimport Avatar from \"@components/avatar\"\r\nimport \"@styles/react/libs/react-select/_react-select.scss\"\r\nimport \"@styles/react/libs/tables/react-dataTable-component.scss\"\r\nimport Swal from \"sweetalert2\"\r\nimport withReactContent from \"sweetalert2-react-content\"\r\nimport { Skeleton } from \"@mui/material\"\r\nimport Moment from \"moment\"\r\nimport GlobalActionsTable from \"../../../shared/GlobaActionsTable\"\r\nimport { NoDataDisplay, Loader } from \"@src/shared/CommonComponents\"\r\nimport ApiIcon from \"@mui/icons-material/Api\"\r\nimport WebIcon from \"@mui/icons-material/Web\"\r\nimport InstallMobileIcon from \"@mui/icons-material/InstallMobile\"\r\nconst MySwal = withReactContent(Swal)\r\n\r\n// ** Bootstrap Checkbox Component\r\nconst BootstrapCheckbox = forwardRef((props, ref) => (\r\n  <div className=\"form-check\">\r\n    <Input type=\"checkbox\" ref={ref} {...props} />\r\n  </div>\r\n))\r\n\r\n// ** Table Header\r\nconst CustomHeader = ({\r\n  store,\r\n  toggleSidebar,\r\n  handlePerPage,\r\n  rowsPerPage,\r\n  handleFilter,\r\n  searchTerm,\r\n  selectedRow,\r\n  handleDeleteSelected\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const ability = useContext(AbilityContext)\r\n  const dispatch = useDispatch()\r\n  const storeInvoice = useSelector((state) => state.invoices)\r\n  const userData = getUserData()\r\n\r\n  return (\r\n    <div className=\"invoice-list-table-header w-100 me-1 ms-50 mt-2 mb-75\">\r\n      <Row>\r\n        <Col xl=\"4\" className=\"d-flex align-items-center p-0\">\r\n          <div className=\"d-flex align-items-center w-100\">\r\n            <label htmlFor=\"rows-per-page\">{t(\"Show\")}</label>\r\n            <Input\r\n              className=\"mx-50\"\r\n              type=\"select\"\r\n              id=\"rows-per-page\"\r\n              value={rowsPerPage}\r\n              onChange={handlePerPage}\r\n              style={{ width: \"5rem\" }}\r\n            >\r\n              <option value=\"10\">10</option>\r\n              <option value=\"25\">25</option>\r\n              <option value=\"50\">50</option>\r\n            </Input>\r\n            <label htmlFor=\"rows-per-page\">{t(\"Entries\")}</label>\r\n          </div>\r\n        </Col>\r\n        <Col\r\n          xl=\"8\"\r\n          className=\"d-flex align-items-sm-center justify-content-xl-end justify-content-start flex-xl-nowrap flex-wrap flex-sm-row flex-column pe-xl-1 p-0 mt-xl-0 mt-1\"\r\n        >\r\n          {selectedRow?.length > 0 &&\r\n          ability.can(\"delete\", sessionStorage.getItem(\"current_page_perm\")) ? (\r\n            <div className=\"d-flex align-items-center mb-sm-0 mb-1 me-1\">\r\n              <Button\r\n                className=\"delete-users\"\r\n                color=\"danger\"\r\n                onClick={handleDeleteSelected}\r\n              >\r\n                {t(\"Delete\")} {selectedRow.length} {t(`Selected ${pageTitle}`)}\r\n              </Button>\r\n            </div>\r\n          ) : null}\r\n          <div className=\"d-flex align-items-center mb-sm-0 mb-1 me-1\">\r\n            <label className=\"mb-0\" htmlFor=\"search-invoice\">\r\n              {t(\"Search\")}:\r\n            </label>\r\n            <Input\r\n              id=\"search-invoice\"\r\n              className=\"ms-50 w-100\"\r\n              type=\"text\"\r\n              value={searchTerm}\r\n              onChange={(e) => handleFilter(e.target.value)}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"d-flex align-items-center table-header-actions\">\r\n            {/* <UncontrolledDropdown className=\"me-1\">\r\n              <DropdownToggle color=\"secondary\" caret outline>\r\n                <Share className=\"font-small-4 me-50\" />\r\n                <span className=\"align-middle\">{t(\"Export\")}</span>\r\n              </DropdownToggle>\r\n              <DropdownMenu>\r\n                <DropdownItem\r\n                  className=\"w-100\"\r\n                  onClick={() =>\r\n                    dispatch(\r\n                      getInvoice({\r\n                        rpt_name: \"sample\",\r\n                        output_type: \"pdf\",\r\n                        dataYear: userData.dataYear,\r\n                        print: true,\r\n                        as_attachment: true,\r\n                        par_UNITKEY: 139,\r\n                        par_SAMPLE: \"ahh...ini adalah sample parameter\"\r\n                      })\r\n                    )\r\n                  }\r\n                >\r\n                  <Printer className=\"font-small-4 me-50\" />\r\n                  <span className=\"align-middle\">{t(\"Print\")}</span>\r\n                </DropdownItem>\r\n                <DropdownItem\r\n                  className=\"w-100\"\r\n                  onClick={() =>\r\n                    dispatch(\r\n                      getInvoice({\r\n                        rpt_name: \"sample\",\r\n                        output_type: \"pdf\",\r\n                        dataYear: userData.dataYear,\r\n                        par_UNITKEY: 139,\r\n                        par_SAMPLE: \"ahh...ini adalah sample parameter\"\r\n                      })\r\n                    )\r\n                  }\r\n                >\r\n                  <File className=\"font-small-4 me-50\" />\r\n                  <span className=\"align-middle\">PDF</span>\r\n                </DropdownItem>\r\n\r\n                <DropdownItem\r\n                  className=\"w-100\"\r\n                  onClick={() =>\r\n                    dispatch(\r\n                      getInvoice({\r\n                        rpt_name: \"sample\",\r\n                        output_type: \"xls\",\r\n                        dataYear: userData.dataYear,\r\n                        as_attachment: true,\r\n                        par_UNITKEY: 139,\r\n                        par_SAMPLE: \"ahh...ini adalah sample parameter\"\r\n                      })\r\n                    )\r\n                  }\r\n                >\r\n                  <Grid className=\"font-small-4 me-50\" />\r\n                  <span className=\"align-middle\">Excel</span>\r\n                </DropdownItem>\r\n\r\n                <DropdownItem\r\n                  className=\"w-100\"\r\n                  // onClick={() => downloadCSV(store.data)}\r\n                  onClick={() =>\r\n                    dispatch(\r\n                      getInvoice({\r\n                        rpt_name: \"sample\",\r\n                        output_type: \"csv\",\r\n                        dataYear: userData.dataYear,\r\n                        as_attachment: true,\r\n                        par_UNITKEY: 139,\r\n                        par_SAMPLE: \"ahh...ini adalah sample parameter\"\r\n                      })\r\n                    )\r\n                  }\r\n                >\r\n                  <FileText className=\"font-small-4 me-50\" />\r\n                  <span className=\"align-middle\">CSV</span>\r\n                </DropdownItem>\r\n              </DropdownMenu>\r\n            </UncontrolledDropdown> */}\r\n\r\n            {ability.can(\r\n              \"post\",\r\n              sessionStorage.getItem(\"current_page_perm\")\r\n            ) ? (\r\n              <Button\r\n                className=\"add-new-user\"\r\n                color=\"primary\"\r\n                onClick={toggleSidebar}\r\n                // onClick={handleAdd}\r\n              >\r\n                {t(\"Add New\")} {t(pageTitle)}\r\n              </Button>\r\n            ) : null}\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst List = () => {\r\n  const dispatch = useDispatch()\r\n  const store = useSelector((state) => state[storeName])\r\n\r\n  const { t } = useTranslation()\r\n  const ability = useContext(AbilityContext)\r\n\r\n  const { colors } = useContext(ThemeColors)\r\n  const [sort_dir, setSortDir] = useState(\"desc\")\r\n  const [searchTerm, setSearchTerm] = useState(\"\")\r\n  const [currentPage, setCurrentPage] = useState(1)\r\n  const [sort, setSort] = useState(\"id\")\r\n  const [rowsPerPage, setRowsPerPage] = useState(10)\r\n  const [selectedRows, setSelectedRows] = useState([])\r\n  const [toggleCleared, setToggleCleared] = useState(false)\r\n\r\n  const [sidebarOpen, setSidebarOpen] = useState(false)\r\n  const [loading, setLoading] = useState(false)\r\n  const [loadingText, setLoadingText] = useState(\"Please Wait\")\r\n  const [showModal, setShowModal] = useState(false)\r\n  const [formState, setFormState] = useState(null)\r\n\r\n  const handleEdit = (rowData) => {\r\n    setFormState(\"edit\")\r\n    if (!detailFromGrid) {\r\n      setLoadingText(\r\n        `${t(\"Loading\")} ${t(\"Detail\")} ${t(\"Data\")} ${t(pageTitle)}`\r\n      )\r\n      setLoading(true)\r\n      dispatch(getDataById(rowData.id)).then((res) => {\r\n        if (res.meta.requestStatus === \"rejected\") {\r\n          setLoading(false)\r\n          toast.error(res.payload.message, {\r\n            style: {\r\n              padding: \"16px\",\r\n              color: colors.danger.main,\r\n              border: `1px solid ${colors.danger.main}`\r\n            },\r\n            iconTheme: {\r\n              primary: colors.danger.main\r\n            }\r\n          })\r\n        } else {\r\n          setLoading(false)\r\n          setShowModal(true)\r\n        }\r\n      })\r\n    } else {\r\n      setLoadingText(\r\n        `${t(\"Loading\")} ${t(\"Detail\")} ${t(\"Data\")} ${t(pageTitle)}`\r\n      )\r\n      setLoading(true)\r\n      dispatch(setDataById(rowData)).then(() => {\r\n        setLoading(false)\r\n        setShowModal(true)\r\n      })\r\n    }\r\n  }\r\n\r\n  const handleCloseModal = () => {\r\n    setSidebarOpen(!sidebarOpen)\r\n    setShowModal(!showModal)\r\n    revivalBack()\r\n  }\r\n\r\n  const toggleSidebar = () => {\r\n    // console.log(\"here\")\r\n    setFormState(\"add\")\r\n    setSidebarOpen(!sidebarOpen)\r\n    setShowModal(!showModal)\r\n    neutralizeBack(handleCloseModal)\r\n  }\r\n\r\n  const handleDelete = async (id) => {\r\n    const result = await MySwal.fire({\r\n      title: `${t(\"Are you sure?\")}`,\r\n      text: `${t(\"You won't be able to revert\")} ${t(pageTitle)}!`,\r\n      icon: \"warning\",\r\n      showCancelButton: true,\r\n      confirmButtonText: `${t(\"Yes, Delete\")} ${t(pageTitle)}!`,\r\n      cancelButtonText: `${t(\"Cancel\")}`,\r\n      customClass: {\r\n        confirmButton: \"btn btn-primary\",\r\n        cancelButton: \"btn btn-outline-danger ms-1\"\r\n      },\r\n      buttonsStyling: false\r\n    })\r\n    if (result.value) {\r\n      setLoadingText(`${t(\"Deleting\")} Data ${t(pageTitle)}`)\r\n      setLoading(true)\r\n      dispatch(deleteData(id)).then((res) => {\r\n        // console.log(res)\r\n        if (res.meta.requestStatus === \"fulfilled\") {\r\n          setLoading(false)\r\n          toast.success(`${t(\"Successfully deleted\")} ${t(pageTitle)}`, {\r\n            style: {\r\n              padding: \"16px\",\r\n              color: colors.success.main,\r\n              border: `1px solid ${colors.success.main}`\r\n            },\r\n            iconTheme: {\r\n              primary: colors.success.main\r\n            }\r\n          })\r\n        } else if (res.meta.requestStatus === \"rejected\") {\r\n          setLoading(false)\r\n          toast.error(res.payload.message, {\r\n            style: {\r\n              padding: \"16px\",\r\n              color: colors.danger.main,\r\n              border: `1px solid ${colors.danger.main}`\r\n            },\r\n            iconTheme: {\r\n              primary: colors.danger.main\r\n            }\r\n          })\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  const handleDeleteSelected = async () => {\r\n    const countSelectedCopy = selectedRows.length\r\n    const result = await MySwal.fire({\r\n      title: `${t(\"Are you sure?\")}`,\r\n      text: `${t(\"You will delete\")} ${countSelectedCopy} ${t(\r\n        \"selected data. Deleted data cannot be recovered\"\r\n      )}!`,\r\n      icon: \"warning\",\r\n      showCancelButton: true,\r\n      confirmButtonText: `${t(\"Yes, Delete\")} ${countSelectedCopy} ${t(\r\n        pageTitle\r\n      )}!`,\r\n      cancelButtonText: `${t(\"Cancel\")}`,\r\n      customClass: {\r\n        confirmButton: \"btn btn-primary\",\r\n        cancelButton: \"btn btn-outline-danger ms-1\"\r\n      },\r\n      buttonsStyling: false\r\n    })\r\n    if (result.value) {\r\n      setLoadingText(\r\n        `${t(\"Deleting\")} ${countSelectedCopy} Data ${t(pageTitle)}`\r\n      )\r\n      setLoading(true)\r\n      const values = selectedRows.map((a) => a.id)\r\n      // console.log(values)\r\n      dispatch(deleteSelectedRowData({ id: values })).then((res) => {\r\n        // console.log(res)\r\n        if (res.meta.requestStatus === \"fulfilled\") {\r\n          setSelectedRows([])\r\n          setToggleCleared(!toggleCleared)\r\n          setLoading(false)\r\n          toast.success(\r\n            `${t(\"Successfully deleted\")} ${countSelectedCopy} ${t(pageTitle)}`,\r\n            {\r\n              style: {\r\n                padding: \"16px\",\r\n                color: colors.success.main,\r\n                border: `1px solid ${colors.success.main}`\r\n              },\r\n              iconTheme: {\r\n                primary: colors.success.main\r\n              }\r\n            }\r\n          )\r\n        } else if (res.meta.requestStatus === \"rejected\") {\r\n          setLoading(false)\r\n          toast.error(res.payload.message, {\r\n            style: {\r\n              padding: \"16px\",\r\n              color: colors.danger.main,\r\n              border: `1px solid ${colors.danger.main}`\r\n            },\r\n            iconTheme: {\r\n              primary: colors.danger.main\r\n            }\r\n          })\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  /////PAGINATION SERVERSIDE\r\n  const handlePagination = (page) => {\r\n    dispatch(\r\n      getDataList({\r\n        sort_dir,\r\n        sort,\r\n        search: searchTerm,\r\n        length: rowsPerPage,\r\n        page: page.selected + 1\r\n      })\r\n    )\r\n    setCurrentPage(page.selected + 1)\r\n  }\r\n\r\n  const handlePerPage = (e) => {\r\n    const value = parseInt(e.currentTarget.value)\r\n    dispatch(\r\n      getDataList({\r\n        sort_dir,\r\n        sort,\r\n        search: searchTerm,\r\n        length: value,\r\n        page: currentPage\r\n      })\r\n    )\r\n    setRowsPerPage(value)\r\n  }\r\n\r\n  const handleDebounceFn = (inputValue) => {\r\n    dispatch(\r\n      getDataList({\r\n        sort_dir,\r\n        search: inputValue,\r\n        sort,\r\n        page: currentPage,\r\n        length: rowsPerPage\r\n      })\r\n    )\r\n  }\r\n\r\n  const debounceFn = useCallback(debounce(handleDebounceFn, 500), [])\r\n\r\n  const handleFilter = (event) => {\r\n    setSearchTerm(event)\r\n    debounceFn(event)\r\n  }\r\n\r\n  const handleSort = (column, sortDirection) => {\r\n    setSortDir(sortDirection)\r\n    setSort(column.sortField)\r\n    dispatch(\r\n      getDataList({\r\n        sort_dir,\r\n        sort,\r\n        search: searchTerm,\r\n        page: currentPage,\r\n        length: rowsPerPage\r\n      })\r\n    )\r\n  }\r\n\r\n  const handleRowSelected = useCallback((state) => {\r\n    setSelectedRows(state.selectedRows)\r\n  }, [])\r\n\r\n  const CustomPagination = () => {\r\n    const count = Number(Math.ceil(store.total / rowsPerPage))\r\n\r\n    return (\r\n      <ReactPaginate\r\n        previousLabel={\"\"}\r\n        nextLabel={\"\"}\r\n        pageCount={count || 1}\r\n        activeClassName=\"active\"\r\n        forcePage={currentPage !== 0 ? currentPage - 1 : 0}\r\n        onPageChange={(page) => handlePagination(page)}\r\n        pageClassName={\"page-item\"}\r\n        nextLinkClassName={\"page-link\"}\r\n        nextClassName={\"page-item next\"}\r\n        previousClassName={\"page-item prev\"}\r\n        previousLinkClassName={\"page-link\"}\r\n        pageLinkClassName={\"page-link\"}\r\n        containerClassName={\r\n          \"pagination react-paginate justify-content-end my-2 pe-1\"\r\n        }\r\n      />\r\n    )\r\n  }\r\n\r\n  const renderCell = (row, column) => {\r\n    const field = row[column.fieldName]\r\n    const dataFormat = column.dataFormat\r\n    if (dataFormat) {\r\n      if (dataFormat.includes(\":\")) {\r\n        const columnTypeFormat = dataFormat.split(\":\")\r\n        const columnType = columnTypeFormat[0]\r\n        const columnFormat = columnTypeFormat[1]\r\n        let columnFormated = row[column.fieldName]\r\n        if (columnType === \"date\") {\r\n          columnFormated = Moment(field).format(\"DD MMM YYYY\")\r\n          if (columnFormat) {\r\n            columnFormated = Moment(field).format(columnFormat)\r\n          }\r\n        }\r\n        if (columnType === \"datetime\") {\r\n          columnFormated = Moment(field).format(\"DD MMM YYYY HH:mm\")\r\n          if (columnFormat) {\r\n            columnFormated = Moment(field).format(columnFormat)\r\n          }\r\n        }\r\n        return columnFormated\r\n      }\r\n    }\r\n    return row[column.fieldName]\r\n  }\r\n\r\n  const progLangImg = {\r\n    python:\r\n      \"https://logos-download.com/wp-content/uploads/2016/10/Python_logo_wordmark.png\",\r\n    javascript: \"https://javascriptsu.files.wordpress.com/2020/12/js.jpg\",\r\n    react:\r\n      \"https://logos-download.com/wp-content/uploads/2016/09/React_logo_wordmark.png\",\r\n    angular:\r\n      \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSQgREvN-e1uVZXVDc2w_zLeey0Li4buQ26gF0ZmCYxaBMoybo4uQTncS3Z5WxHRyZNfA&usqp=CAU\",\r\n    flask: \"https://miro.medium.com/max/1079/1*nvtdCw77Al6LgV8wt_ma6Q.png\"\r\n  }\r\n  const columns = [\r\n    {\r\n      name: t(\"App Name\"),\r\n      sortField: \"name\",\r\n      center: false,\r\n      sortable: true,\r\n      selector: (row) => row[\"name\"],\r\n      cell: (row) => (\r\n        <div className=\"d-flex justify-content-left align-items-center\">\r\n          {row.logo?.appLogo ? (\r\n            <Avatar\r\n              className=\"me-1\"\r\n              img={row?.logo?.appLogo}\r\n              width=\"32\"\r\n              height=\"32\"\r\n              imgHeight=\"25\"\r\n              imgWidth=\"30\"\r\n              color={\"light-primary\"}\r\n            />\r\n          ) : !row.is_uploading ? (\r\n            <Avatar\r\n              initials\r\n              className=\"me-1\"\r\n              color={\"light-primary\"}\r\n              content={row.name || \"John Doe\"}\r\n            />\r\n          ) : (\r\n            <Spinner size=\"sm\" color=\"primary\" />\r\n          )}\r\n\r\n          <div className=\"d-flex flex-column\">\r\n            <span className=\"fw-bolder\">{row.name}</span>\r\n            <small className=\"text-truncate text-muted mb-0\">{row.code}</small>\r\n          </div>\r\n        </div>\r\n      )\r\n    },\r\n    {\r\n      name: t(\"App Type\"),\r\n      center: false,\r\n      sortable: false,\r\n      selector: (row) => row[\"info\"][\"appType\"],\r\n      cell: (row) => (\r\n        <div className=\"d-flex justify-content-left align-items-center\">\r\n          {row?.info?.appType === \"service\" ? (\r\n            <ApiIcon className=\"me-1\" sixe={32} />\r\n          ) : (\r\n            <WebIcon className=\"me-1\" sixe={32} />\r\n          )}\r\n          <div className=\"d-flex flex-column\">\r\n            <span className=\"fw-bolder\">{row?.info?.appType}</span>\r\n          </div>\r\n        </div>\r\n      )\r\n    },\r\n    {\r\n      name: t(\"Framework\"),\r\n      center: false,\r\n      sortable: false,\r\n      selector: (row) => row[\"info\"][\"programming_language\"][\"main_language\"],\r\n      cell: (row) => (\r\n        <div className=\"d-flex justify-content-left align-items-center\">\r\n          {progLangImg[row?.info?.programming_language?.main_language] && (\r\n            <img\r\n              className=\"me-1\"\r\n              src={progLangImg[row?.info?.programming_language?.main_language]}\r\n              // width=\"60\"\r\n              height=\"18\"\r\n            />\r\n          )}\r\n          {progLangImg[row?.info?.programming_language?.framework] && (\r\n            <img\r\n              className=\"me-1\"\r\n              src={progLangImg[row?.info?.programming_language?.framework]}\r\n              // width=\"60\"\r\n              height=\"18\"\r\n            />\r\n          )}\r\n        </div>\r\n      )\r\n    },\r\n    ...store.dynamicColumns.map((column) => ({\r\n      name: column.columnName,\r\n      sortField: column.fieldName,\r\n      center: false,\r\n      sortable: true,\r\n      selector: (row) => row[column.fieldName],\r\n      cell: (row) => renderCell(row, column)\r\n    })),\r\n    {\r\n      name: t(\"Actions\"),\r\n      center: true,\r\n      width: \"140px\",\r\n      cell: (row) => (\r\n        <GlobalActionsTable\r\n          row={row}\r\n          handleDelete={handleDelete}\r\n          handleEdit={handleEdit}\r\n          storeName={storeName}\r\n        />\r\n      )\r\n    }\r\n  ]\r\n\r\n  const tableColumns = useMemo(\r\n    () =>\r\n      store.isLoading\r\n        ? columns.map((column) => ({\r\n            name: t(column.name),\r\n            ...column,\r\n            sortable: false,\r\n            cell: (row) => (\r\n              <Skeleton\r\n                sx={{ bgcolor: colors.dark.light }}\r\n                animation=\"wave\"\r\n                className={column.name === \"Actions\" ? \"ms-2\" : \"\"}\r\n                width={column.name === \"Actions\" ? 10 : \"100%\"}\r\n                height={40}\r\n              />\r\n            )\r\n          }))\r\n        : columns.map((column) => ({\r\n            name: t(column.name),\r\n            ...column\r\n          })),\r\n    [store.isLoading, columns]\r\n  )\r\n\r\n  const dataToRender = () => {\r\n    const filters = {\r\n      search: searchTerm\r\n    }\r\n    const isFiltered = Object.keys(filters).some(function (k) {\r\n      return filters[k].length > 0\r\n    })\r\n    if (!store.isLoading) {\r\n      if (store.data.length > 0) {\r\n        return store.data\r\n      } else if (store.data.length === 0 && isFiltered) {\r\n        return []\r\n      } else {\r\n        // console.log(store.allData)\r\n        // return store.allData.slice(0, rowsPerPage)\r\n      }\r\n    } else {\r\n      return Array(10).fill({})\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (store.data.length === 0 || (!store.isLoading && getAlwaysGrid)) {\r\n      setLoadingText(`${t(\"Loading Data\")} ${t(pageTitle)}`)\r\n      dispatch(\r\n        getDataList({\r\n          sort_dir,\r\n          sort,\r\n          search: searchTerm,\r\n          page: currentPage,\r\n          length: rowsPerPage\r\n        })\r\n      )\r\n    }\r\n  }, [dispatch, store.data.length, sort_dir, sort, currentPage])\r\n\r\n  return (\r\n    <Fragment>\r\n      <UILoader blocking={loading} loader={<Loader />}>\r\n        <Card className=\"overflow-hidden\">\r\n          <div className=\"react-dataTable react-dataTable-selectable-rows\">\r\n            <DataTable\r\n              noHeader\r\n              subHeader\r\n              sortServer\r\n              responsive\r\n              pagination\r\n              paginationServer\r\n              paginationTotalRows={store.total}\r\n              paginationComponent={CustomPagination}\r\n              selectableRows\r\n              onSelectedRowsChange={handleRowSelected}\r\n              selectableRowsHighlight\r\n              // onRowClicked={handleRowSelected}\r\n              clearSelectedRows={toggleCleared}\r\n              selectableRowsComponent={BootstrapCheckbox}\r\n              noDataComponent={<NoDataDisplay />}\r\n              // fixedHeader\r\n              // fixedHeaderScrollHeight=\"600px\"\r\n              style={{ \"min-height\": \"400px\" }}\r\n              highlightOnHover\r\n              pointerOnHover\r\n              columns={tableColumns}\r\n              onSort={handleSort}\r\n              sortIcon={<ChevronDown />}\r\n              className=\"react-dataTable\"\r\n              data={dataToRender()}\r\n              subHeaderComponent={\r\n                <CustomHeader\r\n                  store={store}\r\n                  searchTerm={searchTerm}\r\n                  rowsPerPage={rowsPerPage}\r\n                  handleFilter={handleFilter}\r\n                  handlePerPage={handlePerPage}\r\n                  toggleSidebar={toggleSidebar}\r\n                  selectedRow={selectedRows}\r\n                  handleDeleteSelected={handleDeleteSelected}\r\n                />\r\n              }\r\n            />\r\n          </div>\r\n        </Card>\r\n\r\n        {/* <Sidebar open={sidebarOpen} toggleSidebar={toggleSidebar} /> */}\r\n      </UILoader>\r\n\r\n      {showModal && (\r\n        <ModalAddEdit\r\n          formState={formState}\r\n          show={showModal}\r\n          setShow={toggleSidebar}\r\n          detailPage={false}\r\n          setFormState={setFormState}\r\n        />\r\n      )}\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default List\r\n","import { Fragment, useEffect, useState } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { useTranslation } from \"react-i18next\"\r\nimport \"./style.scss\"\r\nimport { selectThemeColors } from \"@utils\"\r\nimport classnames from \"classnames\"\r\nimport Select from \"react-select\"\r\n\r\nimport { storeName, getDataList, getAlwaysGrid, pageTitle } from \"./store\"\r\n\r\nconst List = ({\r\n  lookupMode_fieldName = \"\",\r\n  lookupMode_isMulti = false,\r\n  lookupMode_onChange,\r\n  lookupMode_defaultValue\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const dispatch = useDispatch()\r\n  const store = useSelector((state) => state[storeName])\r\n\r\n  const onChangeInput = (e) => {\r\n    return lookupMode_onChange(e.value, lookupMode_fieldName)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (store.data.length === 0 || (!store.isLoading && getAlwaysGrid)) {\r\n      dispatch(getDataList({}))\r\n    }\r\n  }, [dispatch, store.data.length])\r\n\r\n  return (\r\n    <Fragment>\r\n      <Select\r\n        theme={selectThemeColors}\r\n        defaultValue={\r\n          !lookupMode_isMulti\r\n            ? store.dataDropdown.filter(\r\n                (el) => el.value === lookupMode_defaultValue\r\n              )\r\n            : lookupMode_defaultValue\r\n        }\r\n        placeholder={`${t(\"Filter\")} ${t(pageTitle)}...`}\r\n        isMulti={lookupMode_isMulti}\r\n        // onChange={lookupMode_onChange}\r\n        onChange={onChangeInput}\r\n        options={store.dataDropdown}\r\n        className={classnames(\"react-select\", {\r\n          \"is-invalid\": store.selectedData?.id === null\r\n        })}\r\n        classNamePrefix=\"select\"\r\n      />\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default List\r\n"],"sourceRoot":""}