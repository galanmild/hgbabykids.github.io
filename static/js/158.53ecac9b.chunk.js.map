{"version":3,"sources":["views/dashboard/widgets/WidgetTrainingTask.js"],"names":["params","pagination","clickable","autoplay","delay","disableOnInteraction","WidgetTrainingTask","hideCardTitle","id_user","t","useTranslation","store","useSelector","state","dynamicStore","dispatch","dynamic_temp_state","useDispatch","storeName","useEffect","pageData","data","length","isLoading","getDataList","endpointName","baseUrl","type","Id_AttendingState","calendarStrings","lastDay","sameDay","nextDay","lastWeek","nextWeek","sameElse","toUpperCaseFilter","d","toUpperCase","renderAvatarGroup","avatarData","map","item","i","name","FirstName","LastName","title","replaceAll","placement","img","PhotoPath","require","default","imgHeight","imgWidth","remainCount","push","meta","lg","xs","style","minHeight","className","tag","blocking","loader","isManager","row","src","TrainingData","Image","illustration","height","filter","format","StartDate","Name","Description","color","icon","size","calendar","IsOnline","LinkRef","Address","Employee","Id_Training"],"mappings":"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","file":"static/js/158.53ecac9b.chunk.js","sourcesContent":["import Avatar from \"@components/avatar\"\r\nimport AvatarGroup from \"@components/avatar-group\"\r\nimport UILoader from \"@components/ui-loader\"\r\nimport illustration from \"@src/assets/images/illustration/email.svg\"\r\nimport { Loader } from \"@src/shared/CommonComponents\"\r\nimport { getDataList } from \"@src/shared/dynamic_pages/store\"\r\nimport \"moment-timezone\"\r\nimport \"moment/locale/id\"\r\nimport { useEffect } from \"react\"\r\nimport { Calendar, MapPin, Video } from \"react-feather\"\r\nimport { useTranslation } from \"react-i18next\"\r\nimport Moment from \"react-moment\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  CardHeader,\r\n  CardText,\r\n  CardTitle,\r\n  Col\r\n} from \"reactstrap\"\r\n\r\nimport EventAvailableOutlinedIcon from \"@mui/icons-material/EventAvailableOutlined\"\r\nimport { Swiper, SwiperSlide } from \"swiper/react/swiper-react\"\r\nconst params = {\r\n  // navigation: true\r\n  pagination: {\r\n    clickable: true\r\n  },\r\n  autoplay: {\r\n    delay: 7500,\r\n    disableOnInteraction: false\r\n  }\r\n}\r\n\r\nconst WidgetTrainingTask = ({ hideCardTitle = false, id_user = null }) => {\r\n  const { t } = useTranslation()\r\n  // const store = useSelector((state) => state[storeName])\r\n  const store = useSelector((state) => state.dynamicStore)\r\n  const dynamicTempState = useSelector((state) => state.dynamic_temp_state)\r\n  const dispatch = useDispatch()\r\n\r\n  const storeName = \"TrainingEmployee_task\"\r\n  const endpointName = \"TrainingEmployee/assignment\"\r\n\r\n  useEffect(() => {\r\n    if (\r\n      !store.pageData[storeName] ||\r\n      (store.pageData[storeName]?.data?.length === 0 &&\r\n        !store.pageData[storeName]?.isLoading)\r\n    ) {\r\n      dispatch(\r\n        getDataList({\r\n          storeName: storeName,\r\n          endpointName: endpointName,\r\n          baseUrl: \"hr\",\r\n          type: \"to_me\",\r\n          Id_AttendingState: 1\r\n        })\r\n      )\r\n    }\r\n  }, [])\r\n\r\n  const calendarStrings = {\r\n    lastDay: \"[Yesterday]\",\r\n    sameDay: \"[Today]\",\r\n    nextDay: \"[Tomorrow]\",\r\n    lastWeek: \"[last] dddd\",\r\n    nextWeek: \"dddd\",\r\n    sameElse: \"L\"\r\n  }\r\n\r\n  const toUpperCaseFilter = (d) => {\r\n    return d.toUpperCase()\r\n  }\r\n\r\n  const renderAvatarGroup = (data) => {\r\n    if (data) {\r\n      const minCount = 10\r\n      const avatarData = data.map((item, i) => {\r\n        let name = `${item?.FirstName} ${item?.LastName}`\r\n        if (i <= minCount) {\r\n          return {\r\n            title: `${name.replaceAll(\".\", \"\")}`,\r\n            placement: \"bottom\",\r\n            img:\r\n              item?.PhotoPath ??\r\n              require(\"@src/assets/images/avatars/avatar-blank.png\").default,\r\n            imgHeight: 33,\r\n            imgWidth: 33\r\n          }\r\n        }\r\n      })\r\n      const remainCount = (data.length ?? 0) - minCount\r\n      if (remainCount > 0 && avatarData) {\r\n        avatarData.push({\r\n          meta: `+${remainCount}`\r\n        })\r\n      } else {\r\n        avatarData.push({\r\n          meta: `${avatarData.length} ${t(\"Employee ready to attend\")}`\r\n        })\r\n      }\r\n      return <AvatarGroup data={avatarData} />\r\n    } else {\r\n      return null\r\n    }\r\n  }\r\n\r\n  {\r\n    return store.pageData[storeName]?.isLoading ? (\r\n      <Col lg=\"12\" xs=\"12\">\r\n        <Card style={{ minHeight: \"200px\" }}>\r\n          <CardHeader>\r\n            <div className=\"d-flex align-items-center\">\r\n              <EventAvailableOutlinedIcon className=\"user-timeline-title-icon me-1\" />\r\n              <CardTitle tag=\"h4\">{t(\"Training Task\")}</CardTitle>\r\n            </div>\r\n          </CardHeader>\r\n          <UILoader blocking={true} loader={<Loader />}>\r\n            <CardBody></CardBody>\r\n          </UILoader>\r\n        </Card>\r\n      </Col>\r\n    ) : store.pageData[storeName]?.data?.length > 0 ? (\r\n      <Col lg=\"12\" xs=\"12\">\r\n        <Card>\r\n          <CardHeader>\r\n            <div className=\"d-flex align-items-center\">\r\n              <EventAvailableOutlinedIcon className=\"user-timeline-title-icon me-1\" />\r\n              {!store.pageData[storeName]?.data[0]?.isManager ? (\r\n                <CardTitle tag=\"h4\">{t(\"My Training Task\")}</CardTitle>\r\n              ) : (\r\n                <CardTitle tag=\"h4\">{t(\"Me & Staff Training Task\")}</CardTitle>\r\n              )}\r\n            </div>\r\n          </CardHeader>\r\n          <CardBody className=\"px-0 pb-0 \">\r\n            <Swiper {...params}>\r\n              {store.pageData[storeName]?.data.map((row) => {\r\n                return (\r\n                  <SwiperSlide key={`swiper_${row.Id_Training}`}>\r\n                    <Card className=\"card-developer-meetup  cursor-pointer\">\r\n                      <div className=\"meetup-img-wrapper rounded-top text-center\">\r\n                        <img\r\n                          src={\r\n                            row?.TrainingData?.Image\r\n                              ? row.TrainingData.Image\r\n                              : illustration\r\n                          }\r\n                          height=\"170\"\r\n                        />\r\n                      </div>\r\n                      <CardBody>\r\n                        <div className=\"meetup-header d-flex align-items-center\">\r\n                          <div className=\"meetup-day\">\r\n                            <h6 className=\"mb-0\">\r\n                              <Moment filter={toUpperCaseFilter} format=\"ddd\">\r\n                                {row?.TrainingData?.StartDate}\r\n                              </Moment>\r\n                            </h6>\r\n                            <h3 className=\"mb-0\">\r\n                              <Moment format=\"DD\">\r\n                                {row?.TrainingData?.StartDate}\r\n                              </Moment>\r\n                            </h3>\r\n                          </div>\r\n                          <div className=\"my-auto text-truncate\">\r\n                            <CardTitle tag=\"h4\" className=\"mb-25\">\r\n                              {row?.TrainingData?.Name}\r\n                            </CardTitle>\r\n                            <CardText className=\"mb-0\">\r\n                              {row?.TrainingData?.Description}\r\n                            </CardText>\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"d-flex\">\r\n                          <Avatar\r\n                            color=\"light-primary\"\r\n                            className=\"rounded me-1\"\r\n                            icon={<Calendar size={18} />}\r\n                          />\r\n                          <div>\r\n                            {/* <h6 className=\"mb-0\">Sat, May 25, 2020</h6>\r\n                                <small>10:AM to 6:PM</small> */}\r\n                            <h6 className=\"mb-0\">\r\n                              {\r\n                                <Moment calendar={calendarStrings}>\r\n                                  {row?.TrainingData?.StartDate}\r\n                                </Moment>\r\n                              }\r\n                            </h6>\r\n                            <small>\r\n                              {\r\n                                <Moment format=\"[Start at] LT\">\r\n                                  {row?.TrainingData?.StartDate}\r\n                                </Moment>\r\n                              }\r\n                            </small>\r\n                          </div>\r\n                        </div>\r\n                        {!row?.TrainingData?.IsOnline ? (\r\n                          <div className=\"d-flex mt-2\">\r\n                            <Avatar\r\n                              color=\"light-primary\"\r\n                              className=\"rounded me-1\"\r\n                              icon={<MapPin size={18} />}\r\n                            />\r\n                            <div>\r\n                              {/* <h6 className=\"mb-0\">Central Park</h6> */}\r\n                              <small>{row?.TrainingData?.Address}</small>\r\n                            </div>\r\n                          </div>\r\n                        ) : (\r\n                          <div className=\"d-flex mt-2\">\r\n                            <Avatar\r\n                              color=\"light-primary\"\r\n                              className=\"rounded me-1\"\r\n                              icon={<Video size={18} />}\r\n                            />\r\n                            <div>\r\n                              <h6 className=\"mb-0\">{t(\"Online Training\")}</h6>\r\n                              <small>\r\n                                {row?.TrainingData?.LinkRef\r\n                                  ? row?.TrainingData?.LinkRef\r\n                                  : \"The link will be sent before the event starts\"}\r\n                              </small>\r\n                            </div>\r\n                          </div>\r\n                        )}\r\n                        {renderAvatarGroup(row?.Employee)}\r\n                      </CardBody>\r\n                    </Card>\r\n                  </SwiperSlide>\r\n                )\r\n              })}\r\n            </Swiper>\r\n          </CardBody>\r\n        </Card>\r\n      </Col>\r\n    ) : null\r\n  }\r\n}\r\n\r\nexport default WidgetTrainingTask\r\n"],"sourceRoot":""}