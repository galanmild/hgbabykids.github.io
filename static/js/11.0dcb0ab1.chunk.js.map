{"version":3,"sources":["views/apps/permission/store/index.js","views/apps/permission/modal/index.js","views/apps/permission/Form.js","views/apps/permission/Table.js"],"names":["axios","useJwt","ssoAxiosInterceptor","pageTitle","storeName","endpointName","serverSideGrid","detailFromGrid","getAlwaysGrid","getApiAfterPut","getApiAfterPost","getApiAfterDelete","getApiSummaryData","detailPage","deleteSelection","dynamicColumns","dynamicColumnsFilter","filterLabel","fieldName","dynamicForm","extraCrud","crudName","crudLabel","getSummaryData","createAsyncThunk","params","Object","keys","forEach","key","get","response","data","getDataList","total","getDataById","id","rejectWithValue","resetSelectedData","a","postData","user","dispatch","getState","post","resetData","putData","selectedData","put","deleteData","delete","deleteSelectedRowData","setDataById","rowData","StoreSlice","createSlice","name","initialState","statusSummary","isLoadingSummary","errorSummary","dataSummary","status","isLoading","error","dataDropdown","statusDetail","isLoadingDetail","errorDetail","statusAddEdit","isLoadingAddEdit","errorAddEdit","statusDelete","isLoadingDelete","errorDelete","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","message","length","map","item","value","label","title","ModalAddEdit","show","setShow","formState","setFormState","t","useTranslation","useParams","useDispatch","store","useSelector","colors","useContext","ThemeColors","useState","setLoadingText","sortedObject","unordered","sort","reduce","obj","handleReset","isOpen","toggle","className","blocking","loader","updateDataToApi","storeData","JSON","stringify","countChanges","values","every","field","then","res","meta","requestStatus","toast","success","style","padding","color","main","border","iconTheme","primary","danger","setError","type","icon","postDataToApi","FormAddEdit","useForm","control","handleSubmit","errors","onSubmit","md","xs","for","defaultValue","render","invalid","description","subject","outline","onClick","MySwal","withReactContent","Swal","BootstrapCheckbox","forwardRef","props","ref","CustomHeader","handleAddEdit","handlePerPage","rowsPerPage","handleFilter","searchTerm","handleFiltersChange","selectedRow","handleDeleteSelected","filtersCustomAdd","ability","AbilityContext","allStore","dynamicFilterComponents","setDynamicFilterComponents","dynamicFilterDatas","handleChangeInputs","isMulti","index","indexOf","splice","push","useEffect","componentsImport","i","path_name","replaceAll","MyComponent","lazy","lookupMode","lookupMode_fieldName","lookupMode_dropdown","lookupMode_isMulti","isMultiSelection","lookupMode_onChange","lookupMode_defaultValue","isM2MDefValFromGrid","x","lookupMode_isM2MDefValFromGrid","lg","htmlFor","onChange","width","e","target","fallback","can","sessionStorage","getItem","List","sort_dir","setSortDir","setSearchTerm","currentPage","setCurrentPage","setSort","setRowsPerPage","selectedRows","setSelectedRows","filtersCustom","toggleCleared","setToggleCleared","sidebarOpen","setSidebarOpen","loading","setLoading","showModal","setShowModal","navigate","useNavigate","location","useLocation","colorsAssignee","Viewer","Editor","Manager","Administrator","pathname","r","handleCloseModal","revivalBack","handleDelete","fire","text","showCancelButton","confirmButtonText","cancelButtonText","customClass","confirmButton","cancelButton","buttonsStyling","countSelectedCopy","debounceFn","useCallback","debounce","inputValue","search","page","handleRowSelected","conditionalRowStyles","when","row","Array","isArray","classNames","columns","column","columnName","sortField","center","wrap","grow","sortable","selector","cell","renderCell","assignedTo","assignee","isLastBadge","to","classnames","pill","marginTop","replace","appsName","menuCount","endpointCount","handleEdit","tableColumns","useMemo","sx","bgcolor","dark","light","animation","height","noHeader","subHeader","sortServer","responsive","pagination","paginationServer","paginationTotalRows","paginationComponent","count","Number","Math","ceil","previousLabel","nextLabel","pageCount","activeClassName","forcePage","onPageChange","selected","handlePagination","pageClassName","nextLinkClassName","nextClassName","previousClassName","previousLinkClassName","pageLinkClassName","containerClassName","selectableRows","onSelectedRowsChange","selectableRowsHighlight","clearSelectedRows","selectableRowsComponent","noDataComponent","highlightOnHover","pointerOnHover","onSort","sortDirection","sortIcon","filters","isFiltered","some","k","fill","dataToRender","subHeaderComponent","event","parseInt","currentTarget","par_name","neutralizeBack"],"mappings":"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","file":"static/js/11.0dcb0ab1.chunk.js","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\"\r\n// import axios from \"axios\"\r\nimport { resetData } from \"../../../my-info/store/my_activities\"\r\nimport useJwt from \"@src/auth/jwt/useJwt\"\r\nconst axios = useJwt.ssoAxiosInterceptor\r\nexport const pageTitle = \"Permission\" ////\r\nexport const storeName = \"apps_permission\" ////\r\nexport const endpointName = \"api/permission\" ////\r\n\r\nexport const serverSideGrid = true ////\r\nexport const detailFromGrid = true //// GET DETAIL DATA FROM EXISTING DATA GRID (FASTER PEFORMANCE)\r\nexport const getAlwaysGrid = false //// GET ALWAYS GRID DATA EVERY CLICK MENU OR OPEN PAGE\r\nexport const getApiAfterPut = true ////\r\nexport const getApiAfterPost = true ////\r\nexport const getApiAfterDelete = true ////\r\nexport const getApiSummaryData = false //// GET SUMMARY DATA FROM BACKEND API\r\nexport const detailPage = true //// IF TRUE { WILL BE ACTIVATED DETAIL PAGE AND MENU ACTION BUTTON } ELSE { DETAIL PAGE SHOW ON MODAL }\r\nexport const deleteSelection = false\r\n\r\n///////DYNAMIC COLUMNS FOR TABLE\r\n///////if there are several fields that will be customised, don't set them here but add them to the Table.js component in the column section\r\nexport const dynamicColumns = []\r\n\r\n///////DYNAMIC FILTERS FOR TABLE\r\nexport const dynamicColumnsFilter = [\r\n  {\r\n    filterLabel: \"Role\",\r\n    fieldName: \"id_role\"\r\n  }\r\n]\r\n\r\n///////DYNAMIC FORM FOR MODAL\r\n///////if the fields display on the modal form matches the number of fields in the columns, leave this section filled with an empty array \" dynamicForm = [] \". Or if you want to customize, do it on the modal/index.js component\r\nexport const dynamicForm = []\r\n\r\nexport const extraCrud = [\r\n  {\r\n    crudName: \"permission_menu\",\r\n    crudLabel: \"Permission to Menu\"\r\n  },\r\n  {\r\n    crudName: \"permission_endpoint\",\r\n    crudLabel: \"Permission to Endpoint\"\r\n    // crudDescription: \"Permission to Endpoint\"\r\n  }\r\n]\r\n\r\nexport const getSummaryData = createAsyncThunk(\r\n  `${endpointName}/getSummaryData`,\r\n  async (params) => {\r\n    Object.keys(params).forEach((key) => {\r\n      if (params[key] === null || params[key] === \"\") {\r\n        delete params[key]\r\n      }\r\n    })\r\n    const response = await axios.get(`/${endpointName}/summary`, {\r\n      params\r\n    })\r\n    return {\r\n      params,\r\n      data: response.data.data\r\n    }\r\n  }\r\n)\r\n\r\nexport const getDataList = createAsyncThunk(\r\n  `${endpointName}/getDataList`,\r\n  async (params) => {\r\n    Object.keys(params).forEach((key) => {\r\n      if (params[key] === null || params[key] === \"\") {\r\n        delete params[key]\r\n      }\r\n    })\r\n    const response = await axios.get(`/${endpointName}`, {\r\n      params\r\n    })\r\n    return {\r\n      params,\r\n      data: response.data.data,\r\n      total: response.data.total\r\n    }\r\n  }\r\n)\r\n\r\nexport const getDataById = createAsyncThunk(\r\n  `${endpointName}/getDataById`,\r\n  async (id, { rejectWithValue }) => {\r\n    try {\r\n      const response = await axios.get(`/${endpointName}/${id}`)\r\n      return response.data.data\r\n    } catch (error) {\r\n      return rejectWithValue(error.response.data)\r\n    }\r\n  }\r\n)\r\n\r\nexport const resetSelectedData = createAsyncThunk(\r\n  `${endpointName}/resetSelectedData`,\r\n  async ({ rejectWithValue }) => {\r\n    return rejectWithValue({})\r\n  }\r\n)\r\n\r\nexport const postData = createAsyncThunk(\r\n  `${endpointName}/postData`,\r\n  async (user, { dispatch, getState, rejectWithValue }) => {\r\n    try {\r\n      const response = await axios.post(`/${endpointName}`, user)\r\n      dispatch(resetSelectedData({}))\r\n      if (getApiAfterPost) {\r\n        dispatch(getDataList(getState()[storeName].params))\r\n      }\r\n      dispatch(resetData({}))\r\n      return response.data\r\n    } catch (error) {\r\n      return rejectWithValue(error.response.data)\r\n    }\r\n  }\r\n)\r\n\r\nexport const putData = createAsyncThunk(\r\n  `${endpointName}/putData`,\r\n  async (data, { dispatch, getState, rejectWithValue }) => {\r\n    const id = getState()[storeName].selectedData.id\r\n    try {\r\n      const response = await axios.put(`/${endpointName}/${id}`, data)\r\n      dispatch(resetSelectedData({}))\r\n      if (getApiAfterPut) {\r\n        dispatch(getDataList(getState()[storeName].params))\r\n        if (getApiSummaryData) {\r\n          dispatch(getSummaryData({}))\r\n        }\r\n      }\r\n      dispatch(resetData({}))\r\n      return response.data\r\n    } catch (error) {\r\n      return rejectWithValue(error.response.data)\r\n    }\r\n  }\r\n)\r\n\r\nexport const deleteData = createAsyncThunk(\r\n  `${endpointName}/deleteData`,\r\n  async (id, { dispatch, getState, rejectWithValue }) => {\r\n    try {\r\n      const response = await axios.delete(`/${endpointName}/${id}`)\r\n      if (getApiAfterDelete) {\r\n        await dispatch(getDataList(getState()[storeName].params))\r\n        if (getApiSummaryData) {\r\n          dispatch(getSummaryData({}))\r\n        }\r\n      }\r\n      dispatch(resetData({}))\r\n      return response.data\r\n    } catch (error) {\r\n      return rejectWithValue(error.response.data)\r\n    }\r\n  }\r\n)\r\n\r\nexport const deleteSelectedRowData = createAsyncThunk(\r\n  `${endpointName}/deleteSelectedRowData`,\r\n  async (data, { dispatch, getState, rejectWithValue }) => {\r\n    try {\r\n      const response = await axios.delete(`/${endpointName}`, { data })\r\n      if (getApiAfterDelete) {\r\n        await dispatch(getDataList(getState()[storeName].params))\r\n        if (getApiSummaryData) {\r\n          dispatch(getSummaryData({}))\r\n        }\r\n      }\r\n      dispatch(resetData({}))\r\n      return response.data\r\n    } catch (error) {\r\n      return rejectWithValue(error.response.data)\r\n    }\r\n  }\r\n)\r\n\r\nexport const setDataById = createAsyncThunk(\r\n  `${endpointName}/setDataById`,\r\n  async (rowData, { rejectWithValue }) => {\r\n    return rejectWithValue(rowData)\r\n  }\r\n)\r\n\r\nconst fetchStatus = \"idle\" | \"loading\" | \"succeeded\" | \"failed\"\r\n\r\nexport const StoreSlice = createSlice({\r\n  name: storeName,\r\n  initialState: {\r\n    dynamicColumns,\r\n    pageTitle,\r\n    // SUMMARY\r\n    statusSummary: fetchStatus,\r\n    isLoadingSummary: false,\r\n    errorSummary: \"\" | null,\r\n    dataSummary: [],\r\n\r\n    // ALL\r\n    status: fetchStatus,\r\n    isLoading: false,\r\n    error: \"\" | null,\r\n    data: [],\r\n    total: 1,\r\n\r\n    params: {},\r\n    selectedData: null,\r\n    dataDropdown: [],\r\n\r\n    // DETAIL\r\n    statusDetail: fetchStatus,\r\n    isLoadingDetail: false,\r\n    errorDetail: \"\" | null,\r\n\r\n    // ADD&EDIT\r\n    statusAddEdit: fetchStatus,\r\n    isLoadingAddEdit: false,\r\n    errorAddEdit: \"\" | null,\r\n\r\n    // ADD&EDIT\r\n    statusDelete: fetchStatus,\r\n    isLoadingDelete: false,\r\n    errorDelete: \"\" | null\r\n  },\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    builder\r\n      ///SUMMARY\r\n      .addCase(getSummaryData.pending, (state) => {\r\n        state.statusSummary = \"loading\"\r\n        state.isLoadingSummary = true\r\n      })\r\n      .addCase(getSummaryData.fulfilled, (state, action) => {\r\n        // console.log(action.payload)\r\n        state.statusSummary = \"succeeded\"\r\n        state.isLoadingSummary = false\r\n        state.dataSummary = action.payload.data\r\n      })\r\n      .addCase(getSummaryData.rejected, (state, action) => {\r\n        state.statusSummary = \"failed\"\r\n        state.isLoadingSummary = false\r\n        state.errorSummary = action.error.message\r\n      })\r\n\r\n      ///ALL\r\n      .addCase(getDataList.pending, (state) => {\r\n        state.status = \"loading\"\r\n        state.isLoading = true\r\n      })\r\n      .addCase(getDataList.fulfilled, (state, action) => {\r\n        // console.log(action.payload)\r\n        state.status = \"succeeded\"\r\n        state.isLoading = false\r\n        if (action.payload.data.length > 0) {\r\n          state.data = action.payload.data\r\n          state.dataDropdown = action.payload.data.map((item) => ({\r\n            value: item.id,\r\n            label: item.title,\r\n            post: false,\r\n            put: false,\r\n            delete: false,\r\n            get: false\r\n          }))\r\n          // state.selectedData = {\r\n          //   value: action.payload.data[0].id,\r\n          //   label: `${action.payload.data[0].KodeSumberDana} ${action.payload.data[0].NamaSumberDana}`\r\n          // }\r\n        }\r\n        state.params = action.payload.params\r\n        state.total = action.payload.total\r\n      })\r\n      .addCase(getDataList.rejected, (state, action) => {\r\n        state.status = \"failed\"\r\n        state.isLoading = false\r\n        state.error = action.error.payload?.message\r\n      })\r\n\r\n      ///EDIT\r\n      .addCase(putData.pending, (state) => {\r\n        state.statusAddEdit = \"loading\"\r\n        state.isLoadingAddEdit = true\r\n      })\r\n      .addCase(putData.fulfilled, (state) => {\r\n        // console.log(action.payload)\r\n        state.statusAddEdit = \"succeeded\"\r\n        state.isLoadingAddEdit = false\r\n      })\r\n      .addCase(putData.rejected, (state, action) => {\r\n        state.statusAddEdit = \"failed\"\r\n        state.isLoadingAddEdit = false\r\n        state.errorAddEdit = action.payload?.message\r\n      })\r\n\r\n      ///ADD\r\n      .addCase(postData.pending, (state) => {\r\n        state.statusAddEdit = \"loading\"\r\n        state.isLoadingAddEdit = true\r\n      })\r\n      .addCase(postData.fulfilled, (state) => {\r\n        // console.log(action.payload)\r\n        state.statusAddEdit = \"succeeded\"\r\n        state.isLoadingAddEdit = false\r\n      })\r\n      .addCase(postData.rejected, (state, action) => {\r\n        state.statusAddEdit = \"failed\"\r\n        state.isLoadingAddEdit = false\r\n        state.errorAddEdit = action.payload?.message\r\n      })\r\n\r\n      ///DELETE\r\n      .addCase(deleteData.pending, (state) => {\r\n        state.statusDelete = \"loading\"\r\n        state.isLoadingDelete = true\r\n      })\r\n      .addCase(deleteData.fulfilled, (state) => {\r\n        // console.log(action.payload)\r\n        state.statusDelete = \"succeeded\"\r\n        state.isLoadingDelete = false\r\n      })\r\n      .addCase(deleteData.rejected, (state, action) => {\r\n        state.statusDelete = \"failed\"\r\n        state.isLoadingDelete = false\r\n        state.errorDelete = action.payload?.message\r\n      })\r\n\r\n      ///DELETE-SELECTED-ROW\r\n      .addCase(deleteSelectedRowData.pending, (state) => {\r\n        state.statusDelete = \"loading\"\r\n        state.isLoadingDelete = true\r\n      })\r\n      .addCase(deleteSelectedRowData.fulfilled, (state) => {\r\n        // console.log(action.payload)\r\n        state.statusDelete = \"succeeded\"\r\n        state.isLoadingDelete = false\r\n      })\r\n      .addCase(deleteSelectedRowData.rejected, (state, action) => {\r\n        state.statusDelete = \"failed\"\r\n        state.isLoadingDelete = false\r\n        state.errorDelete = action.payload?.message\r\n      })\r\n\r\n      ///DETAIL\r\n      .addCase(getDataById.pending, (state) => {\r\n        state.statusDetail = \"loading\"\r\n        state.isLoadingDetail = true\r\n      })\r\n      .addCase(getDataById.fulfilled, (state, action) => {\r\n        state.statusDetail = \"succeeded\"\r\n        state.isLoadingDetail = false\r\n        state.selectedData = action.payload\r\n      })\r\n      .addCase(getDataById.rejected, (state, action) => {\r\n        state.statusDetail = \"failed\"\r\n        state.isLoadingDetail = false\r\n        state.selectedData = null\r\n        state.errorDetail = action.payload?.message\r\n      })\r\n\r\n      ///OTHERS\r\n      .addCase(resetSelectedData.rejected, (state) => {\r\n        state.selectedData = null\r\n      })\r\n      .addCase(setDataById.rejected, (state, action) => {\r\n        state.selectedData = action.payload\r\n      })\r\n  }\r\n})\r\n\r\nexport default StoreSlice.reducer\r\n","/* eslint-disable multiline-ternary */\r\nimport { Fragment, useContext, useEffect, useState } from \"react\"\r\nimport { useParams } from \"react-router-dom\"\r\nimport toast from \"react-hot-toast\"\r\nimport Cleave from \"cleave.js/react\"\r\nimport {\r\n  Row,\r\n  Col,\r\n  Form,\r\n  Button,\r\n  Input,\r\n  Label,\r\n  Modal,\r\n  ModalBody,\r\n  ModalHeader,\r\n  CardText\r\n} from \"reactstrap\"\r\nimport { useTranslation } from \"react-i18next\"\r\nimport UILoader from \"@components/ui-loader\"\r\nimport Spinner from \"@components/spinner/Loading-spinner\"\r\nimport \"moment/locale/id\"\r\nimport { ThemeColors } from \"@src/utility/context/ThemeColors\"\r\nimport { selectThemeColors } from \"@utils\"\r\nimport Select from \"react-select\"\r\nimport Flatpickr from \"react-flatpickr\"\r\nimport \"@styles/react/libs/flatpickr/flatpickr.scss\"\r\nimport { Indonesian } from \"flatpickr/dist/l10n/id.js\"\r\nimport { useForm, Controller } from \"react-hook-form\"\r\nimport { NoDataDisplay, Loader } from \"@src/shared/CommonComponents\"\r\nimport {\r\n  storeName,\r\n  pageTitle,\r\n  postData,\r\n  putData,\r\n  resetSelectedData,\r\n  getDataById\r\n} from \"../store\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport FormAddEdit from \"../Form\"\r\n\r\nconst ModalAddEdit = ({\r\n  show,\r\n  setShow,\r\n  detailPage,\r\n  formState,\r\n  setFormState\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { id } = useParams()\r\n  const dispatch = useDispatch()\r\n  const store = useSelector((state) => state[storeName])\r\n  const { colors } = useContext(ThemeColors)\r\n  // const [tgl1, setTgl1] = useState(null)\r\n  const [loadingText, setLoadingText] = useState(\"Please Wait\")\r\n  // const {\r\n  //   control,\r\n  //   setError,\r\n  //   handleSubmit,\r\n  //   formState: { errors }\r\n  // } = useForm({})\r\n\r\n  function sortedObject(unordered) {\r\n    return Object.keys(unordered)\r\n      .sort()\r\n      .reduce((obj, key) => {\r\n        obj[key] = unordered[key]\r\n        return obj\r\n      }, {})\r\n  }\r\n\r\n  const countChanges = (data) => {\r\n    if (formState === \"edit\") {\r\n      const storeData = { ...sortedObject(store.selectedData) }\r\n      delete storeData[\"id\"]\r\n      for (let key in storeData) {\r\n        if (!(key in data)) delete storeData[key]\r\n      }\r\n      // console.log(JSON.stringify(sortedObject(storeData)))\r\n      // console.log(JSON.stringify(sortedObject(data)))\r\n      return (\r\n        JSON.stringify(sortedObject(storeData)) !==\r\n        JSON.stringify(sortedObject(data))\r\n      )\r\n    } else {\r\n      return true\r\n    }\r\n  }\r\n\r\n  const updateDataToApi = (data) => {\r\n    if (countChanges(data)) {\r\n      if (\r\n        Object.values(data).every((field) => {\r\n          return field !== null && field !== \"\"\r\n        })\r\n      ) {\r\n        setLoadingText(`${t(\"Updating\")} ${t(pageTitle)} ${t(\"Detail\")} Data`)\r\n        dispatch(putData(data)).then((res) => {\r\n          // console.log(res)\r\n          if (res.meta.requestStatus === \"fulfilled\") {\r\n            setShow(!show)\r\n            toast.success(`${t(\"Successfully Updated\")} ${t(pageTitle)}`, {\r\n              style: {\r\n                padding: \"16px\",\r\n                color: colors.success.main,\r\n                border: `1px solid ${colors.success.main}`\r\n              },\r\n              iconTheme: {\r\n                primary: colors.success.main\r\n              }\r\n            })\r\n          } else if (res.meta.requestStatus === \"rejected\") {\r\n            toast.error(res.payload.message, {\r\n              style: {\r\n                padding: \"16px\",\r\n                color: colors.danger.main,\r\n                border: `1px solid ${colors.danger.main}`\r\n              },\r\n              iconTheme: {\r\n                primary: colors.danger.main\r\n              }\r\n            })\r\n          }\r\n        })\r\n      } else {\r\n        for (const key in data) {\r\n          if (data[key]?.length === 0) {\r\n            setError(key, {\r\n              type: \"manual\"\r\n            })\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      toast(`${t(\"You haven't changed anything\")}`, { icon: \"👏\" })\r\n    }\r\n  }\r\n\r\n  const postDataToApi = (data) => {\r\n    if (\r\n      Object.values(data).every((field) => {\r\n        return field !== null && field !== \"\"\r\n      })\r\n    ) {\r\n      setLoadingText(`${t(`Creating a New ${pageTitle}`)}`)\r\n      dispatch(postData(data)).then((res) => {\r\n        // console.log(res)\r\n        if (res.meta.requestStatus === \"fulfilled\") {\r\n          setShow(!show)\r\n          toast.success(`${t(\"Successfully Created\")} ${t(pageTitle)}`, {\r\n            style: {\r\n              padding: \"16px\",\r\n              color: colors.success.main,\r\n              border: `1px solid ${colors.success.main}`\r\n            },\r\n            iconTheme: {\r\n              primary: colors.success.main\r\n            }\r\n          })\r\n        } else if (res.meta.requestStatus === \"rejected\") {\r\n          toast.error(res.payload.message, {\r\n            style: {\r\n              padding: \"16px\",\r\n              color: colors.danger.main,\r\n              border: `1px solid ${colors.danger.main}`\r\n            },\r\n            iconTheme: {\r\n              primary: colors.danger.main\r\n            }\r\n          })\r\n        }\r\n      })\r\n    } else {\r\n      for (const key in data) {\r\n        if (data[key] !== null && data[key]?.length === 0) {\r\n          setError(key, {\r\n            type: \"manual\"\r\n          })\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  function handleReset() {\r\n    dispatch(resetSelectedData())\r\n    setFormState(\"add\")\r\n    return setShow(false)\r\n  }\r\n\r\n  return !detailPage ? (\r\n    <Modal\r\n      isOpen={show}\r\n      toggle={() => {\r\n        handleReset()\r\n        setShow(!show)\r\n      }}\r\n      className=\"modal-dialog-centered modal-lg\"\r\n    >\r\n      <UILoader\r\n        blocking={store.isLoadingAddEdit || store.isLoadingDetail}\r\n        loader={<Loader />}\r\n      >\r\n        <ModalHeader\r\n          className=\"bg-transparent\"\r\n          toggle={() => {\r\n            handleReset()\r\n            setShow(!show)\r\n          }}\r\n        ></ModalHeader>\r\n        <ModalBody className=\"px-sm-5 pt-50 pb-5\">\r\n          <div className=\"text-center mb-2\">\r\n            <h2 className=\"mb-1\">\r\n              {formState === \"edit\" ? t(\"Edit\") : t(\"Add\")} {t(pageTitle)}\r\n            </h2>\r\n          </div>\r\n          <FormAddEdit\r\n            formState={formState}\r\n            updateDataToApi={updateDataToApi}\r\n            postDataToApi={postDataToApi}\r\n            handleReset={handleReset}\r\n          />\r\n          {/* <Form\r\n            onSubmit={\r\n              formState === \"edit\"\r\n                ? handleSubmit(updateDataToApi)\r\n                : handleSubmit(postDataToApi)\r\n            }\r\n          >\r\n            <Row className=\"gy-1 pt-75\">\r\n              <Col md={12} xs={12}>\r\n                <Label className=\"form-label\" for=\"title\">\r\n                  {t(\"Title\")}\r\n                  <span className=\"text-danger\">*</span>\r\n                </Label>\r\n                <Controller\r\n                  defaultValue={store.selectedData?.title ?? \"\"}\r\n                  control={control}\r\n                  id=\"title\"\r\n                  name=\"title\"\r\n                  render={({ field }) => (\r\n                    <Input\r\n                      {...field}\r\n                      className={\r\n                        errors.title\r\n                          ? \"form-control is-invalid\"\r\n                          : \"form-control\"\r\n                      }\r\n                      id=\"title\"\r\n                      invalid={errors.title && true}\r\n                    />\r\n                  )}\r\n                />\r\n              </Col>\r\n\r\n              <Col md={12} xs={12}>\r\n                <Label className=\"form-label\" for=\"description\">\r\n                  {t(\"Description\")}\r\n                  <span className=\"text-danger\">*</span>\r\n                </Label>\r\n                <Controller\r\n                  defaultValue={store.selectedData?.description ?? \"\"}\r\n                  control={control}\r\n                  id=\"description\"\r\n                  name=\"description\"\r\n                  render={({ field }) => (\r\n                    <Input\r\n                      {...field}\r\n                      className={\r\n                        errors.description\r\n                          ? \"form-control is-invalid\"\r\n                          : \"form-control\"\r\n                      }\r\n                      id=\"description\"\r\n                      invalid={errors.description && true}\r\n                    />\r\n                  )}\r\n                />\r\n              </Col>\r\n\r\n              <Col md={12} xs={12}>\r\n                <Label className=\"form-label\" for=\"subject\">\r\n                  {t(\"Subject\")}\r\n                  <span className=\"text-danger\">*</span>\r\n                </Label>\r\n                <Controller\r\n                  defaultValue={store.selectedData?.subject ?? \"\"}\r\n                  control={control}\r\n                  id=\"subject\"\r\n                  name=\"subject\"\r\n                  render={({ field }) => (\r\n                    <Input\r\n                      {...field}\r\n                      className={\r\n                        errors.subject\r\n                          ? \"form-control is-invalid\"\r\n                          : \"form-control\"\r\n                      }\r\n                      id=\"subject\"\r\n                      invalid={errors.subject && true}\r\n                    />\r\n                  )}\r\n                />\r\n              </Col>\r\n\r\n              <Col xs={12} className=\"text-center mt-2 pt-50\">\r\n                <Button type=\"submit\" className=\"me-1\" color=\"primary\">\r\n                  {t(\"Submit\")}\r\n                </Button>\r\n                <Button\r\n                  type=\"reset\"\r\n                  color=\"secondary\"\r\n                  outline\r\n                  onClick={() => {\r\n                    handleReset()\r\n                    setFormState(\"add\")\r\n                    setShow(false)\r\n                  }}\r\n                >\r\n                  {t(\"Cancel\")}\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n          </Form> */}\r\n        </ModalBody>\r\n      </UILoader>\r\n    </Modal>\r\n  ) : null\r\n}\r\n\r\nexport default ModalAddEdit\r\n","/* eslint-disable multiline-ternary */\r\nimport { Fragment, useContext, useEffect, useState } from \"react\"\r\nimport { useParams } from \"react-router-dom\"\r\nimport toast from \"react-hot-toast\"\r\nimport Cleave from \"cleave.js/react\"\r\nimport {\r\n  Row,\r\n  Col,\r\n  Form,\r\n  Button,\r\n  Input,\r\n  Label,\r\n  Modal,\r\n  ModalBody,\r\n  ModalHeader,\r\n  CardText\r\n} from \"reactstrap\"\r\nimport { useTranslation } from \"react-i18next\"\r\nimport UILoader from \"@components/ui-loader\"\r\nimport Spinner from \"@components/spinner/Loading-spinner\"\r\nimport \"moment/locale/id\"\r\nimport { ThemeColors } from \"@src/utility/context/ThemeColors\"\r\nimport { selectThemeColors } from \"@utils\"\r\nimport Select from \"react-select\"\r\nimport Flatpickr from \"react-flatpickr\"\r\nimport \"@styles/react/libs/flatpickr/flatpickr.scss\"\r\nimport { Indonesian } from \"flatpickr/dist/l10n/id.js\"\r\nimport { useForm, Controller } from \"react-hook-form\"\r\nimport {\r\n  storeName,\r\n  pageTitle,\r\n  postData,\r\n  putData,\r\n  resetSelectedData,\r\n  getDataById\r\n} from \"./store\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\n\r\nconst FormAddEdit = ({\r\n  formState,\r\n  updateDataToApi,\r\n  postDataToApi,\r\n  handleReset\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { id } = useParams()\r\n  const dispatch = useDispatch()\r\n  const store = useSelector((state) => state[storeName])\r\n  const { colors } = useContext(ThemeColors)\r\n  const [loadingText, setLoadingText] = useState(\"Please Wait\")\r\n  const {\r\n    control,\r\n    setError,\r\n    handleSubmit,\r\n    formState: { errors }\r\n  } = useForm({})\r\n\r\n  return (\r\n    <Form\r\n      onSubmit={\r\n        formState === \"edit\"\r\n          ? handleSubmit(updateDataToApi)\r\n          : handleSubmit(postDataToApi)\r\n      }\r\n    >\r\n      <Row className=\"gy-1 pt-75\">\r\n        <Col md={12} xs={12}>\r\n          <Label className=\"form-label\" for=\"title\">\r\n            {t(\"Title\")}\r\n            <span className=\"text-danger\">*</span>\r\n          </Label>\r\n          <Controller\r\n            defaultValue={store.selectedData?.title ?? \"\"}\r\n            control={control}\r\n            id=\"title\"\r\n            name=\"title\"\r\n            render={({ field }) => (\r\n              <Input\r\n                {...field}\r\n                className={\r\n                  errors.title ? \"form-control is-invalid\" : \"form-control\"\r\n                }\r\n                id=\"title\"\r\n                invalid={errors.title && true}\r\n              />\r\n            )}\r\n          />\r\n        </Col>\r\n\r\n        <Col md={12} xs={12}>\r\n          <Label className=\"form-label\" for=\"description\">\r\n            {t(\"Description\")}\r\n            <span className=\"text-danger\">*</span>\r\n          </Label>\r\n          <Controller\r\n            defaultValue={store.selectedData?.description ?? \"\"}\r\n            control={control}\r\n            id=\"description\"\r\n            name=\"description\"\r\n            render={({ field }) => (\r\n              <Input\r\n                {...field}\r\n                className={\r\n                  errors.description\r\n                    ? \"form-control is-invalid\"\r\n                    : \"form-control\"\r\n                }\r\n                id=\"description\"\r\n                invalid={errors.description && true}\r\n              />\r\n            )}\r\n          />\r\n        </Col>\r\n\r\n        <Col md={12} xs={12}>\r\n          <Label className=\"form-label\" for=\"subject\">\r\n            {t(\"Subject\")}\r\n            <span className=\"text-danger\">*</span>\r\n          </Label>\r\n          <Controller\r\n            defaultValue={store.selectedData?.subject ?? \"\"}\r\n            control={control}\r\n            id=\"subject\"\r\n            name=\"subject\"\r\n            render={({ field }) => (\r\n              <Input\r\n                {...field}\r\n                className={\r\n                  errors.subject ? \"form-control is-invalid\" : \"form-control\"\r\n                }\r\n                id=\"subject\"\r\n                invalid={errors.subject && true}\r\n              />\r\n            )}\r\n          />\r\n        </Col>\r\n\r\n        <Col xs={12} className=\"text-center mt-2 pt-50\">\r\n          <Button type=\"submit\" className=\"me-1\" color=\"primary\">\r\n            {t(\"Submit\")}\r\n          </Button>\r\n          <Button type=\"reset\" color=\"secondary\" outline onClick={handleReset}>\r\n            {t(\"Cancel\")}\r\n          </Button>\r\n        </Col>\r\n      </Row>\r\n    </Form>\r\n  )\r\n}\r\n\r\nexport default FormAddEdit\r\n","/* eslint-disable implicit-arrow-linebreak */\r\n/* eslint-disable no-confusing-arrow */\r\n/* eslint-disable multiline-ternary */\r\nimport {\r\n  Fragment,\r\n  useState,\r\n  useEffect,\r\n  useContext,\r\n  useMemo,\r\n  useCallback,\r\n  forwardRef,\r\n  lazy,\r\n  Suspense\r\n} from \"react\"\r\nimport classnames from \"classnames\"\r\nimport { Link, useNavigate, useLocation } from \"react-router-dom\"\r\nimport { useTranslation } from \"react-i18next\"\r\nimport { AbilityContext } from \"@src/utility/context/Can\"\r\nimport ModalAddEdit from \"./modal\"\r\nimport { neutralizeBack, revivalBack } from \"@src/utility/Utils\"\r\nimport GlobalActionsTable from \"../../../shared/GlobaActionsTable\"\r\nimport {\r\n  storeName,\r\n  pageTitle,\r\n  serverSideGrid,\r\n  detailFromGrid,\r\n  deleteSelection,\r\n  getApiAfterPut,\r\n  getApiAfterPost,\r\n  getApiAfterDelete,\r\n  getSummarysData,\r\n  detailPage,\r\n  getAlwaysGrid,\r\n  getDataList,\r\n  getDataById,\r\n  setDataById,\r\n  resetSelectedData,\r\n  deleteData,\r\n  deleteSelectedRowData,\r\n  dynamicColumnsFilter\r\n} from \"./store\"\r\nimport { getInvoice } from \"../../invoices/store\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport ReactPaginate from \"react-paginate\"\r\nimport DataTable from \"react-data-table-component\"\r\nimport debounce from \"lodash.debounce\"\r\nimport {\r\n  ChevronDown,\r\n  Share,\r\n  Printer,\r\n  FileText,\r\n  File,\r\n  Grid,\r\n  Copy,\r\n  Slack,\r\n  User,\r\n  Settings,\r\n  Database,\r\n  Edit2,\r\n  MoreVertical,\r\n  Trash2,\r\n  Archive,\r\n  Eye,\r\n  CheckCircle,\r\n  CheckSquare,\r\n  Check,\r\n  Square\r\n} from \"react-feather\"\r\n\r\nimport { getUserData } from \"@utils\"\r\nimport { NoDataDisplay, Loader } from \"@src/shared/CommonComponents\"\r\nimport UILoader from \"@components/ui-loader\"\r\nimport Spinner from \"@components/spinner/Loading-spinner\"\r\nimport { ThemeColors } from \"@src/utility/context/ThemeColors\"\r\nimport toast from \"react-hot-toast\"\r\nimport {\r\n  Row,\r\n  Col,\r\n  Card,\r\n  Input,\r\n  Label,\r\n  Button,\r\n  CardBody,\r\n  CardTitle,\r\n  CardHeader,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  DropdownToggle,\r\n  UncontrolledDropdown,\r\n  Badge,\r\n  UncontrolledTooltip,\r\n  CardText\r\n} from \"reactstrap\"\r\n\r\nimport \"@styles/react/libs/react-select/_react-select.scss\"\r\nimport \"@styles/react/libs/tables/react-dataTable-component.scss\"\r\nimport Swal from \"sweetalert2\"\r\nimport withReactContent from \"sweetalert2-react-content\"\r\nimport { Skeleton } from \"@mui/material\"\r\nimport Moment from \"moment\"\r\n\r\nconst MySwal = withReactContent(Swal)\r\nconst BootstrapCheckbox = forwardRef((props, ref) => (\r\n  <div className=\"form-check\">\r\n    <Input type=\"checkbox\" ref={ref} {...props} />\r\n  </div>\r\n))\r\n\r\n// ** Table Header\r\nconst CustomHeader = ({\r\n  store,\r\n  handleAddEdit,\r\n  handlePerPage,\r\n  rowsPerPage,\r\n  handleFilter,\r\n  searchTerm,\r\n  selectedRow,\r\n  handleDeleteSelected,\r\n  handleFiltersChange,\r\n  filtersCustomAdd\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const ability = useContext(AbilityContext)\r\n  const dispatch = useDispatch()\r\n  const allStore = useSelector((state) => state)\r\n  const [dynamicFilterComponents, setDynamicFilterComponents] = useState({})\r\n  const [dynamicFilterDatas, setDynamicFilterDatas] = useState({})\r\n\r\n  const handleChangeInputs = (value, fieldName, isMulti = false) => {\r\n    fieldName = `filter_${fieldName}`\r\n    if (isMulti) {\r\n      if (dynamicFilterDatas[fieldName]) {\r\n        const index = dynamicFilterDatas[fieldName].indexOf(value)\r\n        if (index !== -1) {\r\n          dynamicFilterDatas[fieldName].splice(index, 1)\r\n        } else {\r\n          dynamicFilterDatas[fieldName].push(value)\r\n        }\r\n      } else {\r\n        dynamicFilterDatas[fieldName] = [value]\r\n      }\r\n    } else {\r\n      dynamicFilterDatas[fieldName] = value\r\n    }\r\n    return handleFiltersChange(dynamicFilterDatas[fieldName], fieldName)\r\n  }\r\n\r\n  useEffect(() => {\r\n    // DYNAMIC IMPORT COMPONENTS\r\n    let componentsImport = {}\r\n    for (let i = 0; i < dynamicColumnsFilter.length; i++) {\r\n      const fieldName = dynamicColumnsFilter[i][\"fieldName\"]\r\n      const path_name = dynamicColumnsFilter[i][\"fieldName\"].replaceAll(\r\n        \"id_\",\r\n        \"\"\r\n      )\r\n\r\n      dynamicFilterDatas[`filter_${fieldName}`] = null\r\n      const MyComponent = lazy(() => import(`../${path_name}`))\r\n      componentsImport[`${path_name}_comp`] = (\r\n        <MyComponent\r\n          lookupMode={true}\r\n          lookupMode_fieldName={fieldName}\r\n          lookupMode_dropdown={true}\r\n          lookupMode_isMulti={dynamicColumnsFilter[i].isMultiSelection ?? false}\r\n          lookupMode_onChange={handleChangeInputs}\r\n          lookupMode_defaultValue={\r\n            dynamicColumnsFilter[i]?.isM2MDefValFromGrid\r\n              ? allStore[storeName].data.map((x) => x[fieldName])\r\n              : allStore[storeName]?.selectedData\r\n              ? allStore[storeName].selectedData[fieldName]\r\n              : \"\"\r\n          }\r\n          lookupMode_isM2MDefValFromGrid={\r\n            dynamicColumnsFilter[i]?.isM2MDefValFromGrid ?? false\r\n          }\r\n        />\r\n      )\r\n    }\r\n\r\n    setDynamicFilterComponents(componentsImport)\r\n  }, [dispatch, dynamicFilterDatas])\r\n\r\n  return (\r\n    <Row className=\"text-nowrap w-100 my-75 g-0 permission-header\">\r\n      <Col xs={12} lg={4} className=\"d-flex align-items-center\">\r\n        <div className=\"d-flex align-items-center justify-content-center justify-content-lg-start\">\r\n          <label htmlFor=\"rows-per-page\">{t(\"Show\")}</label>\r\n          <Input\r\n            className=\"mx-50\"\r\n            type=\"select\"\r\n            id=\"rows-per-page\"\r\n            value={rowsPerPage}\r\n            onChange={handlePerPage}\r\n            style={{ width: \"5rem\" }}\r\n          >\r\n            <option value=\"10\">10</option>\r\n            <option value=\"25\">25</option>\r\n            <option value=\"50\">50</option>\r\n          </Input>\r\n          <label htmlFor=\"rows-per-page\">{t(\"Entries\")}</label>\r\n        </div>\r\n      </Col>\r\n      <Col xs={12} lg={8}>\r\n        <div className=\"d-flex align-items-center justify-content-lg-end justify-content-start flex-md-nowrap flex-wrap mt-lg-0 mt-1\">\r\n          <div className=\"d-flex align-items-center me-1\">\r\n            <label className=\"mb-0\" htmlFor=\"search-invoice\">\r\n              {t(\"Search\")}:\r\n            </label>\r\n            <Input\r\n              id=\"search-invoice\"\r\n              className=\"ms-50 w-100\"\r\n              type=\"text\"\r\n              value={searchTerm}\r\n              onChange={(e) => handleFilter(e.target.value)}\r\n            />\r\n          </div>\r\n          {/* <div className=\"mt-50 width-200 me-1 mt-sm-0 mt-1\">\r\n            <Input\r\n              type=\"select\"\r\n              name=\"select\"\r\n              // value={role}\r\n              onChange={(e) => handleAssignedToChange(e.target.value)}\r\n            >\r\n              <option value=\"\">Select Role</option>\r\n              <option value=\"administrator\">Administrator</option>\r\n              <option value=\"manager\">Manager</option>\r\n              <option value=\"user\">User</option>\r\n              <option value=\"support\">Support</option>\r\n              <option value=\"restricted-user\">Restricted User</option>\r\n            </Input>\r\n          </div> */}\r\n          {dynamicColumnsFilter.map((item, index) => {\r\n            const path_name = item.fieldName.replaceAll(\"id_\", \"\")\r\n            return (\r\n              <div\r\n                key={path_name}\r\n                className=\"mt-50 width-300 me-1 mt-sm-0 mt-1\"\r\n              >\r\n                <Suspense fallback={<div>Loading...</div>}>\r\n                  {dynamicFilterComponents[`${path_name}_comp`]}\r\n                </Suspense>\r\n              </div>\r\n            )\r\n          })}\r\n\r\n          {ability.can(\"post\", sessionStorage.getItem(\"current_page_perm\")) ? (\r\n            <Button\r\n              className=\"add-permission mt-sm-0 mt-1\"\r\n              color=\"primary\"\r\n              // onClick={toggleSidebar}\r\n              onClick={handleAddEdit}\r\n            >\r\n              {t(\"Add New\")} {t(pageTitle)}\r\n            </Button>\r\n          ) : null}\r\n        </div>\r\n      </Col>\r\n    </Row>\r\n  )\r\n}\r\n\r\nconst List = ({ filtersCustomAdd }) => {\r\n  const dispatch = useDispatch()\r\n  const store = useSelector((state) => state[storeName])\r\n\r\n  const { t } = useTranslation()\r\n  const ability = useContext(AbilityContext)\r\n\r\n  const { colors } = useContext(ThemeColors)\r\n  const [sort_dir, setSortDir] = useState(\"desc\")\r\n  const [searchTerm, setSearchTerm] = useState(\"\")\r\n  const [currentPage, setCurrentPage] = useState(1)\r\n  const [sort, setSort] = useState(\"id\")\r\n  const [rowsPerPage, setRowsPerPage] = useState(10)\r\n  const [selectedRows, setSelectedRows] = useState([])\r\n\r\n  const [filtersCustom, setFiltersCustom] = useState(filtersCustomAdd ?? {})\r\n\r\n  const [toggleCleared, setToggleCleared] = useState(false)\r\n\r\n  const [sidebarOpen, setSidebarOpen] = useState(false)\r\n  const [loading, setLoading] = useState(false)\r\n  const [loadingText, setLoadingText] = useState(\"Please Wait\")\r\n  const [showModal, setShowModal] = useState(false)\r\n  const [formState, setFormState] = useState(null)\r\n  const navigate = useNavigate()\r\n  const location = useLocation()\r\n  const colorsAssignee = {\r\n    Viewer: \"light-info\",\r\n    Editor: \"light-success\",\r\n    Manager: \"light-warning\",\r\n    Administrator: \"light-primary\",\r\n    \"restricted-user\": \"light-danger\"\r\n  }\r\n\r\n  const handleAddEdit = (rowData) => {\r\n    // console.log(rowData.id)\r\n    if (!rowData.id) {\r\n      setFormState(\"edit\")\r\n    } else {\r\n      setFormState(\"add\")\r\n    }\r\n    //\r\n    if (!detailPage) {\r\n      if (!detailFromGrid) {\r\n        setLoadingText(\r\n          `${t(\"Loading\")} ${t(\"Detail\")} ${t(\"Data\")} ${t(pageTitle)}`\r\n        )\r\n        setLoading(true)\r\n        dispatch(getDataById(rowData.id)).then((res) => {\r\n          if (res.meta.requestStatus === \"rejected\") {\r\n            setLoading(false)\r\n            toast.error(res.payload.message, {\r\n              style: {\r\n                padding: \"16px\",\r\n                color: colors.danger.main,\r\n                border: `1px solid ${colors.danger.main}`\r\n              },\r\n              iconTheme: {\r\n                primary: colors.danger.main\r\n              }\r\n            })\r\n          } else {\r\n            setLoading(false)\r\n            setShowModal(true)\r\n          }\r\n        })\r\n      } else {\r\n        setLoadingText(\r\n          `${t(\"Loading\")} ${t(\"Detail\")} ${t(\"Data\")} ${t(pageTitle)}`\r\n        )\r\n        setLoading(true)\r\n        dispatch(setDataById(rowData)).then(() => {\r\n          setLoading(false)\r\n          setShowModal(true)\r\n        })\r\n      }\r\n    } else {\r\n      if (rowData.id) {\r\n        navigate(`${location.pathname}/edit/${rowData.id}`)\r\n      } else {\r\n        dispatch(resetSelectedData({})).then((r) => {\r\n          navigate(`${location.pathname}/add`)\r\n        })\r\n      }\r\n    }\r\n  }\r\n\r\n  const handleCloseModal = () => {\r\n    setSidebarOpen(!sidebarOpen)\r\n    setShowModal(!showModal)\r\n    revivalBack()\r\n  }\r\n\r\n  const toggleSidebar = () => {\r\n    // console.log(\"here\")\r\n    setFormState(\"add\")\r\n    setSidebarOpen(!sidebarOpen)\r\n    setShowModal(!showModal)\r\n    neutralizeBack(handleCloseModal)\r\n  }\r\n\r\n  const handleDelete = async (id) => {\r\n    const result = await MySwal.fire({\r\n      title: `${t(\"Are you sure?\")}`,\r\n      text: `${t(\"You won't be able to revert\")} ${t(pageTitle)}!`,\r\n      icon: \"warning\",\r\n      showCancelButton: true,\r\n      confirmButtonText: `${t(\"Yes, Delete\")} ${t(pageTitle)}!`,\r\n      cancelButtonText: `${t(\"Cancel\")}`,\r\n      customClass: {\r\n        confirmButton: \"btn btn-primary\",\r\n        cancelButton: \"btn btn-outline-danger ms-1\"\r\n      },\r\n      buttonsStyling: false\r\n    })\r\n    if (result.value) {\r\n      setLoadingText(`${t(\"Deleting\")} Data ${t(pageTitle)}`)\r\n      setLoading(true)\r\n      dispatch(deleteData(id)).then((res) => {\r\n        // console.log(res)\r\n        if (res.meta.requestStatus === \"fulfilled\") {\r\n          setLoading(false)\r\n          toast.success(`${t(\"Successfully deleted\")} ${t(pageTitle)}`, {\r\n            style: {\r\n              padding: \"16px\",\r\n              color: colors.success.main,\r\n              border: `1px solid ${colors.success.main}`\r\n            },\r\n            iconTheme: {\r\n              primary: colors.success.main\r\n            }\r\n          })\r\n        } else if (res.meta.requestStatus === \"rejected\") {\r\n          setLoading(false)\r\n          toast.error(res.payload.message, {\r\n            style: {\r\n              padding: \"16px\",\r\n              color: colors.danger.main,\r\n              border: `1px solid ${colors.danger.main}`\r\n            },\r\n            iconTheme: {\r\n              primary: colors.danger.main\r\n            }\r\n          })\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  const handleDeleteSelected = async () => {\r\n    const countSelectedCopy = selectedRows.length\r\n    const result = await MySwal.fire({\r\n      title: `${t(\"Are you sure?\")}`,\r\n      text: `${t(\"You will delete\")} ${countSelectedCopy} ${t(\r\n        \"selected data. Deleted data cannot be recovered\"\r\n      )}!`,\r\n      icon: \"warning\",\r\n      showCancelButton: true,\r\n      confirmButtonText: `${t(\"Yes, Delete\")} ${countSelectedCopy} ${t(\r\n        pageTitle\r\n      )}!`,\r\n      cancelButtonText: `${t(\"Cancel\")}`,\r\n      customClass: {\r\n        confirmButton: \"btn btn-primary\",\r\n        cancelButton: \"btn btn-outline-danger ms-1\"\r\n      },\r\n      buttonsStyling: false\r\n    })\r\n    if (result.value) {\r\n      setLoadingText(\r\n        `${t(\"Deleting\")} ${countSelectedCopy} Data ${t(pageTitle)}`\r\n      )\r\n      setLoading(true)\r\n      const values = selectedRows.map((a) => a.id)\r\n      // console.log(values)\r\n      dispatch(deleteSelectedRowData({ id: values })).then((res) => {\r\n        // console.log(res)\r\n        if (res.meta.requestStatus === \"fulfilled\") {\r\n          setSelectedRows([])\r\n          setToggleCleared(!toggleCleared)\r\n          setLoading(false)\r\n          toast.success(\r\n            `${t(\"Successfully deleted\")} ${countSelectedCopy} ${t(pageTitle)}`,\r\n            {\r\n              style: {\r\n                padding: \"16px\",\r\n                color: colors.success.main,\r\n                border: `1px solid ${colors.success.main}`\r\n              },\r\n              iconTheme: {\r\n                primary: colors.success.main\r\n              }\r\n            }\r\n          )\r\n        } else if (res.meta.requestStatus === \"rejected\") {\r\n          setLoading(false)\r\n          toast.error(res.payload.message, {\r\n            style: {\r\n              padding: \"16px\",\r\n              color: colors.danger.main,\r\n              border: `1px solid ${colors.danger.main}`\r\n            },\r\n            iconTheme: {\r\n              primary: colors.danger.main\r\n            }\r\n          })\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  /////PAGINATION SERVERSIDE\r\n  const handlePagination = (page) => {\r\n    dispatch(\r\n      getDataList({\r\n        sort_dir,\r\n        sort,\r\n        search: searchTerm,\r\n        length: rowsPerPage,\r\n        page: page.selected + 1,\r\n        ...filtersCustom\r\n      })\r\n    )\r\n    setCurrentPage(page.selected + 1)\r\n  }\r\n\r\n  const handlePerPage = (e) => {\r\n    const value = parseInt(e.currentTarget.value)\r\n    dispatch(\r\n      getDataList({\r\n        sort_dir,\r\n        sort,\r\n        search: searchTerm,\r\n        length: value,\r\n        page: currentPage,\r\n        ...filtersCustom\r\n      })\r\n    )\r\n    setRowsPerPage(value)\r\n  }\r\n\r\n  const handleDebounceFn = (inputValue) => {\r\n    dispatch(\r\n      getDataList({\r\n        sort_dir,\r\n        search: inputValue,\r\n        sort,\r\n        page: currentPage,\r\n        length: rowsPerPage,\r\n        ...filtersCustom\r\n      })\r\n    )\r\n  }\r\n\r\n  const debounceFn = useCallback(debounce(handleDebounceFn, 500), [])\r\n\r\n  const handleFilter = (event) => {\r\n    setSearchTerm(event)\r\n    debounceFn(event)\r\n  }\r\n\r\n  const handleFiltersChange = (value, par_name) => {\r\n    filtersCustom[par_name] = value\r\n    dispatch(\r\n      getDataList({\r\n        sort_dir,\r\n        sort,\r\n        search: searchTerm,\r\n        page: currentPage,\r\n        length: rowsPerPage,\r\n        ...filtersCustom\r\n      })\r\n    )\r\n  }\r\n\r\n  const handleSort = (column, sortDirection) => {\r\n    setSortDir(sortDirection)\r\n    setSort(column.sortField)\r\n    dispatch(\r\n      getDataList({\r\n        sort_dir,\r\n        sort,\r\n        search: searchTerm,\r\n        page: currentPage,\r\n        length: rowsPerPage,\r\n        ...filtersCustom\r\n      })\r\n    )\r\n  }\r\n\r\n  const handleRowSelected = useCallback((state) => {\r\n    setSelectedRows(state.selectedRows)\r\n  }, [])\r\n\r\n  const CustomPagination = () => {\r\n    const count = Number(Math.ceil(store.total / rowsPerPage))\r\n\r\n    return (\r\n      <ReactPaginate\r\n        previousLabel={\"\"}\r\n        nextLabel={\"\"}\r\n        pageCount={count || 1}\r\n        activeClassName=\"active\"\r\n        forcePage={currentPage !== 0 ? currentPage - 1 : 0}\r\n        onPageChange={(page) => handlePagination(page)}\r\n        pageClassName={\"page-item\"}\r\n        nextLinkClassName={\"page-link\"}\r\n        nextClassName={\"page-item next\"}\r\n        previousClassName={\"page-item prev\"}\r\n        previousLinkClassName={\"page-link\"}\r\n        pageLinkClassName={\"page-link\"}\r\n        containerClassName={\r\n          \"pagination react-paginate justify-content-end my-2 pe-1\"\r\n        }\r\n      />\r\n    )\r\n  }\r\n\r\n  const conditionalRowStyles = [\r\n    {\r\n      when: (row) => Array.isArray(row),\r\n      classNames: [\"d-table\"]\r\n    }\r\n  ]\r\n\r\n  const columns = [\r\n    ...store.dynamicColumns.map((column) => ({\r\n      name: column.columnName,\r\n      sortField: column.fieldName,\r\n      center: false,\r\n      wrap: true,\r\n      grow: 0,\r\n      sortable: true,\r\n      width: \"250px\",\r\n      selector: (row) => row[column.fieldName],\r\n      cell: (row) => renderCell(row, column)\r\n    })),\r\n    {\r\n      name: t(\"Title\"),\r\n      center: false,\r\n      sortable: true,\r\n      wrap: true,\r\n      width: \"350px\",\r\n      sortField: \"title\",\r\n      selector: (row) => row.title,\r\n      cell: (row) => {\r\n        const title = row.title,\r\n          description = row.description ? row.description : \"\"\r\n        return (\r\n          <div className=\"d-flex justify-content-left align-items-center\">\r\n            <div className=\"d-flex flex-column\">\r\n              <h6 className=\"user-name text-truncate mb-0\">{title}</h6>\r\n              <small className=\"text-truncate text-muted mb-0\">\r\n                {description}\r\n              </small>\r\n            </div>\r\n          </div>\r\n        )\r\n      }\r\n    },\r\n\r\n    // {\r\n    //   name: t(\"Subject\"),\r\n    //   center: false,\r\n    //   sortable: true,\r\n    //   // minWidth: \"400px\",\r\n    //   sortField: \"subject\",\r\n    //   selector: (row) => row.subject,\r\n    //   cell: (row) => row.subject\r\n    // },\r\n    {\r\n      name: t(\"Assigned To\"),\r\n      sortable: false,\r\n      wrap: false,\r\n      grow: 2,\r\n      width: \"300px\",\r\n      cell: ({ assignedTo }) => {\r\n        if (assignedTo) {\r\n          return assignedTo.map((assignee, index) => {\r\n            const isLastBadge = assignedTo[assignedTo.length - 1] === index\r\n            return (\r\n              <Link\r\n                key={`${assignee}-${index}`}\r\n                to=\"/apps/roles\"\r\n                className={classnames({ \"me-50\": !isLastBadge })}\r\n              >\r\n                <Badge\r\n                  pill\r\n                  color={colorsAssignee[assignee]}\r\n                  style={{\r\n                    marginTop: \"2px\"\r\n                  }}\r\n                  className=\"text-capitalize\"\r\n                >\r\n                  {assignee?.replace(\"-\", \" \")}\r\n                </Badge>\r\n              </Link>\r\n            )\r\n          })\r\n        } else {\r\n          return null\r\n        }\r\n      }\r\n    },\r\n    {\r\n      name: t(\"Apps\"),\r\n      center: false,\r\n      sortable: false,\r\n      wrap: true,\r\n      width: \"200px\",\r\n      cell: ({ appsName }) => {\r\n        if (appsName) {\r\n          return appsName.map((assignee, index) => {\r\n            const isLastBadge = appsName[appsName.length - 1] === index\r\n            return (\r\n              <Link\r\n                key={`${assignee}-${index}`}\r\n                to=\"/apps/app\"\r\n                className={classnames({ \"me-50\": !isLastBadge })}\r\n              >\r\n                <Badge\r\n                  pill\r\n                  color={colorsAssignee[assignee]}\r\n                  className=\"text-capitalize\"\r\n                >\r\n                  {assignee.replace(\"-\", \" \")}\r\n                </Badge>\r\n              </Link>\r\n            )\r\n          })\r\n        } else {\r\n          return null\r\n        }\r\n      }\r\n    },\r\n    {\r\n      name: t(\"Resources\"),\r\n      center: false,\r\n      sortable: false,\r\n      width: \"160px\",\r\n      selector: (row) => row.menuCount,\r\n      cell: (row) => {\r\n        return (\r\n          <>\r\n            <Link\r\n              key=\"table-field-count-menu\"\r\n              to=\"/apps/permission_menu\"\r\n              className=\"me-50\"\r\n            >\r\n              <Badge pill color=\"light-info\" className=\"text-capitalize\">\r\n                {row.menuCount} {t(\"Menu\")}\r\n              </Badge>\r\n            </Link>\r\n            <Link\r\n              key=\"table-field-count-endpoint\"\r\n              to=\"/apps/permission_endpoint\"\r\n            >\r\n              <Badge pill color=\"light-warning\" className=\"text-capitalize\">\r\n                {row.endpointCount} {t(\"Endpoint\")}\r\n              </Badge>\r\n            </Link>\r\n          </>\r\n        )\r\n      }\r\n    },\r\n    {\r\n      name: t(\"Actions\"),\r\n      center: true,\r\n      width: \"140px\",\r\n      cell: (row) => (\r\n        <GlobalActionsTable\r\n          row={row}\r\n          handleDelete={handleDelete}\r\n          handleEdit={handleAddEdit}\r\n          storeName={storeName}\r\n        />\r\n      )\r\n    }\r\n  ]\r\n\r\n  const tableColumns = useMemo(\r\n    () =>\r\n      store.isLoading\r\n        ? columns.map((column) => ({\r\n            name: t(column.name),\r\n            ...column,\r\n            sortable: false,\r\n            cell: (row) =>\r\n              column.name === \"Actions\" ? (\r\n                <>\r\n                  <Skeleton\r\n                    sx={{ bgcolor: colors.dark.light }}\r\n                    animation=\"wave\"\r\n                    className=\"ms-2 me-1\"\r\n                    width={30}\r\n                    height={40}\r\n                  />\r\n                  <Skeleton\r\n                    sx={{ bgcolor: colors.dark.light }}\r\n                    animation=\"wave\"\r\n                    width={30}\r\n                    height={40}\r\n                  />\r\n                </>\r\n              ) : (\r\n                <Skeleton\r\n                  sx={{ bgcolor: colors.dark.light }}\r\n                  animation=\"wave\"\r\n                  width=\"100%\"\r\n                  height={40}\r\n                />\r\n              )\r\n          }))\r\n        : columns.map((column) => ({\r\n            name: t(column.name),\r\n            ...column\r\n          })),\r\n    [store.isLoading, columns]\r\n  )\r\n\r\n  const dataToRender = () => {\r\n    const filters = {\r\n      search: searchTerm\r\n    }\r\n    const isFiltered = Object.keys(filters).some(function (k) {\r\n      return filters[k].length > 0\r\n    })\r\n    if (!store.isLoading) {\r\n      if (store.data.length > 0) {\r\n        return store.data\r\n      } else if (store.data.length === 0 && isFiltered) {\r\n        return []\r\n      } else {\r\n        // console.log(store.allData)\r\n        // return store.allData.slice(0, rowsPerPage)\r\n      }\r\n    } else {\r\n      return Array(10).fill({})\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if ((store.data.length === 0 || getAlwaysGrid) && !store.isLoading) {\r\n      setLoadingText(`${t(\"Loading Data\")} ${t(pageTitle)}`)\r\n      dispatch(\r\n        getDataList({\r\n          sort_dir,\r\n          sort,\r\n          search: searchTerm,\r\n          page: currentPage,\r\n          length: rowsPerPage,\r\n          ...filtersCustom\r\n        })\r\n      )\r\n    }\r\n    // console.log(store)\r\n  }, [dispatch, store.data.length, sort_dir, sort, currentPage])\r\n\r\n  return (\r\n    <Fragment>\r\n      <UILoader blocking={loading} loader={<Loader />}>\r\n        <Card className=\"overflow-hidden\">\r\n          <div className=\"react-dataTable react-dataTable-selectable-rows\">\r\n            <DataTable\r\n              noHeader\r\n              subHeader\r\n              sortServer\r\n              responsive\r\n              pagination\r\n              paginationServer\r\n              paginationTotalRows={store.total}\r\n              paginationComponent={CustomPagination}\r\n              selectableRows={deleteSelection}\r\n              onSelectedRowsChange={handleRowSelected}\r\n              selectableRowsHighlight\r\n              clearSelectedRows={toggleCleared}\r\n              selectableRowsComponent={BootstrapCheckbox}\r\n              noDataComponent={<NoDataDisplay />}\r\n              style={{ \"min-height\": \"400px\" }}\r\n              highlightOnHover\r\n              pointerOnHover\r\n              columns={tableColumns}\r\n              conditionalRowStyles={conditionalRowStyles}\r\n              onSort={handleSort}\r\n              sortIcon={<ChevronDown />}\r\n              className=\"react-dataTable\"\r\n              data={dataToRender()}\r\n              subHeaderComponent={\r\n                <CustomHeader\r\n                  store={store}\r\n                  searchTerm={searchTerm}\r\n                  rowsPerPage={rowsPerPage}\r\n                  handleFilter={handleFilter}\r\n                  handlePerPage={handlePerPage}\r\n                  handleAddEdit={handleAddEdit}\r\n                  selectedRow={selectedRows}\r\n                  handleDeleteSelected={handleDeleteSelected}\r\n                  handleFiltersChange={handleFiltersChange}\r\n                  filtersCustomAdd={filtersCustomAdd}\r\n                />\r\n              }\r\n            />\r\n          </div>\r\n        </Card>\r\n\r\n        {/* <Sidebar open={sidebarOpen} toggleSidebar={toggleSidebar} /> */}\r\n      </UILoader>\r\n\r\n      {showModal && (\r\n        <ModalAddEdit\r\n          formState={formState}\r\n          show={showModal}\r\n          setShow={toggleSidebar}\r\n          detailPage={detailPage}\r\n          setFormState={setFormState}\r\n        />\r\n      )}\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default List\r\n"],"sourceRoot":""}