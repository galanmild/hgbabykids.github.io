{"version":3,"sources":["views/pages/authentication/register-multi-steps/steps/AccountDetails.js"],"names":["ToastContent","x","name","message","className","size","color","icon","onClick","toast","dismiss","id","ToastErrorContent","defaultValues","email","username","password","confirmPassword","AccountDetails","stepper","t","useTranslation","useSkin","skin","useState","block","setBlock","setErrorInfo","setSuccessInfo","SignupSchema","yup","shape","required","min","max","matches","oneOf","useForm","resolver","yupResolver","control","handleSubmit","errors","formState","blocking","loader","onSubmit","data","Object","values","every","field","length","params","localStorage","getItem","useJwt","register","then","res","sessionStorage","setItem","register_token","next","catch","err","messageError","includes","response","error_reason","md","for","render","type","placeholder","invalid","label","htmlFor","mobile_number"],"mappings":"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","file":"static/js/159.7ede9ab0.chunk.js","sourcesContent":["import { useState, Fragment } from \"react\"\r\nimport useJwt from \"@src/auth/jwt/useJwt\"\r\nimport * as yup from \"yup\"\r\nimport { useForm, Controller } from \"react-hook-form\"\r\nimport { yupResolver } from \"@hookform/resolvers/yup\"\r\nimport { AlertCircle, Navigation, X, ChevronRight } from \"react-feather\"\r\nimport { Form, Label, Input, Row, Col, Button, FormFeedback } from \"reactstrap\"\r\nimport InputPasswordToggle from \"@components/input-password-toggle\"\r\nimport { useTranslation } from \"react-i18next\"\r\nimport toast from \"react-hot-toast\"\r\nimport Avatar from \"@components/avatar\"\r\nimport Spinner from \"@components/spinner/Fallback-spinner\"\r\nimport UILoader from \"@components/ui-loader\"\r\nimport { useSkin } from \"@hooks/useSkin\"\r\n\r\nconst ToastContent = ({ x, name, message }) => {\r\n  return (\r\n    <div className=\"d-flex\">\r\n      <div className=\"me-1\">\r\n        <Avatar size=\"sm\" color=\"info\" icon={<Navigation size={12} />} />\r\n      </div>\r\n      <div className=\"d-flex flex-column\">\r\n        <div className=\"d-flex justify-content-between\">\r\n          <h6>{name}</h6>\r\n          <X\r\n            size={12}\r\n            className=\"cursor-pointer\"\r\n            onClick={() => toast.dismiss(x.id)}\r\n          />\r\n        </div>\r\n        <span>{message}</span>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst ToastErrorContent = ({ x, name, message }) => {\r\n  return (\r\n    <div className=\"d-flex\">\r\n      <div className=\"me-1\">\r\n        <Avatar size=\"sm\" color=\"danger\" icon={<AlertCircle size={12} />} />\r\n      </div>\r\n      <div className=\"d-flex flex-column\">\r\n        <div className=\"d-flex justify-content-between\">\r\n          <h6>{name}</h6>\r\n          <X\r\n            size={12}\r\n            className=\"cursor-pointer\"\r\n            onClick={() => toast.dismiss(x.id)}\r\n          />\r\n        </div>\r\n        <span>{message}</span>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst defaultValues = {\r\n  email: \"\",\r\n  username: \"\",\r\n  password: \"\",\r\n  confirmPassword: \"\"\r\n}\r\n\r\nconst AccountDetails = ({ stepper }) => {\r\n  const { t } = useTranslation()\r\n  const { skin } = useSkin()\r\n  const [block, setBlock] = useState(false)\r\n  const [errorInfo, setErrorInfo] = useState(null)\r\n  const [successInfo, setSuccessInfo] = useState(null)\r\n\r\n  const SignupSchema = yup.object().shape({\r\n    username: yup\r\n      .string()\r\n      .required(\"Username is required\")\r\n      .min(4, \"Username must be at least 4 characters\")\r\n      .max(15, \"Username cannot exceed 15 characters\")\r\n      .matches(\r\n        /^[a-zA-Z0-9_]+$/,\r\n        \"Username can only contain letters, numbers, and underscores\"\r\n      ),\r\n    email: yup.string().email().required(),\r\n    password: yup.string().required(),\r\n    confirmPassword: yup\r\n      .string()\r\n      .required()\r\n      .oneOf([yup.ref(`password`), null], t(\"Passwords must match\"))\r\n  })\r\n\r\n  // ** Hooks\r\n\r\n  const {\r\n    control,\r\n    handleSubmit,\r\n    formState: { errors }\r\n  } = useForm({\r\n    defaultValues,\r\n    resolver: yupResolver(SignupSchema)\r\n  })\r\n\r\n  const onSubmit = (data) => {\r\n    if (Object.values(data).every((field) => field.length > 0)) {\r\n      let params = { ...data }\r\n      if (localStorage.getItem(\"dev\") !== null) {\r\n        params[\"device_id\"] = localStorage.getItem(\"dev\")\r\n        delete params[\"confirmPassword\"]\r\n      }\r\n      setBlock(true)\r\n      useJwt\r\n        .register(params)\r\n        .then((res) => {\r\n          const data = res.data\r\n          setBlock(false)\r\n          setSuccessInfo(data?.message)\r\n          sessionStorage.setItem(\"register_token\", data?.register_token)\r\n          toast((x) => (\r\n            <ToastContent\r\n              x={x}\r\n              name={t(\"Successfully\")}\r\n              message={data?.message}\r\n            />\r\n          ))\r\n          stepper.next()\r\n        })\r\n        .catch((err) => {\r\n          // console.log(err.response?.data?.message)\r\n          setBlock(false)\r\n          // console.log(err)\r\n          let messageError = `${t(\r\n            \"Failed. Please check your email and password and make sure your account is registered correctly. Contact our support team if needed.\"\r\n          )}`\r\n          if (\r\n            [\"email_taken\", \"username_taken\", \"email_await\"].includes(\r\n              err.response?.data?.error_reason\r\n            )\r\n          ) {\r\n            messageError = err.response?.data?.message\r\n          }\r\n          setErrorInfo(messageError)\r\n          toast((x) => (\r\n            <ToastErrorContent\r\n              x={x}\r\n              name={t(\"Register Failed\")}\r\n              message={messageError}\r\n              // message={`${t(err.message)}`}\r\n            />\r\n          ))\r\n        })\r\n    }\r\n  }\r\n\r\n  return (\r\n    <UILoader blocking={block} loader={<Spinner />}>\r\n      <Fragment>\r\n        <div className=\"content-header mb-2\">\r\n          <h2 className=\"fw-bolder mb-75\">{t(\"Account Information\")}</h2>\r\n          <span>\"{t(\"Enter your email password details\")}\"</span>\r\n        </div>\r\n        <Form onSubmit={handleSubmit(onSubmit)}>\r\n          <Row>\r\n            <Col md=\"6\" className=\"mb-1\">\r\n              <Label className=\"form-label\" for={`email`}>\r\n                Email\r\n              </Label>\r\n              <Controller\r\n                control={control}\r\n                id=\"email\"\r\n                name=\"email\"\r\n                render={({ field }) => (\r\n                  <Input\r\n                    type=\"email\"\r\n                    placeholder=\"john.doe@email.com\"\r\n                    invalid={errors.email && true}\r\n                    {...field}\r\n                  />\r\n                )}\r\n              />\r\n              {errors.email && (\r\n                <FormFeedback>{errors.email.message}</FormFeedback>\r\n              )}\r\n            </Col>\r\n            <Col md=\"6\" className=\"mb-1\">\r\n              <Label className=\"form-label\" for=\"username\">\r\n                Username\r\n              </Label>\r\n              <Controller\r\n                id=\"username\"\r\n                name=\"username\"\r\n                control={control}\r\n                render={({ field }) => (\r\n                  <Input\r\n                    placeholder=\"johndoe\"\r\n                    invalid={errors.username && true}\r\n                    {...field}\r\n                  />\r\n                )}\r\n              />\r\n              {errors.username && (\r\n                <FormFeedback>{errors.username.message}</FormFeedback>\r\n              )}\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <div className=\"form-password-toggle col-md-6 mb-1\">\r\n              <Controller\r\n                id=\"password\"\r\n                name=\"password\"\r\n                control={control}\r\n                render={({ field }) => (\r\n                  <InputPasswordToggle\r\n                    label={t(\"Password\")}\r\n                    htmlFor=\"password\"\r\n                    className=\"input-group-merge\"\r\n                    invalid={errors.password && true}\r\n                    {...field}\r\n                  />\r\n                )}\r\n              />\r\n              {errors.password && (\r\n                <FormFeedback>{errors.password.message}</FormFeedback>\r\n              )}\r\n            </div>\r\n            <div className=\"form-password-toggle col-md-6 mb-1\">\r\n              <Controller\r\n                control={control}\r\n                id=\"confirmPassword\"\r\n                name=\"confirmPassword\"\r\n                render={({ field }) => (\r\n                  <InputPasswordToggle\r\n                    label={t(\"Confirm Password\")}\r\n                    htmlFor=\"confirmPassword\"\r\n                    className=\"input-group-merge\"\r\n                    invalid={errors.confirmPassword && true}\r\n                    {...field}\r\n                  />\r\n                )}\r\n              />\r\n              {errors.confirmPassword && (\r\n                <FormFeedback>{errors.confirmPassword.message}</FormFeedback>\r\n              )}\r\n            </div>\r\n          </Row>\r\n          <Row>\r\n            <Col md=\"6\" className=\"mb-1\">\r\n              <Label className=\"form-label\" for=\"name\">\r\n                {t(\"Name\")}\r\n              </Label>\r\n              <Controller\r\n                id=\"name\"\r\n                name=\"name\"\r\n                control={control}\r\n                render={({ field }) => (\r\n                  <Input\r\n                    placeholder=\"John\"\r\n                    invalid={errors.name && true}\r\n                    {...field}\r\n                  />\r\n                )}\r\n              />\r\n              {errors.name && (\r\n                <FormFeedback>{errors.name.message}</FormFeedback>\r\n              )}\r\n            </Col>\r\n            <Col md=\"6\" className=\"mb-1\">\r\n              <Label className=\"form-label\" for=\"mobile_number\">\r\n                {t(\"Mobile Number\")}\r\n              </Label>\r\n              <Controller\r\n                id=\"mobile_number\"\r\n                name=\"mobile_number\"\r\n                control={control}\r\n                render={({ field }) => (\r\n                  <Input\r\n                    type=\"number\"\r\n                    id=\"phone\"\r\n                    name=\"mobile_number\"\r\n                    placeholder=\"(472) 765-3654\"\r\n                    invalid={errors.mobile_number && true}\r\n                    {...field}\r\n                  />\r\n                )}\r\n              />\r\n              {errors.mobile_number && (\r\n                <FormFeedback>{errors.mobile_number.message}</FormFeedback>\r\n              )}\r\n            </Col>\r\n          </Row>\r\n          {/* <Row>\r\n          <Col sm={12} className=\"mb-1\">\r\n            <Label className=\"form-label\" for=\"profile-link\">\r\n              Profile Link\r\n            </Label>\r\n            <Input id=\"profile-link\" placeholder=\"johndoe/profile\" />\r\n          </Col>\r\n          <Col sm={12} className=\"mb-1\">\r\n            <div className=\"form-check form-check-inline\">\r\n              <Input type=\"checkbox\" id=\"remember-me\" />\r\n              <Label for=\"remember-me\" className=\"form-check-label\">\r\n                {t(\"Remember Me\")}\r\n              </Label>\r\n            </div>\r\n          </Col>\r\n        </Row> */}\r\n          <div className=\"d-flex justify-content-end mt-2\">\r\n            {/* <Button color=\"secondary\" className=\"btn-prev\" outline disabled>\r\n            <ChevronLeft\r\n              size={14}\r\n              className=\"align-middle me-sm-25 me-0\"\r\n            ></ChevronLeft>\r\n            <span className=\"align-middle d-sm-inline-block d-none\">\r\n              {t(\"Previous\")}\r\n            </span>\r\n          </Button> */}\r\n            <Button type=\"submit\" color=\"primary\" className=\"btn-next\">\r\n              <span className=\"align-middle d-sm-inline-block d-none\">\r\n                {t(\"Next\")}\r\n              </span>\r\n              <ChevronRight\r\n                size={14}\r\n                className=\"align-middle ms-sm-25 ms-0\"\r\n              ></ChevronRight>\r\n            </Button>\r\n          </div>\r\n        </Form>\r\n      </Fragment>\r\n    </UILoader>\r\n  )\r\n}\r\n\r\nexport default AccountDetails\r\n"],"sourceRoot":""}