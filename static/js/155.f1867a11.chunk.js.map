{"version":3,"sources":["views/apps/unit_app/Table.js"],"names":["MySwal","withReactContent","Swal","BootstrapCheckbox","forwardRef","props","ref","className","type","CustomHeader","store","toggleSidebar","handlePerPage","rowsPerPage","handleFilter","searchTerm","selectedRow","handleDeleteSelected","t","useTranslation","ability","useContext","AbilityContext","dispatch","useDispatch","userData","useSelector","state","invoices","getUserData","xl","htmlFor","id","value","onChange","style","width","length","can","sessionStorage","getItem","color","onClick","pageTitle","e","target","caret","outline","getInvoice","rpt_name","output_type","dataYear","print","as_attachment","par_UNITKEY","par_SAMPLE","List","storeName","storeApp","apps_app","colors","ThemeColors","useState","sort_dir","setSortDir","setSearchTerm","currentPage","setCurrentPage","sort","setSort","setRowsPerPage","selectedRows","setSelectedRows","toggleCleared","setToggleCleared","sidebarOpen","setSidebarOpen","loading","setLoading","setLoadingText","showModal","setShowModal","formState","setFormState","handleEdit","rowData","detailFromGrid","setDataById","then","data","isLoading","getDataListApp","res","getDataById","meta","requestStatus","toast","error","payload","message","padding","danger","main","border","iconTheme","primary","handleCloseModal","revivalBack","neutralizeBack","handleDelete","fire","title","text","icon","showCancelButton","confirmButtonText","cancelButtonText","customClass","confirmButton","cancelButton","buttonsStyling","deleteData","success","a","countSelectedCopy","values","map","deleteSelectedRowData","debounceFn","useCallback","debounce","inputValue","getDataList","search","page","handleRowSelected","columns","dynamicColumns","column","name","columnName","sortField","fieldName","center","sortable","selector","row","cell","field","dataFormat","includes","columnTypeFormat","split","columnType","columnFormat","columnFormated","Moment","format","renderCell","domain","href","app_logo","img","height","imgHeight","imgWidth","initials","content","app_name","unit_logo","unit_name","attributes","app_name_alias","description","tableColumns","useMemo","sx","bgcolor","dark","light","animation","useEffect","getAlwaysGrid","blocking","loader","noHeader","subHeader","sortServer","responsive","pagination","paginationServer","paginationTotalRows","total","paginationComponent","count","Number","Math","ceil","previousLabel","nextLabel","pageCount","activeClassName","forcePage","onPageChange","selected","handlePagination","pageClassName","nextLinkClassName","nextClassName","previousClassName","previousLinkClassName","pageLinkClassName","containerClassName","selectableRows","onSelectedRowsChange","selectableRowsHighlight","clearSelectedRows","selectableRowsComponent","noDataComponent","highlightOnHover","pointerOnHover","onSort","sortDirection","sortIcon","filters","isFiltered","Object","keys","some","k","Array","fill","dataToRender","subHeaderComponent","event","parseInt","currentTarget","show","setShow","detailPage"],"mappings":"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","file":"static/js/155.f1867a11.chunk.js","sourcesContent":["/* eslint-disable implicit-arrow-linebreak */\r\n/* eslint-disable no-confusing-arrow */\r\n/* eslint-disable multiline-ternary */\r\nimport {\r\n  Fragment,\r\n  useState,\r\n  useEffect,\r\n  useContext,\r\n  useMemo,\r\n  useCallback,\r\n  forwardRef\r\n} from \"react\"\r\nimport { useTranslation } from \"react-i18next\"\r\nimport { AbilityContext } from \"@src/utility/context/Can\"\r\nimport ModalAddEdit from \"./modal\"\r\nimport { neutralizeBack, revivalBack } from \"@src/utility/Utils\"\r\nimport {\r\n  storeName,\r\n  pageTitle,\r\n  serverSideGrid,\r\n  detailFromGrid,\r\n  getApiAfterPut,\r\n  getApiAfterPost,\r\n  getApiAfterDelete,\r\n  getSummarysData,\r\n  getAlwaysGrid,\r\n  getDataList,\r\n  getDataById,\r\n  setDataById,\r\n  deleteData,\r\n  deleteSelectedRowData\r\n} from \"./store\"\r\nimport { getDataList as getDataListApp } from \"../app/store\"\r\nimport { getInvoice } from \"../../invoices/store\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport ReactPaginate from \"react-paginate\"\r\nimport DataTable from \"react-data-table-component\"\r\nimport debounce from \"lodash.debounce\"\r\nimport {\r\n  ChevronDown,\r\n  Share,\r\n  Printer,\r\n  FileText,\r\n  File,\r\n  Grid\r\n} from \"react-feather\"\r\n\r\nimport { getUserData } from \"@utils\"\r\n\r\nimport UILoader from \"@components/ui-loader\"\r\nimport Spinner from \"@components/spinner/Loading-spinner\"\r\nimport { ThemeColors } from \"@src/utility/context/ThemeColors\"\r\nimport toast from \"react-hot-toast\"\r\nimport {\r\n  Row,\r\n  Col,\r\n  Card,\r\n  Input,\r\n  Button,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  DropdownToggle,\r\n  UncontrolledDropdown,\r\n  CardText\r\n} from \"reactstrap\"\r\n\r\nimport \"@styles/react/libs/react-select/_react-select.scss\"\r\nimport \"@styles/react/libs/tables/react-dataTable-component.scss\"\r\nimport Swal from \"sweetalert2\"\r\nimport withReactContent from \"sweetalert2-react-content\"\r\nimport { Skeleton } from \"@mui/material\"\r\nimport Moment from \"moment\"\r\nimport GlobalActionsTable from \"../../../shared/GlobaActionsTable\"\r\n\r\nimport { NoDataDisplay, Loader } from \"@src/shared/CommonComponents\"\r\nimport Avatar from \"@components/avatar\"\r\nimport { Link } from \"react-router-dom\"\r\nconst MySwal = withReactContent(Swal)\r\n\r\n// ** Bootstrap Checkbox Component\r\nconst BootstrapCheckbox = forwardRef((props, ref) => (\r\n  <div className=\"form-check\">\r\n    <Input type=\"checkbox\" ref={ref} {...props} />\r\n  </div>\r\n))\r\n\r\n// ** Table Header\r\nconst CustomHeader = ({\r\n  store,\r\n  toggleSidebar,\r\n  handlePerPage,\r\n  rowsPerPage,\r\n  handleFilter,\r\n  searchTerm,\r\n  selectedRow,\r\n  handleDeleteSelected\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const ability = useContext(AbilityContext)\r\n  const dispatch = useDispatch()\r\n  const storeInvoice = useSelector((state) => state.invoices)\r\n  const userData = getUserData()\r\n\r\n  return (\r\n    <div className=\"invoice-list-table-header w-100 me-1 ms-50 mt-2 mb-75\">\r\n      <Row>\r\n        <Col xl=\"4\" className=\"d-flex align-items-center p-0\">\r\n          <div className=\"d-flex align-items-center w-100\">\r\n            <label htmlFor=\"rows-per-page\">{t(\"Show\")}</label>\r\n            <Input\r\n              className=\"mx-50\"\r\n              type=\"select\"\r\n              id=\"rows-per-page\"\r\n              value={rowsPerPage}\r\n              onChange={handlePerPage}\r\n              style={{ width: \"5rem\" }}\r\n            >\r\n              <option value=\"10\">10</option>\r\n              <option value=\"25\">25</option>\r\n              <option value=\"50\">50</option>\r\n            </Input>\r\n            <label htmlFor=\"rows-per-page\">{t(\"Entries\")}</label>\r\n          </div>\r\n        </Col>\r\n        <Col\r\n          xl=\"8\"\r\n          className=\"d-flex align-items-sm-center justify-content-xl-end justify-content-start flex-xl-nowrap flex-wrap flex-sm-row flex-column pe-xl-1 p-0 mt-xl-0 mt-1\"\r\n        >\r\n          {selectedRow?.length > 0 &&\r\n          ability.can(\"delete\", sessionStorage.getItem(\"current_page_perm\")) ? (\r\n            <div className=\"d-flex align-items-center mb-sm-0 mb-1 me-1\">\r\n              <Button\r\n                className=\"delete-users\"\r\n                color=\"danger\"\r\n                onClick={handleDeleteSelected}\r\n              >\r\n                {t(\"Delete\")} {selectedRow.length} {t(`Selected ${pageTitle}`)}\r\n              </Button>\r\n            </div>\r\n          ) : null}\r\n          <div className=\"d-flex align-items-center mb-sm-0 mb-1 me-1\">\r\n            <label className=\"mb-0\" htmlFor=\"search-invoice\">\r\n              {t(\"Search\")}:\r\n            </label>\r\n            <Input\r\n              id=\"search-invoice\"\r\n              className=\"ms-50 w-100\"\r\n              type=\"text\"\r\n              value={searchTerm}\r\n              onChange={(e) => handleFilter(e.target.value)}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"d-flex align-items-center table-header-actions\">\r\n            <UncontrolledDropdown className=\"me-1\">\r\n              <DropdownToggle color=\"secondary\" caret outline>\r\n                <Share className=\"font-small-4 me-50\" />\r\n                <span className=\"align-middle\">{t(\"Export\")}</span>\r\n              </DropdownToggle>\r\n              <DropdownMenu>\r\n                <DropdownItem\r\n                  className=\"w-100\"\r\n                  onClick={() =>\r\n                    dispatch(\r\n                      getInvoice({\r\n                        rpt_name: \"sample\",\r\n                        output_type: \"pdf\",\r\n                        dataYear: userData.dataYear,\r\n                        print: true,\r\n                        as_attachment: true,\r\n                        par_UNITKEY: 139,\r\n                        par_SAMPLE: \"ahh...ini adalah sample parameter\"\r\n                      })\r\n                    )\r\n                  }\r\n                >\r\n                  <Printer className=\"font-small-4 me-50\" />\r\n                  <span className=\"align-middle\">{t(\"Print\")}</span>\r\n                </DropdownItem>\r\n                <DropdownItem\r\n                  className=\"w-100\"\r\n                  onClick={() =>\r\n                    dispatch(\r\n                      getInvoice({\r\n                        rpt_name: \"sample\",\r\n                        output_type: \"pdf\",\r\n                        dataYear: userData.dataYear,\r\n                        par_UNITKEY: 139,\r\n                        par_SAMPLE: \"ahh...ini adalah sample parameter\"\r\n                      })\r\n                    )\r\n                  }\r\n                >\r\n                  <File className=\"font-small-4 me-50\" />\r\n                  <span className=\"align-middle\">PDF</span>\r\n                </DropdownItem>\r\n\r\n                <DropdownItem\r\n                  className=\"w-100\"\r\n                  onClick={() =>\r\n                    dispatch(\r\n                      getInvoice({\r\n                        rpt_name: \"sample\",\r\n                        output_type: \"xls\",\r\n                        dataYear: userData.dataYear,\r\n                        as_attachment: true,\r\n                        par_UNITKEY: 139,\r\n                        par_SAMPLE: \"ahh...ini adalah sample parameter\"\r\n                      })\r\n                    )\r\n                  }\r\n                >\r\n                  <Grid className=\"font-small-4 me-50\" />\r\n                  <span className=\"align-middle\">Excel</span>\r\n                </DropdownItem>\r\n\r\n                <DropdownItem\r\n                  className=\"w-100\"\r\n                  // onClick={() => downloadCSV(store.data)}\r\n                  onClick={() =>\r\n                    dispatch(\r\n                      getInvoice({\r\n                        rpt_name: \"sample\",\r\n                        output_type: \"csv\",\r\n                        dataYear: userData.dataYear,\r\n                        as_attachment: true,\r\n                        par_UNITKEY: 139,\r\n                        par_SAMPLE: \"ahh...ini adalah sample parameter\"\r\n                      })\r\n                    )\r\n                  }\r\n                >\r\n                  <FileText className=\"font-small-4 me-50\" />\r\n                  <span className=\"align-middle\">CSV</span>\r\n                </DropdownItem>\r\n\r\n                {/* <DropdownItem className=\"w-100\">\r\n                  <Copy className=\"font-small-4 me-50\" />\r\n                  <span className=\"align-middle\">Copy</span>\r\n                </DropdownItem> */}\r\n              </DropdownMenu>\r\n            </UncontrolledDropdown>\r\n\r\n            {ability.can(\r\n              \"post\",\r\n              sessionStorage.getItem(\"current_page_perm\")\r\n            ) ? (\r\n              <Button\r\n                className=\"add-new-user\"\r\n                color=\"primary\"\r\n                onClick={toggleSidebar}\r\n                // onClick={handleAdd}\r\n              >\r\n                {t(\"Add New\")} {t(pageTitle)}\r\n              </Button>\r\n            ) : null}\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst List = () => {\r\n  const dispatch = useDispatch()\r\n  const store = useSelector((state) => state[storeName])\r\n  const storeApp = useSelector((state) => state.apps_app)\r\n  const { t } = useTranslation()\r\n  const ability = useContext(AbilityContext)\r\n\r\n  const { colors } = useContext(ThemeColors)\r\n  const [sort_dir, setSortDir] = useState(\"desc\")\r\n  const [searchTerm, setSearchTerm] = useState(\"\")\r\n  const [currentPage, setCurrentPage] = useState(1)\r\n  const [sort, setSort] = useState(\"id\")\r\n  const [rowsPerPage, setRowsPerPage] = useState(10)\r\n  const [selectedRows, setSelectedRows] = useState([])\r\n  const [toggleCleared, setToggleCleared] = useState(false)\r\n\r\n  const [sidebarOpen, setSidebarOpen] = useState(false)\r\n  const [loading, setLoading] = useState(false)\r\n  const [loadingText, setLoadingText] = useState(\"Please Wait\")\r\n  const [showModal, setShowModal] = useState(false)\r\n  const [formState, setFormState] = useState(null)\r\n\r\n  const handleEdit = (rowData) => {\r\n    setFormState(\"edit\")\r\n    if (!detailFromGrid) {\r\n      setLoadingText(\r\n        `${t(\"Loading\")} ${t(\"Detail\")} ${t(\"Data\")} ${t(pageTitle)}`\r\n      )\r\n      setLoading(true)\r\n      dispatch(getDataById(rowData.id)).then((res) => {\r\n        if (res.meta.requestStatus === \"rejected\") {\r\n          setLoading(false)\r\n          toast.error(res.payload.message, {\r\n            style: {\r\n              padding: \"16px\",\r\n              color: colors.danger.main,\r\n              border: `1px solid ${colors.danger.main}`\r\n            },\r\n            iconTheme: {\r\n              primary: colors.danger.main\r\n            }\r\n          })\r\n        } else {\r\n          setLoading(false)\r\n          setShowModal(true)\r\n        }\r\n      })\r\n    } else {\r\n      setLoadingText(\r\n        `${t(\"Loading\")} ${t(\"Detail\")} ${t(\"Data\")} ${t(pageTitle)}`\r\n      )\r\n      setLoading(true)\r\n      dispatch(setDataById(rowData)).then(() => {\r\n        if (storeApp.data.length === 0 && !storeApp.isLoading) {\r\n          dispatch(getDataListApp({})).then((res) => {\r\n            setLoading(false)\r\n            setShowModal(true)\r\n          })\r\n        } else {\r\n          setLoading(false)\r\n          setShowModal(true)\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  const handleCloseModal = () => {\r\n    setSidebarOpen(!sidebarOpen)\r\n    setShowModal(!showModal)\r\n    revivalBack()\r\n  }\r\n\r\n  const toggleSidebar = () => {\r\n    // console.log(\"here\")\r\n    setFormState(\"add\")\r\n    setSidebarOpen(!sidebarOpen)\r\n    setShowModal(!showModal)\r\n    neutralizeBack(handleCloseModal)\r\n  }\r\n\r\n  const handleDelete = async (id) => {\r\n    const result = await MySwal.fire({\r\n      title: `${t(\"Are you sure?\")}`,\r\n      text: `${t(\"You won't be able to revert\")} ${t(pageTitle)}!`,\r\n      icon: \"warning\",\r\n      showCancelButton: true,\r\n      confirmButtonText: `${t(\"Yes, Delete\")} ${t(pageTitle)}!`,\r\n      cancelButtonText: `${t(\"Cancel\")}`,\r\n      customClass: {\r\n        confirmButton: \"btn btn-primary\",\r\n        cancelButton: \"btn btn-outline-danger ms-1\"\r\n      },\r\n      buttonsStyling: false\r\n    })\r\n    if (result.value) {\r\n      setLoadingText(`${t(\"Deleting\")} Data ${t(pageTitle)}`)\r\n      setLoading(true)\r\n      dispatch(deleteData(id)).then((res) => {\r\n        // console.log(res)\r\n        if (res.meta.requestStatus === \"fulfilled\") {\r\n          setLoading(false)\r\n          toast.success(`${t(\"Successfully deleted\")} ${t(pageTitle)}`, {\r\n            style: {\r\n              padding: \"16px\",\r\n              color: colors.success.main,\r\n              border: `1px solid ${colors.success.main}`\r\n            },\r\n            iconTheme: {\r\n              primary: colors.success.main\r\n            }\r\n          })\r\n        } else if (res.meta.requestStatus === \"rejected\") {\r\n          setLoading(false)\r\n          toast.error(res.payload.message, {\r\n            style: {\r\n              padding: \"16px\",\r\n              color: colors.danger.main,\r\n              border: `1px solid ${colors.danger.main}`\r\n            },\r\n            iconTheme: {\r\n              primary: colors.danger.main\r\n            }\r\n          })\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  const handleDeleteSelected = async () => {\r\n    const countSelectedCopy = selectedRows.length\r\n    const result = await MySwal.fire({\r\n      title: `${t(\"Are you sure?\")}`,\r\n      text: `${t(\"You will delete\")} ${countSelectedCopy} ${t(\r\n        \"selected data. Deleted data cannot be recovered\"\r\n      )}!`,\r\n      icon: \"warning\",\r\n      showCancelButton: true,\r\n      confirmButtonText: `${t(\"Yes, Delete\")} ${countSelectedCopy} ${t(\r\n        pageTitle\r\n      )}!`,\r\n      cancelButtonText: `${t(\"Cancel\")}`,\r\n      customClass: {\r\n        confirmButton: \"btn btn-primary\",\r\n        cancelButton: \"btn btn-outline-danger ms-1\"\r\n      },\r\n      buttonsStyling: false\r\n    })\r\n    if (result.value) {\r\n      setLoadingText(\r\n        `${t(\"Deleting\")} ${countSelectedCopy} Data ${t(pageTitle)}`\r\n      )\r\n      setLoading(true)\r\n      const values = selectedRows.map((a) => a.id)\r\n      // console.log(values)\r\n      dispatch(deleteSelectedRowData({ id: values })).then((res) => {\r\n        // console.log(res)\r\n        if (res.meta.requestStatus === \"fulfilled\") {\r\n          setSelectedRows([])\r\n          setToggleCleared(!toggleCleared)\r\n          setLoading(false)\r\n          toast.success(\r\n            `${t(\"Successfully deleted\")} ${countSelectedCopy} ${t(pageTitle)}`,\r\n            {\r\n              style: {\r\n                padding: \"16px\",\r\n                color: colors.success.main,\r\n                border: `1px solid ${colors.success.main}`\r\n              },\r\n              iconTheme: {\r\n                primary: colors.success.main\r\n              }\r\n            }\r\n          )\r\n        } else if (res.meta.requestStatus === \"rejected\") {\r\n          setLoading(false)\r\n          toast.error(res.payload.message, {\r\n            style: {\r\n              padding: \"16px\",\r\n              color: colors.danger.main,\r\n              border: `1px solid ${colors.danger.main}`\r\n            },\r\n            iconTheme: {\r\n              primary: colors.danger.main\r\n            }\r\n          })\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  /////PAGINATION SERVERSIDE\r\n  const handlePagination = (page) => {\r\n    dispatch(\r\n      getDataList({\r\n        sort_dir,\r\n        sort,\r\n        search: searchTerm,\r\n        length: rowsPerPage,\r\n        page: page.selected + 1\r\n      })\r\n    )\r\n    setCurrentPage(page.selected + 1)\r\n  }\r\n\r\n  const handlePerPage = (e) => {\r\n    const value = parseInt(e.currentTarget.value)\r\n    dispatch(\r\n      getDataList({\r\n        sort_dir,\r\n        sort,\r\n        search: searchTerm,\r\n        length: value,\r\n        page: currentPage\r\n      })\r\n    )\r\n    setRowsPerPage(value)\r\n  }\r\n\r\n  const handleDebounceFn = (inputValue) => {\r\n    dispatch(\r\n      getDataList({\r\n        sort_dir,\r\n        search: inputValue,\r\n        sort,\r\n        page: currentPage,\r\n        length: rowsPerPage\r\n      })\r\n    )\r\n  }\r\n\r\n  const debounceFn = useCallback(debounce(handleDebounceFn, 500), [])\r\n\r\n  const handleFilter = (event) => {\r\n    setSearchTerm(event)\r\n    debounceFn(event)\r\n  }\r\n\r\n  const handleSort = (column, sortDirection) => {\r\n    setSortDir(sortDirection)\r\n    setSort(column.sortField)\r\n    dispatch(\r\n      getDataList({\r\n        sort_dir,\r\n        sort,\r\n        search: searchTerm,\r\n        page: currentPage,\r\n        length: rowsPerPage\r\n      })\r\n    )\r\n  }\r\n\r\n  const handleRowSelected = useCallback((state) => {\r\n    setSelectedRows(state.selectedRows)\r\n  }, [])\r\n\r\n  const CustomPagination = () => {\r\n    const count = Number(Math.ceil(store.total / rowsPerPage))\r\n\r\n    return (\r\n      <ReactPaginate\r\n        previousLabel={\"\"}\r\n        nextLabel={\"\"}\r\n        pageCount={count || 1}\r\n        activeClassName=\"active\"\r\n        forcePage={currentPage !== 0 ? currentPage - 1 : 0}\r\n        onPageChange={(page) => handlePagination(page)}\r\n        pageClassName={\"page-item\"}\r\n        nextLinkClassName={\"page-link\"}\r\n        nextClassName={\"page-item next\"}\r\n        previousClassName={\"page-item prev\"}\r\n        previousLinkClassName={\"page-link\"}\r\n        pageLinkClassName={\"page-link\"}\r\n        containerClassName={\r\n          \"pagination react-paginate justify-content-end my-2 pe-1\"\r\n        }\r\n      />\r\n    )\r\n  }\r\n\r\n  const renderCell = (row, column) => {\r\n    const field = row[column.fieldName]\r\n    const dataFormat = column.dataFormat\r\n    if (dataFormat) {\r\n      if (dataFormat.includes(\":\")) {\r\n        const columnTypeFormat = dataFormat.split(\":\")\r\n        const columnType = columnTypeFormat[0]\r\n        const columnFormat = columnTypeFormat[1]\r\n        let columnFormated = row[column.fieldName]\r\n        if (columnType === \"date\") {\r\n          columnFormated = Moment(field).format(\"DD MMM YYYY\")\r\n          if (columnFormat) {\r\n            columnFormated = Moment(field).format(columnFormat)\r\n          }\r\n        }\r\n        if (columnType === \"datetime\") {\r\n          columnFormated = Moment(field).format(\"DD MMM YYYY HH:mm\")\r\n          if (columnFormat) {\r\n            columnFormated = Moment(field).format(columnFormat)\r\n          }\r\n        }\r\n        return columnFormated\r\n      }\r\n    }\r\n    return row[column.fieldName]\r\n  }\r\n\r\n  const columns = [\r\n    ...store.dynamicColumns.map((column) => ({\r\n      name: column.columnName,\r\n      sortField: column.fieldName,\r\n      center: false,\r\n      sortable: true,\r\n      selector: (row) => row[column.fieldName],\r\n      cell: (row) => renderCell(row, column)\r\n    })),\r\n    {\r\n      name: t(\"Domain\"),\r\n      center: false,\r\n      sortable: false,\r\n      selector: (row) => row.domain,\r\n      cell: (row) => (\r\n        <a target=\"_blank\" href={row.domain} title={row.domain}>\r\n          {row.domain}\r\n        </a>\r\n      )\r\n    },\r\n    {\r\n      name: t(\"App\"),\r\n      center: false,\r\n      sortable: false,\r\n      selector: (row) => row?.app_logo,\r\n      cell: (row) => (\r\n        <div className=\"d-flex justify-content-left align-items-center\">\r\n          {row?.app_logo ? (\r\n            <Avatar\r\n              className=\"me-1\"\r\n              img={row?.app_logo}\r\n              width=\"32\"\r\n              height=\"32\"\r\n              imgHeight=\"25\"\r\n              imgWidth=\"30\"\r\n              color={\"light-primary\"}\r\n            />\r\n          ) : (\r\n            <Avatar\r\n              initials\r\n              className=\"me-1\"\r\n              // color={row.avatarColor}\r\n              content={row?.app_name ?? \"\"}\r\n            />\r\n          )}\r\n\r\n          <div className=\"d-flex flex-column\">\r\n            <span className=\"fw-bolder\">{row.app_name}</span>\r\n          </div>\r\n        </div>\r\n      )\r\n    },\r\n    {\r\n      name: t(\"Unit\"),\r\n      center: false,\r\n      sortable: false,\r\n      selector: (row) => row?.unit_logo,\r\n      cell: (row) => (\r\n        <div className=\"d-flex justify-content-left align-items-center\">\r\n          {row?.unit_logo ? (\r\n            <Avatar\r\n              className=\"me-1\"\r\n              img={row?.unit_logo}\r\n              width=\"32\"\r\n              height=\"32\"\r\n              imgHeight=\"30\"\r\n              imgWidth=\"30\"\r\n              color={\"light-primary\"}\r\n            />\r\n          ) : (\r\n            <Avatar\r\n              color={\"light-primary\"}\r\n              initials\r\n              className=\"me-1\"\r\n              content={row?.unit_name ?? \"\"}\r\n            />\r\n          )}\r\n\r\n          <div className=\"d-flex flex-column\">\r\n            <span className=\"fw-bolder\">{row?.unit_name}</span>\r\n          </div>\r\n        </div>\r\n      )\r\n    },\r\n    {\r\n      name: t(\"App Alias\"),\r\n      sortField: \"attributes\",\r\n      center: false,\r\n      sortable: false,\r\n      selector: (row) => row.attributes?.app_name_alias,\r\n      cell: (row) => (\r\n        <div className=\"d-flex justify-content-left align-items-center\">\r\n          {row.attributes?.app_logo ? (\r\n            <Avatar\r\n              className=\"me-1\"\r\n              img={row?.app_logo}\r\n              width=\"32\"\r\n              height=\"32\"\r\n              imgHeight=\"30\"\r\n              imgWidth=\"30\"\r\n              color={\"light-primary\"}\r\n            />\r\n          ) : (\r\n            row?.attributes?.app_logo && (\r\n              <Avatar\r\n                initials\r\n                className=\"me-1\"\r\n                width=\"32\"\r\n                height=\"32\"\r\n                imgHeight=\"30\"\r\n                imgWidth=\"30\"\r\n                color={\"light-primary\"}\r\n                content={row?.attributes?.app_name_alias ?? \"\"}\r\n              />\r\n            )\r\n          )}\r\n\r\n          <div className=\"d-flex flex-column\">\r\n            <span className=\"fw-bolder\">{row.attributes?.app_name_alias}</span>\r\n          </div>\r\n        </div>\r\n      )\r\n    },\r\n    {\r\n      name: t(\"Description\"),\r\n      sortField: \"description\",\r\n      center: false,\r\n      sortable: false,\r\n      selector: (row) => row.attributes?.app_name_alias,\r\n      cell: (row) => row.description\r\n    },\r\n    {\r\n      name: t(\"Actions\"),\r\n      center: true,\r\n      width: \"140px\",\r\n      cell: (row) => (\r\n        <GlobalActionsTable\r\n          row={row}\r\n          handleDelete={handleDelete}\r\n          handleEdit={handleEdit}\r\n        />\r\n      )\r\n    }\r\n  ]\r\n\r\n  const tableColumns = useMemo(\r\n    () =>\r\n      store.isLoading\r\n        ? columns.map((column) => ({\r\n            name: t(column.name),\r\n            ...column,\r\n            sortable: false,\r\n            cell: (row) =>\r\n              column.name === \"Actions\" ? (\r\n                <>\r\n                  <Skeleton\r\n                    sx={{ bgcolor: colors.dark.light }}\r\n                    animation=\"wave\"\r\n                    className=\"ms-2 me-1\"\r\n                    width={30}\r\n                    height={40}\r\n                  />\r\n                  <Skeleton\r\n                    sx={{ bgcolor: colors.dark.light }}\r\n                    animation=\"wave\"\r\n                    width={30}\r\n                    height={40}\r\n                  />\r\n                </>\r\n              ) : (\r\n                <Skeleton\r\n                  sx={{ bgcolor: colors.dark.light }}\r\n                  animation=\"wave\"\r\n                  width=\"100%\"\r\n                  height={40}\r\n                />\r\n              )\r\n          }))\r\n        : columns.map((column) => ({\r\n            name: t(column.name),\r\n            ...column\r\n          })),\r\n    [store.isLoading, columns]\r\n  )\r\n\r\n  const dataToRender = () => {\r\n    const filters = {\r\n      search: searchTerm\r\n    }\r\n    const isFiltered = Object.keys(filters).some(function (k) {\r\n      return filters[k].length > 0\r\n    })\r\n    if (!store.isLoading) {\r\n      if (store.data.length > 0) {\r\n        return store.data\r\n      } else if (store.data.length === 0 && isFiltered) {\r\n        return []\r\n      } else {\r\n        // console.log(store.allData)\r\n        // return store.allData.slice(0, rowsPerPage)\r\n      }\r\n    } else {\r\n      return Array(10).fill({})\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (store.data.length === 0 || (!store.isLoading && getAlwaysGrid)) {\r\n      setLoadingText(`${t(\"Loading Data\")} ${t(pageTitle)}`)\r\n      dispatch(\r\n        getDataList({\r\n          sort_dir,\r\n          sort,\r\n          search: searchTerm,\r\n          page: currentPage,\r\n          length: rowsPerPage\r\n        })\r\n      )\r\n    }\r\n  }, [dispatch, store.data.length, sort_dir, sort, currentPage])\r\n\r\n  return (\r\n    <Fragment>\r\n      <UILoader blocking={loading} loader={<Loader />}>\r\n        <Card className=\"overflow-hidden\">\r\n          <div className=\"react-dataTable react-dataTable-selectable-rows\">\r\n            <DataTable\r\n              noHeader\r\n              subHeader\r\n              sortServer\r\n              responsive\r\n              pagination\r\n              paginationServer\r\n              paginationTotalRows={store.total}\r\n              paginationComponent={CustomPagination}\r\n              selectableRows\r\n              onSelectedRowsChange={handleRowSelected}\r\n              selectableRowsHighlight\r\n              // onRowClicked={handleRowSelected}\r\n              clearSelectedRows={toggleCleared}\r\n              selectableRowsComponent={BootstrapCheckbox}\r\n              noDataComponent={<NoDataDisplay />}\r\n              // fixedHeader\r\n              // fixedHeaderScrollHeight=\"600px\"\r\n              style={{ \"min-height\": \"400px\" }}\r\n              highlightOnHover\r\n              pointerOnHover\r\n              columns={tableColumns}\r\n              onSort={handleSort}\r\n              sortIcon={<ChevronDown />}\r\n              className=\"react-dataTable\"\r\n              data={dataToRender()}\r\n              subHeaderComponent={\r\n                <CustomHeader\r\n                  store={store}\r\n                  searchTerm={searchTerm}\r\n                  rowsPerPage={rowsPerPage}\r\n                  handleFilter={handleFilter}\r\n                  handlePerPage={handlePerPage}\r\n                  toggleSidebar={toggleSidebar}\r\n                  selectedRow={selectedRows}\r\n                  handleDeleteSelected={handleDeleteSelected}\r\n                />\r\n              }\r\n            />\r\n          </div>\r\n        </Card>\r\n\r\n        {/* <Sidebar open={sidebarOpen} toggleSidebar={toggleSidebar} /> */}\r\n      </UILoader>\r\n\r\n      {showModal && (\r\n        <ModalAddEdit\r\n          formState={formState}\r\n          show={showModal}\r\n          setShow={toggleSidebar}\r\n          detailPage={false}\r\n          setFormState={setFormState}\r\n        />\r\n      )}\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default List\r\n"],"sourceRoot":""}