{"version":3,"sources":["views/apps/permission_menu/index.js","views/apps/permission_menu/DropDown.js"],"names":["List","filtersCustomAdd","lookupMode","lookupMode_fieldName","lookupMode_dropdown","lookupMode_isMulti","lookupMode_onChange","lookupMode_defaultValue","lookupMode_isM2MDefValFromGrid","lookupMode_defaultFilter","t","useTranslation","dispatch","useDispatch","store","useSelector","state","storeName","useState","useEffect","getApiSummaryData","dataSummary","length","isLoadingSummary","getAlwaysGrid","getSummaryData","colors","className","title","pageTitle","data","map","item","index","color","statTitle","icon","baseClassName","fontSize","renderStats","sx","bgcolor","animation","height","width","count_format","count","isLoading","getDataList","theme","selectThemeColors","defaultValue","dataDropdown","filter","el","value","isMulti","onChange","e","options","classnames","selectedData","id","classNamePrefix"],"mappings":"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","file":"static/js/56.2bbb11bc.chunk.js","sourcesContent":["import { Fragment, useEffect, useState } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { useTranslation } from \"react-i18next\"\r\nimport Table from \"./Table\"\r\nimport DropDown from \"./DropDown\"\r\nimport { Row, Col } from \"reactstrap\"\r\nimport StatsHorizontal from \"@components/widgets/stats/StatsHorizontal\"\r\nimport { User, UserPlus, UserCheck, UserX } from \"react-feather\"\r\nimport Icon from \"@mui/material/Icon\"\r\nimport AddCardOutlinedIcon from \"@mui/icons-material/AddCardOutlined\"\r\nimport \"./style.scss\"\r\nimport Breadcrumbs from \"@components/breadcrumbs\"\r\n\r\nimport {\r\n  storeName,\r\n  getAlwaysGrid,\r\n  getApiSummaryData,\r\n  getSummaryData,\r\n  pageTitle,\r\n  isTreeLayout\r\n} from \"./store\"\r\nimport { Skeleton } from \"@mui/material\"\r\n\r\nconst List = ({\r\n  filtersCustomAdd = {},\r\n  lookupMode = false,\r\n  lookupMode_fieldName = \"\",\r\n  lookupMode_dropdown = false,\r\n  lookupMode_isMulti = false,\r\n  lookupMode_onChange,\r\n  lookupMode_defaultValue,\r\n  lookupMode_isM2MDefValFromGrid,\r\n  lookupMode_defaultFilter\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const dispatch = useDispatch()\r\n  const store = useSelector((state) => state[storeName])\r\n  const [searchTerm, setSearchTerm] = useState(\"\")\r\n\r\n  const handleFilter = (event) => {\r\n    // console.log(\"handleFilter\")\r\n    setSearchTerm(event)\r\n    // debounceFn(event)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (\r\n      getApiSummaryData &&\r\n      (store.dataSummary?.length === 0 ||\r\n        (!store.isLoadingSummary && getAlwaysGrid))\r\n    ) {\r\n      dispatch(getSummaryData({}))\r\n    }\r\n  }, [dispatch, store.dataSummary?.length])\r\n\r\n  const colors = [\r\n    \"primary\",\r\n    \"success\",\r\n    \"warning\",\r\n    \"danger\",\r\n    \"info\",\r\n    \"secondary\"\r\n  ]\r\n\r\n  return !lookupMode_dropdown ? (\r\n    <Fragment>\r\n      <div className=\"content-header row\">\r\n        {!lookupMode && (\r\n          <Breadcrumbs\r\n            title={t(pageTitle)}\r\n            data={[{ title: t(\"App Setting\") }, { title: t(pageTitle) }]}\r\n          />\r\n        )}\r\n        {/* <div className=\"content-header-right text-md-end col-md col-12 mb-2 \">\r\n          <div className=\"d-flex align-items-center mb-sm-0 mb-1 me-1\">\r\n            <label className=\"mb-0\" htmlFor=\"search-invoice\">\r\n              {t(\"Search\")}:\r\n            </label>\r\n            <Input\r\n              id=\"search-invoice\"\r\n              className=\"ms-50 w-100\"\r\n              type=\"text\"\r\n              value={searchTerm}\r\n              onChange={(e) => handleFilter(e.target.value)}\r\n            />\r\n          </div>\r\n        </div> */}\r\n      </div>\r\n      <div className=\"app-user-list\">\r\n        {getApiSummaryData && !lookupMode && (\r\n          <Row>\r\n            {store.dataSummary?.map((item, index) => {\r\n              return (\r\n                <Col>\r\n                  <StatsHorizontal\r\n                    color={colors[index]}\r\n                    statTitle={`${t(item.title)}`}\r\n                    icon={\r\n                      item.icon ? (\r\n                        <Icon\r\n                          baseClassName=\"material-icons-outlined\"\r\n                          fontSize=\"20\"\r\n                        >\r\n                          {item.icon}\r\n                        </Icon>\r\n                      ) : (\r\n                        <Icon\r\n                          baseClassName=\"material-icons-outlined\"\r\n                          fontSize=\"20\"\r\n                        >\r\n                          lightbulb\r\n                        </Icon>\r\n                      )\r\n                    }\r\n                    renderStats={\r\n                      store.isLoadingSummary ? (\r\n                        <Skeleton\r\n                          sx={{ bgcolor: \"#eef2f8\" }}\r\n                          animation=\"wave\"\r\n                          height={25}\r\n                          width={40}\r\n                          className=\"fw-bolder mb-75\"\r\n                        />\r\n                      ) : (\r\n                        <h3 className=\"fw-bolder mb-75\">\r\n                          {item.count_format ?? item.count}\r\n                        </h3>\r\n                      )\r\n                    }\r\n                  />\r\n                </Col>\r\n              )\r\n            })}\r\n          </Row>\r\n        )}\r\n        <Table\r\n          filtersCustomAdd={filtersCustomAdd}\r\n          lookupMode={lookupMode}\r\n          lookupMode_fieldName={lookupMode_fieldName}\r\n          lookupMode_defaultValue={lookupMode_defaultValue}\r\n          lookupMode_onChange={lookupMode_onChange}\r\n          lookupMode_isMulti={lookupMode_isMulti}\r\n          lookupMode_isM2MDefValFromGrid={lookupMode_isM2MDefValFromGrid}\r\n          lookupMode_defaultFilter={lookupMode_defaultFilter}\r\n        />\r\n      </div>\r\n    </Fragment>\r\n  ) : (\r\n    <DropDown\r\n      lookupMode_fieldName={lookupMode_fieldName}\r\n      lookupMode_onChange={lookupMode_onChange}\r\n      lookupMode_defaultValue={lookupMode_defaultValue}\r\n      lookupMode_isMulti={lookupMode_isMulti}\r\n      lookupMode_isM2MDefValFromGrid={lookupMode_isM2MDefValFromGrid}\r\n    />\r\n  )\r\n}\r\n\r\nexport default List\r\n","import { Fragment, useEffect, useState } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { useTranslation } from \"react-i18next\"\r\nimport \"./style.scss\"\r\nimport { selectThemeColors } from \"@utils\"\r\nimport classnames from \"classnames\"\r\nimport Select from \"react-select\"\r\n\r\nimport { storeName, getDataList, getAlwaysGrid } from \"./store\"\r\n\r\nconst List = ({\r\n  lookupMode_fieldName = \"\",\r\n  lookupMode_isMulti = false,\r\n  lookupMode_onChange,\r\n  lookupMode_defaultValue\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const dispatch = useDispatch()\r\n  const store = useSelector((state) => state[storeName])\r\n\r\n  const onChangeInput = (e) => {\r\n    return lookupMode_onChange(e, lookupMode_fieldName)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (store.data.length === 0 || (!store.isLoading && getAlwaysGrid)) {\r\n      dispatch(getDataList({}))\r\n    }\r\n  }, [dispatch, store.data.length])\r\n\r\n  return (\r\n    <Fragment>\r\n      <Select\r\n        theme={selectThemeColors}\r\n        defaultValue={\r\n          !lookupMode_isMulti\r\n            ? store.dataDropdown.filter(\r\n                (el) => el.value === lookupMode_defaultValue\r\n              )\r\n            : lookupMode_defaultValue\r\n        }\r\n        isMulti={lookupMode_isMulti}\r\n        // onChange={lookupMode_onChange}\r\n        onChange={onChangeInput}\r\n        options={store.dataDropdown}\r\n        className={classnames(\"react-select\", {\r\n          \"is-invalid\": store.selectedData?.id === null\r\n        })}\r\n        classNamePrefix=\"select\"\r\n      />\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default List\r\n"],"sourceRoot":""}