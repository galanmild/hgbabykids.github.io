{"version":3,"sources":["views/apps/role/index.js","views/apps/role/DropDown.js"],"names":["List","lookupMode","lookupMode_fieldName","lookupMode_dropdown","lookupMode_defaultValue","lookupMode_onChange","lookupMode_isMulti","errorState","t","useTranslation","dispatch","useDispatch","store","useSelector","state","storeName","useEffect","getApiSummaryData","dataSummary","length","isLoadingSummary","getSummaryData","className","data","isLoading","getAlwaysGrid","getDataList","theme","selectThemeColors","defaultValue","dataDropdown","filter","el","value","isMulti","onChange","e","options","classNamePrefix"],"mappings":"gKAAA,8EAuHeA,UA/GF,SAAC,GAQR,EAPJC,WAOK,IAAD,MANJC,4BAMI,MANmB,GAMnB,MALJC,2BAKI,SAJJC,EAII,EAJJA,wBACAC,EAGI,EAHJA,oBAGI,IAFJC,0BAEI,aADJC,kBACI,SACIC,EAAMC,cAAND,EACFE,EAAWC,cACXC,EAAQC,aAAY,SAACC,GAAD,OAAWA,EAAMC,gBAE3CC,qBAAU,WAAO,IAAD,EAEZC,qBAC8B,KAA9B,UAAAL,EAAMM,mBAAN,eAAmBC,UAClBP,EAAMQ,kBAEPV,EAASW,yBAAe,OAEzB,CAACX,GAAU,UAAAE,EAAMM,mBAAN,eAAmBC,QAAS,IAW1C,OAAQhB,EAqEN,cAAC,UAAD,CACED,qBAAsBA,EACtBG,oBAAqBA,EACrBD,wBAAyBA,EACzBE,mBAAoBA,EACpBC,WAAYA,IAzEd,eAAC,WAAD,WACE,6BAAKC,EAAE,gBACP,mBAAGc,UAAU,OAAb,SACGd,EACC,uJAGJ,cAAC,UAAD,S,iCChDN,oFAqDeR,UA3CF,SAAH,GAMH,IAAD,IALJE,4BAAoB,MAAG,GAAE,MACzBI,0BAAkB,OAAQ,EAC1BD,EAAmB,EAAnBA,oBACAD,EAAuB,EAAvBA,wBAIMM,GAHI,EAAVH,WAEcE,cAAND,EACSG,eACXC,EAAQC,aAAY,SAACC,GAAK,OAAKA,EAAMC,gBAY3C,OANAC,qBAAU,YACkB,IAAtBJ,EAAMW,KAAKJ,SAAkBP,EAAMY,WAAaC,kBAClDf,EAASgB,sBAAY,OAEtB,CAAChB,EAAUE,EAAMW,KAAKJ,SAGvB,cAAC,WAAQ,UACP,cAAC,IAAM,CACLQ,MAAOC,IACPC,aACGvB,EAIGF,EAHAQ,EAAMkB,aAAaC,QACjB,SAACC,GAAE,OAAKA,EAAGC,QAAU7B,KAI7B8B,QAAS5B,EAET6B,SAvBgB,SAACC,GACrB,OAAO/B,EAAoB+B,EAAEH,MAAO/B,IAuBhCmC,QAASzB,EAAMkB,aACfR,UAAU,eACVgB,gBAAgB","file":"static/js/18.61cd7fbc.chunk.js","sourcesContent":["import { Fragment, useEffect } from \"react\"\r\nimport { useTranslation } from \"react-i18next\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport DropDown from \"./DropDown\"\r\nimport RoleCards from \"./RoleCards\"\r\nimport { getApiSummaryData, getSummaryData, storeName } from \"./store\"\r\nimport \"./style.scss\"\r\n\r\nconst List = ({\r\n  lookupMode = false,\r\n  lookupMode_fieldName = \"\",\r\n  lookupMode_dropdown = false,\r\n  lookupMode_defaultValue,\r\n  lookupMode_onChange,\r\n  lookupMode_isMulti = false,\r\n  errorState = false\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const dispatch = useDispatch()\r\n  const store = useSelector((state) => state[storeName])\r\n\r\n  useEffect(() => {\r\n    if (\r\n      getApiSummaryData &&\r\n      store.dataSummary?.length === 0 &&\r\n      !store.isLoadingSummary\r\n    ) {\r\n      dispatch(getSummaryData({}))\r\n    }\r\n  }, [dispatch, store.dataSummary?.length > 0])\r\n\r\n  const colors = [\r\n    \"primary\",\r\n    \"success\",\r\n    \"warning\",\r\n    \"danger\",\r\n    \"info\",\r\n    \"secondary\"\r\n  ]\r\n\r\n  return !lookupMode_dropdown ? (\r\n    <Fragment>\r\n      <h3>{t(\"Roles List\")}</h3>\r\n      <p className=\"mb-2\">\r\n        {t(\r\n          \"A role provides access to predefined menus and features depending on the assigned role to an administrator that can have access to what he needs.\"\r\n        )}\r\n      </p>\r\n      <RoleCards />\r\n      {/* <h3 className=\"mt-50\">{t(\"Total users with their roles\")}</h3>\r\n      <p className=\"mb-2\">\r\n        {t(\r\n          \"Find all of your companyâ€™s administrator accounts and their associate roles.\"\r\n        )}\r\n      </p>\r\n      <div className=\"app-user-list\">\r\n        <Table />\r\n      </div> */}\r\n    </Fragment>\r\n  ) : (\r\n    // <div className=\"app-user-list\">\r\n    //   {getApiSummaryData && (\r\n    //     <Row>\r\n    //       {store.dataSummary?.map((item, index) => {\r\n    //         return (\r\n    //           <Col>\r\n    //             <StatsHorizontal\r\n    //               color={colors[index]}\r\n    //               statTitle={`${t(item.title)}`}\r\n    //               icon={\r\n    //                 item.icon ? (\r\n    //                   <Icon\r\n    //                     baseClassName=\"material-icons-outlined\"\r\n    //                     fontSize=\"20\"\r\n    //                   >\r\n    //                     {item.icon}\r\n    //                   </Icon>\r\n    //                 ) : (\r\n    //                   <Icon\r\n    //                     baseClassName=\"material-icons-outlined\"\r\n    //                     fontSize=\"20\"\r\n    //                   >\r\n    //                     lightbulb\r\n    //                   </Icon>\r\n    //                 )\r\n    //               }\r\n    //               renderStats={\r\n    //                 store.isLoadingSummary ? (\r\n    //                   <Skeleton\r\n    //                     sx={{ bgcolor: \"#eef2f8\" }}\r\n    //                     animation=\"wave\"\r\n    //                     height={25}\r\n    //                     width={40}\r\n    //                     className=\"fw-bolder mb-75\"\r\n    //                   />\r\n    //                 ) : (\r\n    //                   <h3 className=\"fw-bolder mb-75\">\r\n    //                     {item.count_format ?? item.count}\r\n    //                   </h3>\r\n    //                 )\r\n    //               }\r\n    //             />\r\n    //           </Col>\r\n    //         )\r\n    //       })}\r\n    //     </Row>\r\n    //   )}\r\n    //   <Table />\r\n    // </div>\r\n    <DropDown\r\n      lookupMode_fieldName={lookupMode_fieldName}\r\n      lookupMode_onChange={lookupMode_onChange}\r\n      lookupMode_defaultValue={lookupMode_defaultValue}\r\n      lookupMode_isMulti={lookupMode_isMulti}\r\n      errorState={errorState}\r\n    />\r\n  )\r\n}\r\n\r\nexport default List\r\n","import { Fragment, useEffect, useState } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { useTranslation } from \"react-i18next\"\r\nimport \"./style.scss\"\r\nimport { selectThemeColors } from \"@utils\"\r\nimport classnames from \"classnames\"\r\nimport Select from \"react-select\"\r\n\r\nimport { storeName, getDataList, getAlwaysGrid } from \"./store\"\r\n\r\nconst List = ({\r\n  lookupMode_fieldName = \"\",\r\n  lookupMode_isMulti = false,\r\n  lookupMode_onChange,\r\n  lookupMode_defaultValue,\r\n  errorState\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const dispatch = useDispatch()\r\n  const store = useSelector((state) => state[storeName])\r\n\r\n  const onChangeInput = (e) => {\r\n    return lookupMode_onChange(e.value, lookupMode_fieldName)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (store.data.length === 0 || (!store.isLoading && getAlwaysGrid)) {\r\n      dispatch(getDataList({}))\r\n    }\r\n  }, [dispatch, store.data.length])\r\n\r\n  return (\r\n    <Fragment>\r\n      <Select\r\n        theme={selectThemeColors}\r\n        defaultValue={\r\n          !lookupMode_isMulti\r\n            ? store.dataDropdown.filter(\r\n                (el) => el.value === lookupMode_defaultValue\r\n              )\r\n            : lookupMode_defaultValue\r\n        }\r\n        isMulti={lookupMode_isMulti}\r\n        // onChange={lookupMode_onChange}\r\n        onChange={onChangeInput}\r\n        options={store.dataDropdown}\r\n        className=\"react-select\"\r\n        classNamePrefix=\"select\"\r\n      />\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default List\r\n"],"sourceRoot":""}