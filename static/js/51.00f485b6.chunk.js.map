{"version":3,"sources":["views/apps/permission/index.js","views/apps/permission/DropDown.js"],"names":["List","lookupMode","lookupMode_fieldName","lookupMode_dropdown","lookupMode_defaultValue","lookupMode_onChange","lookupMode_isMulti","errorState","t","useTranslation","dispatch","useDispatch","store","useSelector","state","storeName","useEffect","getApiSummaryData","dataSummary","length","isLoadingSummary","getAlwaysGrid","getSummaryData","colors","map","item","index","color","statTitle","title","icon","baseClassName","fontSize","renderStats","sx","bgcolor","animation","height","width","className","count_format","count","data","isLoading","getDataList","theme","selectThemeColors","defaultValue","dataDropdown","filter","el","value","isMulti","onChange","e","options","classNamePrefix"],"mappings":"gKAAA,4HAoIeA,UA9GF,SAAH,GAQH,IAAD,QAPJC,kBAAU,OAAQ,MAClBC,4BAAoB,MAAG,GAAE,MACzBC,2BAAmB,OAAQ,EAC3BC,EAAuB,EAAvBA,wBACAC,EAAmB,EAAnBA,oBAAoB,EAAD,EACnBC,0BAAkB,OAAQ,MAC1BC,kBAAU,OAAQ,EAEVC,EAAMC,cAAND,EACFE,EAAWC,cACXC,EAAQC,aAAY,SAACC,GAAK,OAAKA,EAAMC,gBAE3CC,qBAAU,WAAO,IAAD,EAEZC,sBAC+B,KAAb,QAAjB,EAAAL,EAAMM,mBAAW,aAAjB,EAAmBC,UAChBP,EAAMQ,kBAAoBC,kBAE9BX,EAASY,yBAAe,OAEzB,CAACZ,EAA2B,QAAnB,EAAEE,EAAMM,mBAAW,aAAjB,EAAmBC,SAEjC,IAAMI,EAAS,CACb,UACA,UACA,UACA,SACA,OACA,aAGF,OAAQpB,EAoEN,cAAC,UAAQ,CACPD,qBAAsBA,EACtBG,oBAAqBA,EACrBD,wBAAyBA,EACzBE,mBAAoBA,EACpBC,WAAYA,IAxEd,eAAC,WAAQ,WACP,6BAAKC,EAAE,sBACP,4BACGA,EACC,wGAGFP,GAAcgB,qBACd,cAAC,IAAG,UACgB,QADhB,EACDL,EAAMM,mBAAW,aAAjB,EAAmBM,KAAI,SAACC,EAAMC,GAAW,IAAD,EACvC,OACE,cAAC,IAAG,UACF,cAAC,IAAe,CACdC,MAAOJ,EAAOG,GACdE,UAAS,UAAKpB,EAAEiB,EAAKI,QACrBC,KACEL,EAAKK,KACH,cAAC,IAAI,CACHC,cAAc,0BACdC,SAAS,KAAI,SAEZP,EAAKK,OAGR,cAAC,IAAI,CACHC,cAAc,0BACdC,SAAS,KAAI,uBAMnBC,YACErB,EAAMQ,iBACJ,cAAC,IAAQ,CACPc,GAAI,CAAEC,QAAS,WACfC,UAAU,OACVC,OAAQ,GACRC,MAAO,GACPC,UAAU,oBAGZ,oBAAIA,UAAU,kBAAiB,SACX,QADW,EAC5Bd,EAAKe,oBAAY,QAAIf,EAAKgB,iBAW7C,cAAC,IAAI,UACH,qBAAKF,UAAU,gDAA+C,SAC5D,cAAC,UAAK,CACJtC,WAAYA,EACZC,qBAAsBA,EACtBE,wBAAyBA,EACzBC,oBAAqBA,EACrBC,mBAAoBA,a,iCCpHhC,oFAqDeN,UA3CF,SAAH,GAMH,IAAD,IALJE,4BAAoB,MAAG,GAAE,MACzBI,0BAAkB,OAAQ,EAC1BD,EAAmB,EAAnBA,oBACAD,EAAuB,EAAvBA,wBAIMM,GAHI,EAAVH,WAEcE,cAAND,EACSG,eACXC,EAAQC,aAAY,SAACC,GAAK,OAAKA,EAAMC,gBAY3C,OANAC,qBAAU,YACkB,IAAtBJ,EAAM8B,KAAKvB,SAAkBP,EAAM+B,WAAatB,kBAClDX,EAASkC,sBAAY,OAEtB,CAAClC,EAAUE,EAAM8B,KAAKvB,SAGvB,cAAC,WAAQ,UACP,cAAC,IAAM,CACL0B,MAAOC,IACPC,aACGzC,EAIGF,EAHAQ,EAAMoC,aAAaC,QACjB,SAACC,GAAE,OAAKA,EAAGC,QAAU/C,KAI7BgD,QAAS9C,EAET+C,SAvBgB,SAACC,GACrB,OAAOjD,EAAoBiD,EAAEH,MAAOjD,IAuBhCqD,QAAS3C,EAAMoC,aACfT,UAAU,eACViB,gBAAgB","file":"static/js/51.00f485b6.chunk.js","sourcesContent":["import { Fragment, useEffect } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { useTranslation } from \"react-i18next\"\r\nimport Table from \"./Table\"\r\nimport DropDown from \"./DropDown\"\r\nimport { Row, Col, Card } from \"reactstrap\"\r\nimport StatsHorizontal from \"@components/widgets/stats/StatsHorizontal\"\r\nimport { User, UserPlus, UserCheck, UserX } from \"react-feather\"\r\nimport Icon from \"@mui/material/Icon\"\r\nimport AddCardOutlinedIcon from \"@mui/icons-material/AddCardOutlined\"\r\nimport \"./style.scss\"\r\nimport { selectThemeColors } from \"@utils\"\r\nimport classnames from \"classnames\"\r\nimport Select from \"react-select\"\r\nimport {\r\n  storeName,\r\n  getAlwaysGrid,\r\n  getApiSummaryData,\r\n  getSummaryData\r\n} from \"./store\"\r\nimport { Skeleton } from \"@mui/material\"\r\n\r\nconst List = ({\r\n  lookupMode = false,\r\n  lookupMode_fieldName = \"\",\r\n  lookupMode_dropdown = false,\r\n  lookupMode_defaultValue,\r\n  lookupMode_onChange,\r\n  lookupMode_isMulti = false,\r\n  errorState = false\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const dispatch = useDispatch()\r\n  const store = useSelector((state) => state[storeName])\r\n\r\n  useEffect(() => {\r\n    if (\r\n      getApiSummaryData &&\r\n      (store.dataSummary?.length === 0 ||\r\n        (!store.isLoadingSummary && getAlwaysGrid))\r\n    ) {\r\n      dispatch(getSummaryData({}))\r\n    }\r\n  }, [dispatch, store.dataSummary?.length])\r\n\r\n  const colors = [\r\n    \"primary\",\r\n    \"success\",\r\n    \"warning\",\r\n    \"danger\",\r\n    \"info\",\r\n    \"secondary\"\r\n  ]\r\n\r\n  return !lookupMode_dropdown ? (\r\n    <Fragment>\r\n      <h3>{t(\"Permissions List\")}</h3>\r\n      <p>\r\n        {t(\r\n          \"Each category (Basic, Professional, and Business) includes the four predefined roles shown below.\"\r\n        )}\r\n      </p>\r\n      {!lookupMode && getApiSummaryData && (\r\n        <Row>\r\n          {store.dataSummary?.map((item, index) => {\r\n            return (\r\n              <Col>\r\n                <StatsHorizontal\r\n                  color={colors[index]}\r\n                  statTitle={`${t(item.title)}`}\r\n                  icon={\r\n                    item.icon ? (\r\n                      <Icon\r\n                        baseClassName=\"material-icons-outlined\"\r\n                        fontSize=\"20\"\r\n                      >\r\n                        {item.icon}\r\n                      </Icon>\r\n                    ) : (\r\n                      <Icon\r\n                        baseClassName=\"material-icons-outlined\"\r\n                        fontSize=\"20\"\r\n                      >\r\n                        lightbulb\r\n                      </Icon>\r\n                    )\r\n                  }\r\n                  renderStats={\r\n                    store.isLoadingSummary ? (\r\n                      <Skeleton\r\n                        sx={{ bgcolor: \"#eef2f8\" }}\r\n                        animation=\"wave\"\r\n                        height={25}\r\n                        width={40}\r\n                        className=\"fw-bolder mb-75\"\r\n                      />\r\n                    ) : (\r\n                      <h3 className=\"fw-bolder mb-75\">\r\n                        {item.count_format ?? item.count}\r\n                      </h3>\r\n                    )\r\n                  }\r\n                />\r\n              </Col>\r\n            )\r\n          })}\r\n        </Row>\r\n      )}\r\n\r\n      <Card>\r\n        <div className=\"card-datatable app-user-list table-responsive\">\r\n          <Table\r\n            lookupMode={lookupMode}\r\n            lookupMode_fieldName={lookupMode_fieldName}\r\n            lookupMode_defaultValue={lookupMode_defaultValue}\r\n            lookupMode_onChange={lookupMode_onChange}\r\n            lookupMode_isMulti={lookupMode_isMulti}\r\n          />\r\n        </div>\r\n      </Card>\r\n    </Fragment>\r\n  ) : (\r\n    <DropDown\r\n      lookupMode_fieldName={lookupMode_fieldName}\r\n      lookupMode_onChange={lookupMode_onChange}\r\n      lookupMode_defaultValue={lookupMode_defaultValue}\r\n      lookupMode_isMulti={lookupMode_isMulti}\r\n      errorState={errorState}\r\n    />\r\n  )\r\n}\r\n\r\nexport default List\r\n","import { Fragment, useEffect, useState } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { useTranslation } from \"react-i18next\"\r\nimport \"./style.scss\"\r\nimport { selectThemeColors } from \"@utils\"\r\nimport classnames from \"classnames\"\r\nimport Select from \"react-select\"\r\n\r\nimport { storeName, getDataList, getAlwaysGrid } from \"./store\"\r\n\r\nconst List = ({\r\n  lookupMode_fieldName = \"\",\r\n  lookupMode_isMulti = false,\r\n  lookupMode_onChange,\r\n  lookupMode_defaultValue,\r\n  errorState\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const dispatch = useDispatch()\r\n  const store = useSelector((state) => state[storeName])\r\n\r\n  const onChangeInput = (e) => {\r\n    return lookupMode_onChange(e.value, lookupMode_fieldName)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (store.data.length === 0 || (!store.isLoading && getAlwaysGrid)) {\r\n      dispatch(getDataList({}))\r\n    }\r\n  }, [dispatch, store.data.length])\r\n\r\n  return (\r\n    <Fragment>\r\n      <Select\r\n        theme={selectThemeColors}\r\n        defaultValue={\r\n          !lookupMode_isMulti\r\n            ? store.dataDropdown.filter(\r\n                (el) => el.value === lookupMode_defaultValue\r\n              )\r\n            : lookupMode_defaultValue\r\n        }\r\n        isMulti={lookupMode_isMulti}\r\n        // onChange={lookupMode_onChange}\r\n        onChange={onChangeInput}\r\n        options={store.dataDropdown}\r\n        className=\"react-select\"\r\n        classNamePrefix=\"select\"\r\n      />\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default List\r\n"],"sourceRoot":""}