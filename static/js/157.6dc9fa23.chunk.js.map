{"version":3,"sources":["views/dashboard/widgets/WidgetTrainingAssignedToMe.js"],"names":["params","pagination","clickable","autoplay","delay","disableOnInteraction","WidgetTrainingAssignedToMe","t","useTranslation","store","useSelector","state","dynamicStore","dispatch","dynamic_temp_state","useDispatch","colors","useContext","ThemeColors","useState","loadingPostPut","setLoadingPostPut","loadingDelete","loadingText","setLoadingText","storeName","endpointName","useEffect","pageData","data","length","isLoading","getDataList","baseUrl","type","Id_AttendingState","errorToast","res","errorFieldsMsg","payload","error","errors","errorFields","errorx","toast","message","style","padding","color","danger","main","border","iconTheme","primary","calendarStrings","lastDay","sameDay","nextDay","lastWeek","nextWeek","sameElse","toUpperCaseFilter","d","toUpperCase","lg","xs","minHeight","className","tag","blocking","loader","pill","map","row","src","TrainingData","Image","illustration","height","filter","format","StartDate","Name","Description","icon","size","calendar","IsOnline","LinkRef","Address","Ripple","onClick","e","preventDefault","id","Id_Training","window","location","href","putDataWidget","then","meta","requestStatus","xxx","success","x","xx","setTimeout","getDataListMyActivity","catch"],"mappings":"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","file":"static/js/157.6dc9fa23.chunk.js","sourcesContent":["import Avatar from \"@components/avatar\"\r\nimport UILoader from \"@components/ui-loader\"\r\nimport illustration from \"@src/assets/images/illustration/email.svg\"\r\nimport { Loader } from \"@src/shared/CommonComponents\"\r\nimport { getDataList, putDataWidget } from \"@src/shared/dynamic_pages/store\"\r\nimport \"moment-timezone\"\r\nimport \"moment/locale/id\"\r\nimport { useContext, useEffect, useState } from \"react\"\r\nimport { Calendar, MapPin, Video } from \"react-feather\"\r\nimport { useTranslation } from \"react-i18next\"\r\nimport Moment from \"react-moment\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport {\r\n  Badge,\r\n  Button,\r\n  Card,\r\n  CardBody,\r\n  CardHeader,\r\n  CardText,\r\n  CardTitle,\r\n  Col,\r\n  Spinner\r\n} from \"reactstrap\"\r\n\r\nimport InsertInvitationOutlinedIcon from \"@mui/icons-material/InsertInvitationOutlined\"\r\nimport { ThemeColors } from \"@src/utility/context/ThemeColors\"\r\nimport { getDataList as getDataListMyActivity } from \"@src/views/my-info/store/my_activities\"\r\nimport toast from \"react-hot-toast\"\r\nimport { Swiper, SwiperSlide } from \"swiper/react/swiper-react\"\r\n\r\nconst params = {\r\n  // navigation: true\r\n  pagination: {\r\n    clickable: true\r\n  },\r\n  autoplay: {\r\n    delay: 10000,\r\n    disableOnInteraction: false\r\n  }\r\n}\r\n\r\nconst WidgetTrainingAssignedToMe = () => {\r\n  const { t } = useTranslation()\r\n  // const store = useSelector((state) => state[storeName])\r\n  const store = useSelector((state) => state.dynamicStore)\r\n  const dynamicTempState = useSelector((state) => state.dynamic_temp_state)\r\n  const dispatch = useDispatch()\r\n\r\n  const { colors } = useContext(ThemeColors)\r\n  const [loading, setLoading] = useState(false)\r\n  const [loadingPostPut, setLoadingPostPut] = useState(false)\r\n  const [loadingDelete, setLoadingDelete] = useState(false)\r\n  const [loadingText, setLoadingText] = useState(\"Please Wait\")\r\n\r\n  const storeName = \"TrainingEmployee_assignToMe\"\r\n  const endpointName = \"TrainingEmployee/assignment\"\r\n\r\n  useEffect(() => {\r\n    if (\r\n      !store.pageData[storeName] ||\r\n      (store.pageData[storeName]?.data?.length === 0 &&\r\n        !store.pageData[storeName]?.isLoading)\r\n    ) {\r\n      dispatch(\r\n        getDataList({\r\n          storeName: storeName,\r\n          endpointName: endpointName,\r\n          baseUrl: \"hr\",\r\n          type: \"to_me\",\r\n          Id_AttendingState: 0\r\n        })\r\n      )\r\n    }\r\n  }, [])\r\n\r\n  const errorToast = (res) => {\r\n    let errorFieldsMsg = \"\"\r\n    if (res?.payload?.error?.errors) {\r\n      const errorFields = res?.payload?.error?.errors\r\n      for (let errorx in res?.payload?.error?.errors) {\r\n        errorFieldsMsg = `${errorFieldsMsg} - ${errorFields[errorx]}\\n`\r\n        // console.log(errorx, errorFields[errorx])\r\n      }\r\n    }\r\n    return toast.error(\r\n      `${res.payload?.error?.message} \\n \\n ${errorFieldsMsg}`,\r\n      {\r\n        style: {\r\n          padding: \"16px\",\r\n          color: colors.danger.main,\r\n          border: `1px solid ${colors.danger.main}`\r\n        },\r\n        iconTheme: {\r\n          primary: colors.danger.main\r\n        }\r\n      }\r\n    )\r\n  }\r\n\r\n  const putDataToApi = (data) => {\r\n    setLoadingPostPut(true)\r\n    setLoadingText(\"Accepting Invitation\")\r\n    data[\"storeName\"] = storeName\r\n    data[\"endpointName\"] = endpointName\r\n    data[\"baseUrl\"] = \"hr\"\r\n    data[\"callback_page\"] = window.location.href\r\n    dispatch(putDataWidget(data))\r\n      .then((res) => {\r\n        // console.log(res)\r\n\r\n        if (res.meta.requestStatus === \"fulfilled\") {\r\n          dispatch(\r\n            getDataList({\r\n              storeName: storeName,\r\n              endpointName: endpointName,\r\n              baseUrl: \"hr\",\r\n              type: \"to_me\",\r\n              Id_AttendingState: 0\r\n            })\r\n          )\r\n            .then((xxx) => {\r\n              toast.success(\r\n                `${t(\"Successfully Accept Training Invitation\")}}`,\r\n                {\r\n                  style: {\r\n                    padding: \"16px\",\r\n                    color: colors.success.main,\r\n                    border: `1px solid ${colors.success.main}`\r\n                  },\r\n                  iconTheme: {\r\n                    primary: colors.success.main\r\n                  }\r\n                }\r\n              )\r\n            })\r\n            .then((x) => {\r\n              setLoadingPostPut(false)\r\n            })\r\n            .then((xx) => {\r\n              dispatch(\r\n                getDataList({\r\n                  storeName: \"TrainingEmployee_task\",\r\n                  endpointName: \"TrainingEmployee/assignment\",\r\n                  baseUrl: \"hr\",\r\n                  type: \"to_me\",\r\n                  Id_AttendingState: 1\r\n                })\r\n              )\r\n              setTimeout(() => {\r\n                dispatch(getDataListMyActivity({}))\r\n              }, 8000)\r\n            })\r\n        } else if (res.meta.requestStatus === \"rejected\") {\r\n          errorToast(res)\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        // console.error(error)\r\n        setLoadingPostPut(false)\r\n        errorToast(error)\r\n      })\r\n  }\r\n\r\n  const calendarStrings = {\r\n    lastDay: \"[Yesterday]\",\r\n    sameDay: \"[Today]\",\r\n    nextDay: \"[Tomorrow]\",\r\n    lastWeek: \"[last] dddd\",\r\n    nextWeek: \"dddd\",\r\n    sameElse: \"L\"\r\n  }\r\n\r\n  const toUpperCaseFilter = (d) => {\r\n    return d.toUpperCase()\r\n  }\r\n\r\n  {\r\n    return store.pageData[storeName]?.isLoading ? (\r\n      <Col lg=\"12\" xs=\"12\">\r\n        <Card style={{ minHeight: \"200px\" }}>\r\n          <CardHeader>\r\n            <div className=\"d-flex align-items-center\">\r\n              <InsertInvitationOutlinedIcon className=\"user-timeline-title-icon me-1\" />\r\n              <CardTitle tag=\"h4\">{t(\"Training Invitation\")}</CardTitle>\r\n            </div>\r\n          </CardHeader>\r\n          <UILoader blocking={true} loader={<Loader />}>\r\n            <CardBody></CardBody>\r\n          </UILoader>\r\n        </Card>\r\n      </Col>\r\n    ) : store.pageData[storeName]?.data?.length > 0 ? (\r\n      <Col lg=\"12\" xs=\"12\">\r\n        <Card>\r\n          <CardHeader>\r\n            <div className=\"d-flex align-items-center\">\r\n              <InsertInvitationOutlinedIcon className=\"user-timeline-title-icon me-1\" />\r\n              <CardTitle tag=\"h4\">{t(\"Training Invitation\")}</CardTitle>\r\n              {store.pageData[storeName]?.data?.length > 1 && (\r\n                <Badge className=\"ms-1\" tag=\"div\" color=\"info\" pill>\r\n                  {store.pageData[storeName]?.data?.length}\r\n                </Badge>\r\n              )}\r\n            </div>\r\n          </CardHeader>\r\n\r\n          <CardBody className=\"px-0 pb-0\">\r\n            <Swiper {...params}>\r\n              {store.pageData[storeName]?.data.map((row) => {\r\n                return (\r\n                  <SwiperSlide key={`swiper_${row.id}`}>\r\n                    <Card className=\"card-developer-meetup  cursor-pointer\">\r\n                      <div className=\"meetup-img-wrapper rounded-top text-center\">\r\n                        <img\r\n                          src={\r\n                            row?.TrainingData?.Image\r\n                              ? row.TrainingData.Image\r\n                              : illustration\r\n                          }\r\n                          height=\"170\"\r\n                        />\r\n                      </div>\r\n                      <CardBody>\r\n                        <div className=\"meetup-header d-flex align-items-center\">\r\n                          <div className=\"meetup-day\">\r\n                            <h6 className=\"mb-0\">\r\n                              <Moment filter={toUpperCaseFilter} format=\"ddd\">\r\n                                {row?.TrainingData?.StartDate}\r\n                              </Moment>\r\n                            </h6>\r\n                            <h3 className=\"mb-0\">\r\n                              <Moment format=\"DD\">\r\n                                {row?.TrainingData?.StartDate}\r\n                              </Moment>\r\n                            </h3>\r\n                          </div>\r\n                          <div className=\"my-auto text-truncate\">\r\n                            <CardTitle tag=\"h4\" className=\"mb-25\">\r\n                              {row?.TrainingData?.Name}\r\n                            </CardTitle>\r\n                            <CardText className=\"mb-0\">\r\n                              {row?.TrainingData?.Description}\r\n                            </CardText>\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"d-flex\">\r\n                          <Avatar\r\n                            color=\"light-primary\"\r\n                            className=\"rounded me-1\"\r\n                            icon={<Calendar size={18} />}\r\n                          />\r\n                          <div>\r\n                            {/* <h6 className=\"mb-0\">Sat, May 25, 2020</h6>\r\n                    <small>10:AM to 6:PM</small> */}\r\n                            <h6 className=\"mb-0\">\r\n                              {\r\n                                <Moment calendar={calendarStrings}>\r\n                                  {row?.TrainingData?.StartDate}\r\n                                </Moment>\r\n                              }\r\n                            </h6>\r\n                            <small>\r\n                              {\r\n                                <Moment format=\"[Start at] LT\">\r\n                                  {row?.TrainingData?.StartDate}\r\n                                </Moment>\r\n                              }\r\n                            </small>\r\n                          </div>\r\n                        </div>\r\n                        {!row?.TrainingData?.IsOnline ? (\r\n                          <div className=\"d-flex mt-2\">\r\n                            <Avatar\r\n                              color=\"light-primary\"\r\n                              className=\"rounded me-1\"\r\n                              icon={<MapPin size={18} />}\r\n                            />\r\n                            <div>\r\n                              {/* <h6 className=\"mb-0\">Central Park</h6> */}\r\n                              <small>{row?.TrainingData?.Address}</small>\r\n                            </div>\r\n                          </div>\r\n                        ) : (\r\n                          <div className=\"d-flex mt-2\">\r\n                            <Avatar\r\n                              color=\"light-primary\"\r\n                              className=\"rounded me-1\"\r\n                              icon={<Video size={18} />}\r\n                            />\r\n                            <div>\r\n                              <h6 className=\"mb-0\">{t(\"Online Training\")}</h6>\r\n                              <small>\r\n                                {row?.TrainingData?.LinkRef\r\n                                  ? row?.TrainingData?.LinkRef\r\n                                  : \"The link will be sent before the event starts\"}\r\n                              </small>\r\n                            </div>\r\n                          </div>\r\n                        )}\r\n                        {/* <AvatarGroup data={data} /> */}\r\n                        {row?.Id_AttendingState !== 3 && (\r\n                          <div className=\"d-flex mt-2 align-items-center justify-content-end\">\r\n                            {!loadingPostPut &&\r\n                              (!loadingDelete ? (\r\n                                <Button.Ripple color=\"flat-secondary me-1\">\r\n                                  {t(\"Decline\")}\r\n                                </Button.Ripple>\r\n                              ) : (\r\n                                <Button.Ripple color=\"flat-secondary me-1\">\r\n                                  <Spinner\r\n                                    color=\"white\"\r\n                                    size=\"sm\"\r\n                                    type=\"grow\"\r\n                                  />\r\n                                  <span className=\"ms-50\">{loadingText}</span>\r\n                                </Button.Ripple>\r\n                              ))}\r\n\r\n                            {!loadingPostPut ? (\r\n                              <Button.Ripple\r\n                                onClick={(e) => {\r\n                                  e.preventDefault()\r\n                                  putDataToApi({\r\n                                    id: row?.Id_Training\r\n                                  })\r\n                                }}\r\n                                color=\"gradient-primary\"\r\n                              >\r\n                                {t(\"Accept\")}\r\n                              </Button.Ripple>\r\n                            ) : (\r\n                              <Button.Ripple color=\"gradient-primary\">\r\n                                <Spinner color=\"white\" size=\"sm\" type=\"grow\" />\r\n                                <span className=\"ms-50\">{loadingText}</span>\r\n                              </Button.Ripple>\r\n                            )}\r\n                          </div>\r\n                        )}\r\n\r\n                        {/* {row?.Id_AttendingState !== 3 && (\r\n                          <div className=\"d-flex mt-2 align-items-center justify-content-end\">\r\n                            {!loadingPostPut &&\r\n                              (!loadingDelete ? (\r\n                                <Button.Ripple color=\"flat-secondary me-1\">\r\n                                  {t(\"Decline\")}\r\n                                </Button.Ripple>\r\n                              ) : (\r\n                                <Button.Ripple color=\"flat-secondary me-1\">\r\n                                  <Spinner\r\n                                    color=\"white\"\r\n                                    size=\"sm\"\r\n                                    type=\"grow\"\r\n                                  />\r\n                                  <span className=\"ms-50\">{loadingText}</span>\r\n                                </Button.Ripple>\r\n                              ))}\r\n\r\n                            {!loadingPostPut ? (\r\n                              <Button.Ripple\r\n                                onClick={(e) => {\r\n                                  e.preventDefault()\r\n                                  putDataToApi({\r\n                                    id: row?.Id_Training\r\n                                  })\r\n                                }}\r\n                                color=\"gradient-primary\"\r\n                              >\r\n                                {t(\"Accept\")}\r\n                              </Button.Ripple>\r\n                            ) : (\r\n                              <Button.Ripple color=\"gradient-primary\">\r\n                                <Spinner color=\"white\" size=\"sm\" type=\"grow\" />\r\n                                <span className=\"ms-50\">{loadingText}</span>\r\n                              </Button.Ripple>\r\n                            )}\r\n                          </div>\r\n                        )} */}\r\n\r\n                        {row?.Id_AttendingState === 3 && (\r\n                          <div className=\"d-flex mt-2 align-items-center justify-content-center\">\r\n                            <Button.Ripple color=\"flat-secondary me-1\">\r\n                              {t(\"Awaiting Manager Approval\")}\r\n                            </Button.Ripple>\r\n                          </div>\r\n                        )}\r\n                      </CardBody>\r\n                    </Card>\r\n                  </SwiperSlide>\r\n                )\r\n              })}\r\n            </Swiper>\r\n          </CardBody>\r\n        </Card>\r\n      </Col>\r\n    ) : null\r\n  }\r\n}\r\n\r\nexport default WidgetTrainingAssignedToMe\r\n"],"sourceRoot":""}