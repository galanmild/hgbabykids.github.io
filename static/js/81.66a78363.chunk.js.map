{"version":3,"sources":["views/apps/unit/store/my_unit.js"],"names":["initSelectData","value","label","setUnitSelectedDropdown","createAsyncThunk","data","getUnits","params","a","rejectWithValue","isUserLoggedIn","JSON","parse","localStorage","getItem","member_of","userMember","length","fetchState","some","e","children_count","useJwt","ssoAxiosInterceptor","get","response","total","getUnit","id","axios","addUnit","unit","dispatch","getState","post","units","getAllUnit","deleteUnit","delete","MyUnitsSlice","createSlice","name","initialState","crudTitle","statusSummary","isLoadingSummary","errorSummary","dataSummary","status","isLoading","error","dataDropdown","selectedUnit","selectedUnitMulti","reducers","setUnitSelected","state","action","console","log","payload","resetAll","extraReducers","builder","addCase","fulfilled","pending","map","item","unshift","rejected","message"],"mappings":"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","file":"static/js/81.66a78363.chunk.js","sourcesContent":["// ** Redux Imports\r\nimport { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\"\r\nimport { useTranslation } from \"react-i18next\"\r\n// ** Axios Imports\r\n// import axios from \"axios\"\r\n// import useJwt.ssoAxiosInterceptor from \"../../../../shared/SsoAxiosInterceptorsss\"\r\nimport useJwt from \"@src/auth/jwt/useJwt\"\r\nimport { isUserLoggedIn, isAdminApp } from \"@utils\"\r\nimport { bool } from \"prop-types\"\r\n\r\nconst initSelectData = {\r\n  value: \"\",\r\n  label: \"Select Unit\"\r\n}\r\n\r\nexport const setUnitSelectedDropdown = createAsyncThunk(\r\n  \"Units/setUnitSelectedDropdown\",\r\n  (data) => {\r\n    // console.log(data)\r\n    return data\r\n  }\r\n)\r\n\r\nexport const getUnits = createAsyncThunk(\r\n  \"Units/getUnits\",\r\n  async (params, { rejectWithValue }) => {\r\n    params[\"flat_mode\"] = true\r\n    // console.log(\"GET INIT MEMBER-OF START...\")\r\n    if (isUserLoggedIn() !== null) {\r\n      const userMember =\r\n        (await JSON.parse(localStorage.getItem(\"userData\")).member_of) ?? []\r\n\r\n      if (userMember.length > 0) {\r\n        // userMember.unshift(initSelectData)\r\n        let fetchState = false\r\n        if (userMember.some((e) => e.children_count > 0)) {\r\n          fetchState = true\r\n        }\r\n\r\n        if (fetchState) {\r\n          const response = await useJwt.ssoAxiosInterceptor.get(\"/api/unit\", {\r\n            params\r\n          })\r\n          // response.data.data.unshift(initSelectData)\r\n          // console.log(\"GET INIT MEMBER-OF SUCCESS\")\r\n          return {\r\n            params,\r\n            data: response.data.data,\r\n            total: response.data.total\r\n          }\r\n        } else {\r\n          // console.log(\"GET INIT MEMBER-OF SUCCESS\")\r\n          return { data: userMember }\r\n        }\r\n      } else {\r\n        try {\r\n          const response = await useJwt.ssoAxiosInterceptor.get(\"/api/unit\", {\r\n            params\r\n          })\r\n          // response.data.data.unshift(initSelectData)\r\n          // console.log(\"GET INIT MEMBER-OF SUCCESS\")\r\n          return {\r\n            params,\r\n            data: response.data.data,\r\n            total: response.data.total\r\n          }\r\n        } catch (error) {\r\n          // console.error(\"GET INIT MEMBER-OF FAILED!!!\")\r\n          return rejectWithValue(error.response.data)\r\n        }\r\n      }\r\n    }\r\n  }\r\n)\r\n\r\nexport const getUnit = createAsyncThunk(\"Units/getUnit\", async (id) => {\r\n  const response = await axios.get(`/api/unit/${id}`)\r\n  // console.log(response)\r\n  return response.data.data\r\n})\r\n\r\nexport const addUnit = createAsyncThunk(\r\n  \"Units/addUnit\",\r\n  async (unit, { dispatch, getState }) => {\r\n    await axios.post(\"/api/unit\", unit)\r\n    await dispatch(getUnits(getState().units.params))\r\n    await dispatch(getAllUnit())\r\n    return unit\r\n  }\r\n)\r\n\r\nexport const deleteUnit = createAsyncThunk(\r\n  \"Units/deleteUnit\",\r\n  async (id, { dispatch, getState }) => {\r\n    await axios.delete(\"/apps/unit\", { id })\r\n    await dispatch(getUnits(getState().units.params))\r\n    await dispatch(getAllUnit())\r\n    return id\r\n  }\r\n)\r\n\r\nconst fetchStatus = \"idle\" | \"loading\" | \"succeeded\" | \"failed\"\r\n\r\nexport const MyUnitsSlice = createSlice({\r\n  name: \"Units\",\r\n  initialState: {\r\n    crudTitle: \"Unit\",\r\n\r\n    // SUMMARY\r\n    statusSummary: fetchStatus,\r\n    isLoadingSummary: false,\r\n    errorSummary: \"\" | null,\r\n    dataSummary: [],\r\n\r\n    // ALL\r\n    status: fetchStatus,\r\n    isLoading: false,\r\n    error: \"\" | null,\r\n    data: [],\r\n    total: 1,\r\n\r\n    //SHARED\r\n    dataDropdown: [],\r\n    selectedUnit: {},\r\n    selectedUnitMulti: []\r\n  },\r\n  reducers: {\r\n    setUnitSelected: (state, action) => {\r\n      // console.log(action)\r\n      console.log(\"setUnitSelected\")\r\n      return { ...state, selectedUnit: action.payload }\r\n    },\r\n    resetAll: (state) => {\r\n      // state.errorSummary = null\r\n      // state.dataSummary = []\r\n      // state.error = null\r\n      state.data = []\r\n      state.dataDropdown = []\r\n      state.total = 1\r\n      state.selectedUnit = null\r\n      state.selectedUnitMulti = null\r\n    }\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(setUnitSelectedDropdown.fulfilled, (state, action) => {\r\n        // state.selectedUnit = action.payload\r\n        console.log(\"setUnitSelectedDropdown\")\r\n        return { ...state, selectedUnit: action.payload }\r\n        // console.log(state.selectedUnit)\r\n        // state.selectedUnit = { ...state.selectedUnit, ...action.payload }\r\n      })\r\n      .addCase(getUnits.pending, (state) => {\r\n        // console.log(\"pending\")\r\n        state.status = \"loading\"\r\n        state.isLoading = true\r\n      })\r\n      .addCase(getUnits.fulfilled, (state, action) => {\r\n        state.status = \"succeeded\"\r\n        state.isLoading = false\r\n\r\n        if (action.payload?.data) {\r\n          state.data = action.payload.data\r\n          state.dataDropdown = action.payload.data.map((item) => ({\r\n            value: item.id,\r\n            label: item.name\r\n          }))\r\n          // console.log(state.dataDropdown)\r\n          state.dataDropdown.unshift(initSelectData)\r\n          if (action.payload?.total) {\r\n            state.total = action.payload.total\r\n          }\r\n          state.selectedUnit = state.dataDropdown[0]\r\n        }\r\n      })\r\n      .addCase(getUnits.rejected, (state, action) => {\r\n        state.status = \"failed\"\r\n        state.isLoading = false\r\n        state.error = action.error.message\r\n      })\r\n\r\n      .addCase(getUnit.fulfilled, (state, action) => {\r\n        state.selectedUnit = action.payload\r\n      })\r\n  }\r\n})\r\n\r\n// export const { setUnitSelected, resetAll } = UnitsSlice.actions\r\n\r\nexport default MyUnitsSlice.reducer\r\n"],"sourceRoot":""}